file(
  WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/brotli/CMakeLists.txt"
  "# Ubuntu 12.04 LTS has CMake 2.8.7, and is an important target since several CI\n# services, such as Travis and Drone, use it.\tSolaris 11 has 2.8.6, and it's\n# not difficult to support if you already have to support 2.8.7.\ncmake_minimum_required(VERSION 2.8.6)\n\nproject(brotli C)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n\tmessage(STATUS \"Setting build type to Release as none was specified.\")\n\tset(CMAKE_BUILD_TYPE\n\t\t\t\"Release\"\n\t\t\tCACHE STRING \"Choose the type of build.\" FORCE)\nelse()\n\tmessage(STATUS \"Build type is '\${CMAKE_BUILD_TYPE}'\")\nendif()\n\ninclude(CheckCSourceCompiles)\ncheck_c_source_compiles(\n\t\"#if defined(__EMSCRIPTEN__)\n\t int main() {return 0;}\n\t #endif\" BROTLI_EMSCRIPTEN)\nif(BROTLI_EMSCRIPTEN)\n\tmessage(\"-- Compiler is EMSCRIPTEN\")\nelse()\n\tmessage(\"-- Compiler is not EMSCRIPTEN\")\nendif()\n\n# If Brotli is being bundled in another project, we don't want to install\n# anything.\tHowever, we want to let people override this, so we'll use the\n# BROTLI_BUNDLED_MODE variable to let them do that; just set it to OFF in your\n# project before you add_subdirectory(brotli).\nget_directory_property(BROTLI_PARENT_DIRECTORY PARENT_DIRECTORY)\nif(NOT DEFINED BROTLI_BUNDLED_MODE)\n\t# Bundled mode hasn't been set one way or the other, set the default depending\n\t# on whether or not we are the top-level project.\n\tif(BROTLI_PARENT_DIRECTORY)\n\t\tset(BROTLI_BUNDLED_MODE ON)\n\telse()\n\t\tset(BROTLI_BUNDLED_MODE OFF)\n\tendif()\nendif()\nmark_as_advanced(BROTLI_BUNDLED_MODE)\n\ninclude(GNUInstallDirs)\n\n# Parse version information from common/version.h. Normally we would define\n# these values here and write them out to configuration file(s) (i.e.,\n# config.h), but in this case we parse them from common/version.h to be less\n# intrusive.\nfunction(hex_to_dec HEXADECIMAL DECIMAL)\n\tstring(TOUPPER \"\${HEXADECIMAL}\" _tail)\n\tset(_decimal 0)\n\tstring(LENGTH \"\${_tail}\" _tail_length)\n\twhile(_tail_length GREATER 0)\n\t\tmath(EXPR _decimal \"\${_decimal} * 16\")\n\t\tstring(SUBSTRING \"\${_tail}\" 0 1 _digit)\n\t\tstring(SUBSTRING \"\${_tail}\" 1 -1 _tail)\n\t\tif(_digit STREQUAL \"A\")\n\t\t\tmath(EXPR _decimal \"\${_decimal} + 10\")\n\t\telseif(_digit STREQUAL \"B\")\n\t\t\tmath(EXPR _decimal \"\${_decimal} + 11\")\n\t\telseif(_digit STREQUAL \"C\")\n\t\t\tmath(EXPR _decimal \"\${_decimal} + 12\")\n\t\telseif(_digit STREQUAL \"D\")\n\t\t\tmath(EXPR _decimal \"\${_decimal} + 13\")\n\t\telseif(_digit STREQUAL \"E\")\n\t\t\tmath(EXPR _decimal \"\${_decimal} + 14\")\n\t\telseif(_digit STREQUAL \"F\")\n\t\t\tmath(EXPR _decimal \"\${_decimal} + 15\")\n\t\telse()\n\t\t\tmath(EXPR _decimal \"\${_decimal} + \${_digit}\")\n\t\tendif()\n\t\tstring(LENGTH \"\${_tail}\" _tail_length)\n\tendwhile()\n\tset(\${DECIMAL}\n\t\t\t\${_decimal}\n\t\t\tPARENT_SCOPE)\nendfunction(hex_to_dec)\n\n# Version information\nfile(STRINGS \"c/common/version.h\" _brotli_version_line\n\t\t REGEX \"^#define BROTLI_VERSION (0x[0-9a-fA-F]+)\$\")\nstring(REGEX REPLACE \"^#define BROTLI_VERSION 0x([0-9a-fA-F]+)\$\" \"\\\\1\"\n\t\t\t\t\t\t\t\t\t\t _brotli_version_hex \"\${_brotli_version_line}\")\nhex_to_dec(\"\${_brotli_version_hex}\" _brotli_version)\nmath(EXPR BROTLI_VERSION_MAJOR \"\${_brotli_version} >> 24\")\nmath(EXPR BROTLI_VERSION_MINOR \"(\${_brotli_version} >> 12) & 4095\")\nmath(EXPR BROTLI_VERSION_PATCH \"\${_brotli_version} & 4095\")\nset(BROTLI_VERSION\n\t\t\"\${BROTLI_VERSION_MAJOR}.\${BROTLI_VERSION_MINOR}.\${BROTLI_VERSION_PATCH}\")\nmark_as_advanced(BROTLI_VERSION BROTLI_VERSION_MAJOR BROTLI_VERSION_MINOR\n\t\t\t\t\t\t\t\t BROTLI_VERSION_PATCH)\n\n# ABI Version information\nfile(STRINGS \"c/common/version.h\" _brotli_abi_info_line\n\t\t REGEX \"^#define BROTLI_ABI_VERSION (0x[0-9a-fA-F]+)\$\")\nstring(REGEX REPLACE \"^#define BROTLI_ABI_VERSION 0x([0-9a-fA-F]+)\$\" \"\\\\1\"\n\t\t\t\t\t\t\t\t\t\t _brotli_abi_info_hex \"\${_brotli_abi_info_line}\")\nhex_to_dec(\"\${_brotli_abi_info_hex}\" _brotli_abi_info)\nmath(EXPR BROTLI_ABI_CURRENT \"\${_brotli_abi_info} >> 24\")\nmath(EXPR BROTLI_ABI_REVISION \"(\${_brotli_abi_info} >> 12) & 4095\")\nmath(EXPR BROTLI_ABI_AGE \"\${_brotli_abi_info} & 4095\")\nmath(EXPR BROTLI_ABI_COMPATIBILITY \"\${BROTLI_ABI_CURRENT} - \${BROTLI_ABI_AGE}\")\nmark_as_advanced(BROTLI_ABI_CURRENT BROTLI_ABI_REVISION BROTLI_ABI_AGE\n\t\t\t\t\t\t\t\t BROTLI_ABI_COMPATIBILITY)\n\nif(ENABLE_SANITIZER)\n\tset(CMAKE_C_FLAGS \" \${CMAKE_C_FLAGS} -fsanitize=\${ENABLE_SANITIZER}\")\n\tset(CMAKE_CXX_FLAGS \" \${CMAKE_CXX_FLAGS} -fsanitize=\${ENABLE_SANITIZER}\")\n\tset(CMAKE_EXE_LINKER_FLAGS\n\t\t\t\"\${CMAKE_EXE_LINKER_FLAGS} -fsanitize=\${ENABLE_SANITIZER}\")\n\n\t# By default, brotli depends on undefined behavior, but setting\n\t# BROTLI_BUILD_PORTABLE should result in a build which does not.\n\tif(ENABLE_SANITIZER STREQUAL \"undefined\")\n\t\tadd_definitions(-DBROTLI_BUILD_PORTABLE)\n\tendif()\nendif()\n\ninclude(CheckFunctionExists)\nset(LIBM_LIBRARY)\ncheck_function_exists(log2 LOG2_RES)\nif(NOT LOG2_RES)\n\tset(orig_req_libs \"\${CMAKE_REQUIRED_LIBRARIES}\")\n\tset(CMAKE_REQUIRED_LIBRARIES \"\${CMAKE_REQUIRED_LIBRARIES};m\")\n\tcheck_function_exists(log2 LOG2_LIBM_RES)\n\tif(LOG2_LIBM_RES)\n\t\tset(LIBM_LIBRARY \"m\")\n\t\tadd_definitions(-DBROTLI_HAVE_LOG2=1)\n\telse()\n\t\tadd_definitions(-DBROTLI_HAVE_LOG2=0)\n\tendif()\n\n\tset(CMAKE_REQUIRED_LIBRARIES \"\${orig_req_libs}\")\n\tunset(LOG2_LIBM_RES)\n\tunset(orig_req_libs)\nelse()\n\tadd_definitions(-DBROTLI_HAVE_LOG2=1)\nendif()\nunset(LOG2_RES)\n\nset(BROTLI_INCLUDE_DIRS \"\${CMAKE_CURRENT_SOURCE_DIR}/c/include\")\nmark_as_advanced(BROTLI_INCLUDE_DIRS)\n\nif(BROTLI_STATIC)\n\tset(BROTLI_LIBRARIES_CORE brotlienc-static brotlidec-static\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbrotlicommon-static)\nelse(BROTLI_STATIC)\n\tset(BROTLI_LIBRARIES_CORE brotlienc brotlidec brotlicommon)\nendif(BROTLI_STATIC)\nset(BROTLI_LIBRARIES \${BROTLI_LIBRARIES_CORE} \${LIBM_LIBRARY})\nmark_as_advanced(BROTLI_LIBRARIES)\n\nset(BROTLI_LIBRARIES_CORE_STATIC brotlienc-static brotlidec-static\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t brotlicommon-static)\nset(BROTLI_LIBRARIES_STATIC \${BROTLI_LIBRARIES_CORE_STATIC} \${LIBM_LIBRARY})\nmark_as_advanced(BROTLI_LIBRARIES_STATIC)\n\nif(\${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n\tadd_definitions(-DOS_LINUX)\nelseif(\${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n\tadd_definitions(-DOS_FREEBSD)\nelseif(\${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n\tadd_definitions(-DOS_MACOSX)\nendif()\n\nfunction(transform_sources_list INPUT_FILE OUTPUT_FILE)\n\tfile(READ \${INPUT_FILE} TEXT)\n\tstring(REGEX REPLACE \"\\\\\\\\\\n\" \"~continuation~\" TEXT \${TEXT})\n\tstring(REGEX REPLACE \"([a-zA-Z_][a-zA-Z0-9_]*)[\\t ]*=[\\t ]*([^\\n]*)\"\n\t\t\t\t\t\t\t\t\t\t\t \"SET(\\\\1 \\\\2)\" TEXT \${TEXT})\n\tstring(REPLACE \"~continuation~\" \"\\n\" TEXT \${TEXT})\n\tfile(WRITE \${OUTPUT_FILE} \${TEXT})\nendfunction()\n\ntransform_sources_list(\"scripts/sources.lst\"\n\t\t\t\t\t\t\t\t\t\t\t \"\${CMAKE_CURRENT_BINARY_DIR}/sources.lst.cmake\")\ninclude(\"\${CMAKE_CURRENT_BINARY_DIR}/sources.lst.cmake\")\n\nif(BROTLI_EMSCRIPTEN OR BROTLI_STATIC)\n\tset(BROTLI_SHARED_LIBS \"\")\nelse()\n\tset(BROTLI_SHARED_LIBS brotlicommon brotlidec brotlienc)\n\tadd_library(brotlicommon SHARED \${BROTLI_COMMON_C})\n\tadd_library(brotlidec SHARED \${BROTLI_DEC_C})\n\tadd_library(brotlienc SHARED \${BROTLI_ENC_C})\nendif()\n\nset(BROTLI_STATIC_LIBS brotlicommon-static brotlidec-static brotlienc-static)\nadd_library(brotlicommon-static STATIC \${BROTLI_COMMON_C})\nadd_library(brotlidec-static STATIC \${BROTLI_DEC_C})\nadd_library(brotlienc-static STATIC \${BROTLI_ENC_C})\nset_target_properties(brotlicommon-static PROPERTIES OUTPUT_NAME brotlicommon)\nset_target_properties(brotlidec-static PROPERTIES OUTPUT_NAME brotlidec)\nset_target_properties(brotlienc-static PROPERTIES OUTPUT_NAME brotlienc)\n\n# Older CMake versions does not understand INCLUDE_DIRECTORIES property.\ninclude_directories(\${BROTLI_INCLUDE_DIRS})\n\nforeach(lib IN LISTS BROTLI_SHARED_LIBS)\n\ttarget_compile_definitions(\${lib} PUBLIC \"BROTLI_SHARED_COMPILATION\")\n\tstring(TOUPPER \"\${lib}\" LIB)\n\tset_target_properties(\${lib} PROPERTIES DEFINE_SYMBOL\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\${LIB}_SHARED_COMPILATION\")\nendforeach()\n\nforeach(lib IN LISTS BROTLI_SHARED_LIBS BROTLI_STATIC_LIBS)\n\ttarget_link_libraries(\${lib} \${LIBM_LIBRARY})\n\tset_property(\n\t\tTARGET \${lib}\n\t\tAPPEND\n\t\tPROPERTY INCLUDE_DIRECTORIES \${BROTLI_INCLUDE_DIRS})\n\tset_target_properties(\n\t\t\${lib}\n\t\tPROPERTIES\n\t\t\tVERSION\n\t\t\t\"\${BROTLI_ABI_COMPATIBILITY}.\${BROTLI_ABI_AGE}.\${BROTLI_ABI_REVISION}\"\n\t\t\tSOVERSION \"\${BROTLI_ABI_COMPATIBILITY}\")\n\tif(NOT BROTLI_EMSCRIPTEN)\n\t\tset_target_properties(\${lib} PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\n\tendif()\n\tset_property(\n\t\tTARGET \${lib}\n\t\tAPPEND\n\t\tPROPERTY INTERFACE_INCLUDE_DIRECTORIES \"\${BROTLI_INCLUDE_DIRS}\")\nendforeach()\n\nif(NOT BROTLI_EMSCRIPTEN AND NOT BROTLI_STATIC)\n\ttarget_link_libraries(brotlidec brotlicommon)\n\ttarget_link_libraries(brotlienc brotlicommon)\nendif()\n\ntarget_link_libraries(brotlidec-static brotlicommon-static)\ntarget_link_libraries(brotlienc-static brotlicommon-static)\n\n# For projects stuck on older versions of CMake, this will set the\n# BROTLI_INCLUDE_DIRS and BROTLI_LIBRARIES variables so they still have a\n# relatively easy way to use Brotli:\n#\n# include_directories(\${BROTLI_INCLUDE_DIRS}) target_link_libraries(foo\n# \${BROTLI_LIBRARIES})\nif(BROTLI_PARENT_DIRECTORY)\n\tset(BROTLI_INCLUDE_DIRS\n\t\t\t\"\${BROTLI_INCLUDE_DIRS}\"\n\t\t\tPARENT_SCOPE)\n\tset(BROTLI_LIBRARIES\n\t\t\t\"\${BROTLI_LIBRARIES}\"\n\t\t\tPARENT_SCOPE)\nendif()\n\n# Build the brotli executable\nadd_executable(brotli \${BROTLI_CLI_C})\ntarget_link_libraries(brotli \${BROTLI_STATIC_LIBS})\n\nif(NOT BROTLI_NO_INSTALL)\n\tinstall(TARGETS brotli DESTINATION bin)\n\tinstall(TARGETS \${BROTLI_STATIC_LIBS} DESTINATION lib)\n\n\tinstall(FILES c/include/brotli/decode.h c/include/brotli/encode.h\n\t\t\t\t\t\t\t\tc/include/brotli/port.h c/include/brotli/types.h\n\t\t\t\t\tDESTINATION include/brotli)\n\tinstall(\n\t\tFILES \${CMAKE_CURRENT_BINARY_DIR}/libbrotlicommon.pc\n\t\t\t\t\t\${CMAKE_CURRENT_BINARY_DIR}/libbrotlidec.pc\n\t\t\t\t\t\${CMAKE_CURRENT_BINARY_DIR}/libbrotlienc.pc DESTINATION lib/pkgconfig)\nendif()\n\n# Installation\nif(NOT BROTLI_EMSCRIPTEN)\n\tif(NOT BROTLI_BUNDLED_MODE)\n\t\tinstall(TARGETS brotli RUNTIME DESTINATION \"\${CMAKE_INSTALL_BINDIR}\")\n\n\t\tinstall(\n\t\t\tTARGETS \${BROTLI_LIBRARIES_CORE}\n\t\t\tARCHIVE DESTINATION \"\${CMAKE_INSTALL_LIBDIR}\"\n\t\t\tLIBRARY DESTINATION \"\${CMAKE_INSTALL_LIBDIR}\"\n\t\t\tRUNTIME DESTINATION \"\${CMAKE_INSTALL_BINDIR}\")\n\n\t\tinstall(\n\t\t\tTARGETS \${BROTLI_LIBRARIES_CORE_STATIC}\n\t\t\tARCHIVE DESTINATION \"\${CMAKE_INSTALL_LIBDIR}\"\n\t\t\tLIBRARY DESTINATION \"\${CMAKE_INSTALL_LIBDIR}\"\n\t\t\tRUNTIME DESTINATION \"\${CMAKE_INSTALL_BINDIR}\")\n\n\t\tinstall(DIRECTORY \${BROTLI_INCLUDE_DIRS}/brotli\n\t\t\t\t\t\tDESTINATION \"\${CMAKE_INSTALL_INCLUDEDIR}\")\n\tendif() # BROTLI_BUNDLED_MODE\nendif() # BROTLI_EMSCRIPTEN\n\n# Tests\n\n# If we're targeting Windows but not running on Windows, we need Wine to run the\n# tests...\nif(NOT BROTLI_DISABLE_TESTS)\n\tif(WIN32 AND NOT CMAKE_HOST_WIN32)\n\t\tfind_program(BROTLI_WRAPPER NAMES wine)\n\n\t\tif(NOT BROTLI_WRAPPER)\n\t\t\tmessage(STATUS \"wine not found, disabling tests\")\n\t\t\tset(BROTLI_DISABLE_TESTS TRUE)\n\t\tendif()\n\tendif()\nendif()\n\n# If our compiler is a cross-compiler that we know about (arm/aarch64), then we\n# need to use qemu to execute the tests.\nif(NOT BROTLI_DISABLE_TESTS)\n\tif(\"\${CMAKE_C_COMPILER}\" MATCHES \"^.*/arm-linux-gnueabihf-.*\$\")\n\t\tmessage(STATUS \"Detected arm-linux-gnueabihf cross-compilation\")\n\t\tset(BROTLI_WRAPPER \"qemu-arm\")\n\t\tset(BROTLI_WRAPPER_LD_PREFIX \"/usr/arm-linux-gnueabihf\")\n\tendif()\n\n\tif(\"\${CMAKE_C_COMPILER}\" MATCHES \"^.*/arm-linux-gnueabi-.*\$\")\n\t\tmessage(STATUS \"Detected arm-linux-gnueabi cross-compilation\")\n\t\tset(BROTLI_WRAPPER \"qemu-arm\")\n\t\tset(BROTLI_WRAPPER_LD_PREFIX \"/usr/arm-linux-gnueabi\")\n\tendif()\n\n\tif(\"\${CMAKE_C_COMPILER}\" MATCHES \"^.*/aarch64-linux-gnu-.*\$\")\n\t\tmessage(STATUS \"Detected aarch64-linux-gnu cross-compilation\")\n\t\tset(BROTLI_WRAPPER \"qemu-aarch64\")\n\t\tset(BROTLI_WRAPPER_LD_PREFIX \"/usr/aarch64-linux-gnu\")\n\tendif()\nendif()\n\nif(NOT BROTLI_DISABLE_TESTS)\n\tinclude(CTest)\n\tenable_testing()\n\n\tset(ROUNDTRIP_INPUTS\n\t\t\ttests/testdata/alice29.txt\n\t\t\ttests/testdata/asyoulik.txt\n\t\t\ttests/testdata/lcet10.txt\n\t\t\ttests/testdata/plrabn12.txt\n\t\t\tc/enc/encode.c\n\t\t\tc/common/dictionary.h\n\t\t\tc/dec/decode.c)\n\n\tforeach(INPUT \${ROUNDTRIP_INPUTS})\n\t\tget_filename_component(OUTPUT_NAME \"\${INPUT}\" NAME)\n\n\t\tset(OUTPUT_FILE \"\${CMAKE_CURRENT_BINARY_DIR}/\${OUTPUT_NAME}\")\n\t\tset(INPUT_FILE \"\${CMAKE_CURRENT_SOURCE_DIR}/\${INPUT}\")\n\n\t\tif(EXISTS \"\${INPUT_FILE}\")\n\t\t\tforeach(quality 1 6 9 11)\n\t\t\t\tadd_test(\n\t\t\t\t\tNAME \"\${BROTLI_TEST_PREFIX}roundtrip/\${INPUT}/\${quality}\"\n\t\t\t\t\tCOMMAND\n\t\t\t\t\t\t\"\${CMAKE_COMMAND}\" -DBROTLI_WRAPPER=\${BROTLI_WRAPPER}\n\t\t\t\t\t\t-DBROTLI_WRAPPER_LD_PREFIX=\${BROTLI_WRAPPER_LD_PREFIX}\n\t\t\t\t\t\t-DBROTLI_CLI=\$<TARGET_FILE:brotli> -DQUALITY=\${quality}\n\t\t\t\t\t\t-DINPUT=\${INPUT_FILE} -DOUTPUT=\${OUTPUT_FILE}.\${quality} -P\n\t\t\t\t\t\t\${CMAKE_CURRENT_SOURCE_DIR}/tests/run-roundtrip-test.cmake)\n\t\t\tendforeach()\n\t\telse()\n\t\t\tmessage(WARNING \"Test file \${INPUT} does not exist.\")\n\t\tendif()\n\tendforeach()\n\n\tfile(\n\t\tGLOB_RECURSE COMPATIBILITY_INPUTS\n\t\tRELATIVE \${CMAKE_CURRENT_SOURCE_DIR}\n\t\ttests/testdata/*.compressed*)\n\n\tforeach(INPUT \${COMPATIBILITY_INPUTS})\n\t\tadd_test(\n\t\t\tNAME \"\${BROTLI_TEST_PREFIX}compatibility/\${INPUT}\"\n\t\t\tCOMMAND\n\t\t\t\t\"\${CMAKE_COMMAND}\" -DBROTLI_WRAPPER=\${BROTLI_WRAPPER}\n\t\t\t\t-DBROTLI_WRAPPER_LD_PREFIX=\${BROTLI_WRAPPER_LD_PREFIX}\n\t\t\t\t-DBROTLI_CLI=\$<TARGET_FILE:brotli>\n\t\t\t\t-DINPUT=\${CMAKE_CURRENT_SOURCE_DIR}/\${INPUT} -P\n\t\t\t\t\${CMAKE_CURRENT_SOURCE_DIR}/tests/run-compatibility-test.cmake)\n\tendforeach()\nendif()\n\n# Generate a pkg-config files\n\nfunction(generate_pkg_config_path outvar path)\n\tstring(LENGTH \"\${path}\" path_length)\n\n\tset(path_args \${ARGV})\n\tlist(REMOVE_AT path_args 0 1)\n\tlist(LENGTH path_args path_args_remaining)\n\n\tset(\"\${outvar}\" \"\${path}\")\n\n\twhile(path_args_remaining GREATER 1)\n\t\tlist(GET path_args 0 name)\n\t\tlist(GET path_args 1 value)\n\n\t\tget_filename_component(value_full \"\${value}\" ABSOLUTE)\n\t\tstring(LENGTH \"\${value}\" value_length)\n\n\t\tif(path_length EQUAL value_length AND path STREQUAL value)\n\t\t\tset(\"\${outvar}\" \"\\\${\${name}}\")\n\t\t\tbreak()\n\t\telseif(path_length GREATER value_length)\n\t\t\t# We might be in a subdirectory of the value, but we have to be careful\n\t\t\t# about a prefix matching but not being a subdirectory (for example,\n\t\t\t# /usr/lib64 is not a subdirectory of /usr/lib). We'll do this by making\n\t\t\t# sure the next character is a directory separator.\n\t\t\tstring(SUBSTRING \"\${path}\" \${value_length} 1 sep)\n\t\t\tif(sep STREQUAL \"/\")\n\t\t\t\tstring(SUBSTRING \"\${path}\" 0 \${value_length} s)\n\t\t\t\tif(s STREQUAL value)\n\t\t\t\t\tstring(SUBSTRING \"\${path}\" \"\${value_length}\" -1 suffix)\n\t\t\t\t\tset(\"\${outvar}\" \"\\\${\${name}}\${suffix}\")\n\t\t\t\t\tbreak()\n\t\t\t\tendif()\n\t\t\tendif()\n\t\tendif()\n\n\t\tlist(REMOVE_AT path_args 0 1)\n\t\tlist(LENGTH path_args path_args_remaining)\n\tendwhile()\n\n\tset(\"\${outvar}\"\n\t\t\t\"\${\${outvar}}\"\n\t\t\tPARENT_SCOPE)\nendfunction(generate_pkg_config_path)\n\nfunction(transform_pc_file INPUT_FILE OUTPUT_FILE VERSION)\n\tfile(READ \${INPUT_FILE} TEXT)\n\n\tset(PREFIX \"\${CMAKE_INSTALL_PREFIX}\")\n\tstring(REGEX REPLACE \"@prefix@\" \"\${PREFIX}\" TEXT \${TEXT})\n\tstring(REGEX REPLACE \"@exec_prefix@\" \"\${PREFIX}\" TEXT \${TEXT})\n\n\tgenerate_pkg_config_path(LIBDIR \"\${CMAKE_INSTALL_FULL_LIBDIR}\" prefix\n\t\t\t\t\t\t\t\t\t\t\t\t\t \"\${PREFIX}\")\n\tstring(REGEX REPLACE \"@libdir@\" \"\${LIBDIR}\" TEXT \${TEXT})\n\n\tgenerate_pkg_config_path(INCLUDEDIR \"\${CMAKE_INSTALL_FULL_INCLUDEDIR}\" prefix\n\t\t\t\t\t\t\t\t\t\t\t\t\t \"\${PREFIX}\")\n\tstring(REGEX REPLACE \"@includedir@\" \"\${INCLUDEDIR}\" TEXT \${TEXT})\n\n\tstring(REGEX REPLACE \"@PACKAGE_VERSION@\" \"\${VERSION}\" TEXT \${TEXT})\n\n\tfile(WRITE \${OUTPUT_FILE} \${TEXT})\nendfunction()\n\ntransform_pc_file(\n\t\"scripts/libbrotlicommon.pc.in\"\n\t\"\${CMAKE_CURRENT_BINARY_DIR}/libbrotlicommon.pc\" \"\${BROTLI_VERSION}\")\n\ntransform_pc_file(\n\t\"scripts/libbrotlidec.pc.in\" \"\${CMAKE_CURRENT_BINARY_DIR}/libbrotlidec.pc\"\n\t\"\${BROTLI_VERSION}\")\n\ntransform_pc_file(\n\t\"scripts/libbrotlienc.pc.in\" \"\${CMAKE_CURRENT_BINARY_DIR}/libbrotlienc.pc\"\n\t\"\${BROTLI_VERSION}\")\n\nif(NOT BROTLI_EMSCRIPTEN)\n\tif(NOT BROTLI_BUNDLED_MODE)\n\t\tinstall(FILES \"\${CMAKE_CURRENT_BINARY_DIR}/libbrotlicommon.pc\"\n\t\t\t\t\t\tDESTINATION \"\${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\t\tinstall(FILES \"\${CMAKE_CURRENT_BINARY_DIR}/libbrotlidec.pc\"\n\t\t\t\t\t\tDESTINATION \"\${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\t\tinstall(FILES \"\${CMAKE_CURRENT_BINARY_DIR}/libbrotlienc.pc\"\n\t\t\t\t\t\tDESTINATION \"\${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\tendif() # BROTLI_BUNDLED_MODE\nendif() # BROTLI_EMSCRIPTEN\n\nif(ENABLE_COVERAGE STREQUAL \"yes\")\n\tsetup_target_for_coverage(coverage test coverage)\nendif()\n"
)
file(
  WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/brotli/tests/run-roundtrip-test.cmake"
  "set(ENV{QEMU_LD_PREFIX} \"\${BROTLI_WRAPPER_LD_PREFIX}\")\n\nexecute_process(\n\tWORKING_DIRECTORY \"\${CMAKE_CURRENT_SOURCE_DIR}\"\n\tCOMMAND \${BROTLI_WRAPPER} \${BROTLI_CLI} --force --quality=\${QUALITY} \${INPUT} --output=\${OUTPUT}.br\n\tRESULT_VARIABLE result\n\tERROR_VARIABLE result_stderr)\nif(result)\n\tmessage(FATAL_ERROR \"Compression failed: \${result_stderr}\")\nendif()\n\nexecute_process(\n\tWORKING_DIRECTORY \"\${CMAKE_CURRENT_SOURCE_DIR}\"\n\tCOMMAND \${BROTLI_WRAPPER} \${BROTLI_CLI} --force --decompress \${OUTPUT}.br --output=\${OUTPUT}.unbr\n\tRESULT_VARIABLE result)\nif(result)\n\tmessage(FATAL_ERROR \"Decompression failed\")\nendif()\n\nfunction(test_file_equality f1 f2)\n\tif(NOT CMAKE_VERSION VERSION_LESS 2.8.7)\n\t\tfile(SHA512 \"\${f1}\" f1_cs)\n\t\tfile(SHA512 \"\${f2}\" f2_cs)\n\t\tif(NOT \"\${f1_cs}\" STREQUAL \"\${f2_cs}\")\n\t\t\tmessage(FATAL_ERROR \"Files do not match\")\n\t\tendif()\n\telse()\n\t\tfile(READ \"\${f1}\" f1_contents)\n\t\tfile(READ \"\${f2}\" f2_contents)\n\t\tif(NOT \"\${f1_contents}\" STREQUAL \"\${f2_contents}\")\n\t\t\tmessage(FATAL_ERROR \"Files do not match\")\n\t\tendif()\n\tendif()\nendfunction()\n\ntest_file_equality(\"\${INPUT}\" \"\${OUTPUT}.unbr\")\n"
)
file(
  WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/brotli/tests/run-compatibility-test.cmake"
  "string(REGEX REPLACE \"([a-zA-Z0-9\\\\.]+)\\\\.compressed(\\\\.[0-9]+)?\$\" \"\\\\1\" REFERENCE_DATA \"\${INPUT}\")\nstring(REGEX REPLACE \"\\\\.compressed\" \"\" OUTPUT_FILE \"\${INPUT}\")\nget_filename_component(OUTPUT_NAME \"\${OUTPUT_FILE}\" NAME)\n\nset(ENV{QEMU_LD_PREFIX} \"\${BROTLI_WRAPPER_LD_PREFIX}\")\n\nexecute_process(\n\tWORKING_DIRECTORY \"\${CMAKE_CURRENT_SOURCE_DIR}\"\n\tCOMMAND \${BROTLI_WRAPPER} \${BROTLI_CLI} --force --decompress \${INPUT} --output=\${CMAKE_CURRENT_BINARY_DIR}/\${OUTPUT_NAME}.unbr\n\tRESULT_VARIABLE result)\nif(result)\n\tmessage(FATAL_ERROR \"Decompression failed\")\nendif()\n\nfunction(test_file_equality f1 f2)\n\tif(NOT CMAKE_VERSION VERSION_LESS 2.8.7)\n\t\tfile(SHA512 \"\${f1}\" f1_cs)\n\t\tfile(SHA512 \"\${f2}\" f2_cs)\n\t\tif(NOT \"\${f1_cs}\" STREQUAL \"\${f2_cs}\")\n\t\t\tmessage(FATAL_ERROR \"Files do not match\")\n\t\tendif()\n\telse()\n\t\tfile(READ \"\${f1}\" f1_contents)\n\t\tfile(READ \"\${f2}\" f2_contents)\n\t\tif(NOT \"\${f1_contents}\" STREQUAL \"\${f2_contents}\")\n\t\t\tmessage(FATAL_ERROR \"Files do not match\")\n\t\tendif()\n\tendif()\nendfunction()\n\ntest_file_equality(\"\${REFERENCE_DATA}\" \"\${CMAKE_CURRENT_BINARY_DIR}/\${OUTPUT_NAME}.unbr\")\n"
)
