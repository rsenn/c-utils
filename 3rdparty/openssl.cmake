file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/apps/tsget.cmake"  "# Copyright (c) 2002 The OpenTSA Project. All rights reserved.\n# Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the OpenSSL license (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\nuse strict;\nuse IO::Handle;\nuse Getopt::Std;\nuse File::Basename;\nuse WWW::Curl::Easy;\n\nuse vars qw(%options);\n\n# Callback for reading the body.\nsub read_body {\n    my (\$maxlength, \$state) = @_;\n    my \$return_data = \"\";\n    my \$data_len = length \${\$state->{data}};\n    if (\$state->{bytes} < \$data_len) {\n\t\$data_len = \$data_len - \$state->{bytes};\n\t\$data_len = \$maxlength if \$data_len > \$maxlength;\n\t\$return_data = substr \${\$state->{data}}, \$state->{bytes}, \$data_len;\n\t\$state->{bytes} += \$data_len;\n    }\n    return \$return_data;\n}\n\n# Callback for writing the body into a variable.\nsub write_body {\n    my (\$data, \$pointer) = @_;\n    \${\$pointer} .= \$data;\n    return length(\$data);\n}\n\n# Initialise a new Curl object.\nsub create_curl {\n    my \$url = shift;\n\n    # Create Curl object.\n    my \$curl = WWW::Curl::Easy::new();\n\n    # Error-handling related options.\n    \$curl->setopt(CURLOPT_VERBOSE, 1) if \$options{d};\n    \$curl->setopt(CURLOPT_FAILONERROR, 1);\n    \$curl->setopt(CURLOPT_USERAGENT,\n    \"OpenTSA tsget.pl/openssl-@VERSION_STRING@\");\n\n    # Options for POST method.\n    \$curl->setopt(CURLOPT_UPLOAD, 1);\n    \$curl->setopt(CURLOPT_CUSTOMREQUEST, \"POST\");\n    \$curl->setopt(CURLOPT_HTTPHEADER,\n\t\t[\"Content-Type: application/timestamp-query\",\n\t\t\"Accept: application/timestamp-reply,application/timestamp-response\"]);\n    \$curl->setopt(CURLOPT_READFUNCTION, \\&read_body);\n    \$curl->setopt(CURLOPT_HEADERFUNCTION, sub { return length(\$_[0]); });\n\n    # Options for getting the result.\n    \$curl->setopt(CURLOPT_WRITEFUNCTION, \\&write_body);\n\n    # SSL related options.\n    \$curl->setopt(CURLOPT_SSLKEYTYPE, \"PEM\");\n    \$curl->setopt(CURLOPT_SSL_VERIFYPEER, 1);\t# Verify server's certificate.\n    \$curl->setopt(CURLOPT_SSL_VERIFYHOST, 2);\t# Check server's CN.\n    \$curl->setopt(CURLOPT_SSLKEY, \$options{k}) if defined(\$options{k});\n    \$curl->setopt(CURLOPT_SSLKEYPASSWD, \$options{p}) if defined(\$options{p});\n    \$curl->setopt(CURLOPT_SSLCERT, \$options{c}) if defined(\$options{c});\n    \$curl->setopt(CURLOPT_CAINFO, \$options{C}) if defined(\$options{C});\n    \$curl->setopt(CURLOPT_CAPATH, \$options{P}) if defined(\$options{P});\n    \$curl->setopt(CURLOPT_RANDOM_FILE, \$options{r}) if defined(\$options{r});\n    \$curl->setopt(CURLOPT_EGDSOCKET, \$options{g}) if defined(\$options{g});\n\n    # Setting destination.\n    \$curl->setopt(CURLOPT_URL, \$url);\n\n    return \$curl;\n}\n\n# Send a request and returns the body back.\nsub get_timestamp {\n    my \$curl = shift;\n    my \$body = shift;\n    my \$ts_body;\n    local \$::error_buf;\n\n    # Error-handling related options.\n    \$curl->setopt(CURLOPT_ERRORBUFFER, \"::error_buf\");\n\n    # Options for POST method.\n    \$curl->setopt(CURLOPT_INFILE, {data => \$body, bytes => 0});\n    \$curl->setopt(CURLOPT_INFILESIZE, length(\${\$body}));\n\n    # Options for getting the result.\n    \$curl->setopt(CURLOPT_FILE, \\\$ts_body);\n\n    # Send the request...\n    my \$error_code = \$curl->perform();\n    my \$error_string;\n    if (\$error_code != 0) {\n        my \$http_code = \$curl->getinfo(CURLINFO_HTTP_CODE);\n\t\$error_string = \"could not get timestamp\";\n\t\$error_string .= \", http code: \$http_code\" unless \$http_code == 0;\n\t\$error_string .= \", curl code: \$error_code\";\n\t\$error_string .= \" (\$::error_buf)\" if defined(\$::error_buf);\n    } else {\n        my \$ct = \$curl->getinfo(CURLINFO_CONTENT_TYPE);\n\tif (lc(\$ct) ne \"application/timestamp-reply\"\n\t    && lc(\$ct) ne \"application/timestamp-response\") {\n\t    \$error_string = \"unexpected content type returned: \$ct\";\n        }\n    }\n    return (\$ts_body, \$error_string);\n\n}\n\n# Print usage information and exists.\nsub usage {\n\n    print STDERR \"usage: \$0 -h <server_url> [-e <extension>] [-o <output>] \";\n    print STDERR \"[-v] [-d] [-k <private_key.pem>] [-p <key_password>] \";\n    print STDERR \"[-c <client_cert.pem>] [-C <CA_certs.pem>] [-P <CA_path>] \";\n    print STDERR \"[-r <file:file...>] [-g <EGD_socket>] [<request>]...\\n\";\n    exit 1;\n}\n\n# ----------------------------------------------------------------------\n#   Main program\n# ----------------------------------------------------------------------\n\n# Getting command-line options (default comes from TSGET environment variable).\nmy \$getopt_arg =  \"h:e:o:vdk:p:c:C:P:r:g:\";\nif (exists \$ENV{TSGET}) {\n    my @old_argv = @ARGV;\n    @ARGV = split /\\s+/, \$ENV{TSGET};\n    getopts(\$getopt_arg, \\%options) or usage;\n    @ARGV = @old_argv;\n}\ngetopts(\$getopt_arg, \\%options) or usage;\n\n# Checking argument consistency.\nif (!exists(\$options{h}) || (@ARGV == 0 && !exists(\$options{o}))\n    || (@ARGV > 1 && exists(\$options{o}))) {\n    print STDERR \"Inconsistent command line options.\\n\";\n    usage;\n}\n# Setting defaults.\n@ARGV = (\"-\") unless @ARGV != 0;\n\$options{e} = \".tsr\" unless defined(\$options{e});\n\n# Processing requests.\nmy \$curl = create_curl \$options{h};\nundef \$/;   # For reading whole files.\nREQUEST: foreach (@ARGV) {\n    my \$input = \$_;\n    my (\$base, \$path) = fileparse(\$input, '\\.[^.]*');\n    my \$output_base = \$base . \$options{e};\n    my \$output = defined(\$options{o}) ? \$options{o} : \$path . \$output_base;\n\n    STDERR->printflush(\"\$input: \") if \$options{v};\n    # Read request.\n    my \$body;\n    if (\$input eq \"-\") {\n\t# Read the request from STDIN;\n\t\$body = <STDIN>;\n    } else {\n\t# Read the request from file.\n        open INPUT, \"<\" . \$input\n\t    or warn(\"\$input: could not open input file: \$!\\n\"), next REQUEST;\n        \$body = <INPUT>;\n        close INPUT\n\t    or warn(\"\$input: could not close input file: \$!\\n\"), next REQUEST;\n    }\n\n    # Send request.\n    STDERR->printflush(\"sending request\") if \$options{v};\n\n    my (\$ts_body, \$error) = get_timestamp \$curl, \\\$body;\n    if (defined(\$error)) {\n\tdie \"\$input: fatal error: \$error\\n\";\n    }\n    STDERR->printflush(\", reply received\") if \$options{v};\n\n    # Write response.\n    if (\$output eq \"-\") {\n\t# Write to STDOUT.\n        print \$ts_body;\n    } else {\n\t# Write to file.\n        open OUTPUT, \">\", \$output\n\t    or warn(\"\$output: could not open output file: \$!\\n\"), next REQUEST;\n        print OUTPUT \$ts_body;\n        close OUTPUT\n\t    or warn(\"\$output: could not close output file: \$!\\n\"), next REQUEST;\n    }\n    STDERR->printflush(\", \$output written.\\n\") if \$options{v};\n}\n\$curl->cleanup();\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/apps/CA.pl.cmake"  "# Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the OpenSSL license (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\n#\n# Wrapper around the ca to make it easier to use\n#\n\nuse strict;\nuse warnings;\n\nmy \$openssl = \"openssl\";\nif(defined \$ENV{'OPENSSL'}) {\n    \$openssl = \$ENV{'OPENSSL'};\n} else {\n    \$ENV{'OPENSSL'} = \$openssl;\n}\n\nmy \$verbose = 1;\n\nmy \$OPENSSL_CONFIG = \$ENV{\"OPENSSL_CONFIG\"} || \"\";\nmy \$DAYS = \"-days 365\";\nmy \$CADAYS = \"-days 1095\";\t# 3 years\nmy \$REQ = \"\$openssl req \$OPENSSL_CONFIG\";\nmy \$CA = \"\$openssl ca \$OPENSSL_CONFIG\";\nmy \$VERIFY = \"\$openssl verify\";\nmy \$X509 = \"\$openssl x509\";\nmy \$PKCS12 = \"\$openssl pkcs12\";\n\n# default openssl.cnf file has setup as per the following\nmy \$CATOP = \"./demoCA\";\nmy \$CAKEY = \"cakey.pem\";\nmy \$CAREQ = \"careq.pem\";\nmy \$CACERT = \"cacert.pem\";\nmy \$CACRL = \"crl.pem\";\nmy \$DIRMODE = 0777;\n\nmy \$NEWKEY = \"newkey.pem\";\nmy \$NEWREQ = \"newreq.pem\";\nmy \$NEWCERT = \"newcert.pem\";\nmy \$NEWP12 = \"newcert.p12\";\nmy \$RET = 0;\nmy \$WHAT = shift @ARGV || \"\";\nmy \$FILE;\n\n# See if reason for a CRL entry is valid; exit if not.\nsub crl_reason_ok\n{\n    my \$r = shift;\n\n    if (\$r eq 'unspecified' || \$r eq 'keyCompromise'\n        || \$r eq 'CACompromise' || \$r eq 'affiliationChanged'\n        || \$r eq 'superseded' || \$r eq 'cessationOfOperation'\n        || \$r eq 'certificateHold' || \$r eq 'removeFromCRL') {\n        return 1;\n    }\n    print STDERR \"Invalid CRL reason; must be one of:\\n\";\n    print STDERR \"    unspecified, keyCompromise, CACompromise,\\n\";\n    print STDERR \"    affiliationChanged, superseded, cessationOfOperation\\n\";\n    print STDERR \"    certificateHold, removeFromCRL\";\n    exit 1;\n}\n\n# Copy a PEM-format file; return like exit status (zero means ok)\nsub copy_pemfile\n{\n    my (\$infile, \$outfile, \$bound) = @_;\n    my \$found = 0;\n\n    open IN, \$infile || die \"Cannot open \$infile, \$!\";\n    open OUT, \">\$outfile\" || die \"Cannot write to \$outfile, \$!\";\n    while (<IN>) {\n        \$found = 1 if /^-----BEGIN.*\$bound/;\n        print OUT \$_ if \$found;\n        \$found = 2, last if /^-----END.*\$bound/;\n    }\n    close IN;\n    close OUT;\n    return \$found == 2 ? 0 : 1;\n}\n\n# Wrapper around system; useful for debugging.  Returns just the exit status\nsub run\n{\n    my \$cmd = shift;\n    print \"====\\n\$cmd\\n\" if \$verbose;\n    my \$status = system(\$cmd);\n    print \"==> \$status\\n====\\n\" if \$verbose;\n    return \$status >> 8;\n}\n\n\nif ( \$WHAT =~ /^(-\\?|-h|-help)\$/ ) {\n    print STDERR \"usage: CA -newcert|-newreq|-newreq-nodes|-newca|-sign|-signcert|-verify\\n\";\n    print STDERR \"       CA -pkcs12 [certname]\\n\";\n    print STDERR \"       CA -crl|-revoke cert-filename [reason]\\n\";\n    exit 0;\n}\nif (\$WHAT eq '-newcert' ) {\n    # create a certificate\n    \$RET = run(\"\$REQ -new -x509 -keyout \$NEWKEY -out \$NEWCERT \$DAYS\");\n    print \"Cert is in \$NEWCERT, private key is in \$NEWKEY\\n\" if \$RET == 0;\n} elsif (\$WHAT eq '-newreq' ) {\n    # create a certificate request\n    \$RET = run(\"\$REQ -new -keyout \$NEWKEY -out \$NEWREQ \$DAYS\");\n    print \"Request is in \$NEWREQ, private key is in \$NEWKEY\\n\" if \$RET == 0;\n} elsif (\$WHAT eq '-newreq-nodes' ) {\n    # create a certificate request\n    \$RET = run(\"\$REQ -new -nodes -keyout \$NEWKEY -out \$NEWREQ \$DAYS\");\n    print \"Request is in \$NEWREQ, private key is in \$NEWKEY\\n\" if \$RET == 0;\n} elsif (\$WHAT eq '-newca' ) {\n    # create the directory hierarchy\n    mkdir \${CATOP}, \$DIRMODE;\n    mkdir \"\${CATOP}/certs\", \$DIRMODE;\n    mkdir \"\${CATOP}/crl\", \$DIRMODE ;\n    mkdir \"\${CATOP}/newcerts\", \$DIRMODE;\n    mkdir \"\${CATOP}/private\", \$DIRMODE;\n    open OUT, \">\${CATOP}/index.txt\";\n    close OUT;\n    open OUT, \">\${CATOP}/crlnumber\";\n    print OUT \"01\\n\";\n    close OUT;\n    # ask user for existing CA certificate\n    print \"CA certificate filename (or enter to create)\\n\";\n    \$FILE = \"\" unless defined(\$FILE = <STDIN>);\n    \$FILE =~ s{\\R\$}{};\n    if (\$FILE ne \"\") {\n        copy_pemfile(\$FILE,\"\${CATOP}/private/\$CAKEY\", \"PRIVATE\");\n        copy_pemfile(\$FILE,\"\${CATOP}/\$CACERT\", \"CERTIFICATE\");\n    } else {\n        print \"Making CA certificate ...\\n\";\n        \$RET = run(\"\$REQ -new -keyout\"\n                . \" \${CATOP}/private/\$CAKEY\"\n                . \" -out \${CATOP}/\$CAREQ\");\n        \$RET = run(\"\$CA -create_serial\"\n                . \" -out \${CATOP}/\$CACERT \$CADAYS -batch\"\n                . \" -keyfile \${CATOP}/private/\$CAKEY -selfsign\"\n                . \" -extensions v3_ca\"\n                . \" -infiles \${CATOP}/\$CAREQ\") if \$RET == 0;\n        print \"CA certificate is in \${CATOP}/\$CACERT\\n\" if \$RET == 0;\n    }\n} elsif (\$WHAT eq '-pkcs12' ) {\n    my \$cname = \$ARGV[0];\n    \$cname = \"My Certificate\" unless defined \$cname;\n    \$RET = run(\"\$PKCS12 -in \$NEWCERT -inkey \$NEWKEY\"\n            . \" -certfile \${CATOP}/\$CACERT\"\n            . \" -out \$NEWP12\"\n            . \" -export -name \\\"\$cname\\\"\");\n    print \"PKCS #12 file is in \$NEWP12\\n\" if \$RET == 0;\n} elsif (\$WHAT eq '-xsign' ) {\n    \$RET = run(\"\$CA -policy policy_anything -infiles \$NEWREQ\");\n} elsif (\$WHAT eq '-sign' ) {\n    \$RET = run(\"\$CA -policy policy_anything -out \$NEWCERT -infiles \$NEWREQ\");\n    print \"Signed certificate is in \$NEWCERT\\n\" if \$RET == 0;\n} elsif (\$WHAT eq '-signCA' ) {\n    \$RET = run(\"\$CA -policy policy_anything -out \$NEWCERT\"\n            . \" -extensions v3_ca -infiles \$NEWREQ\");\n    print \"Signed CA certificate is in \$NEWCERT\\n\" if \$RET == 0;\n} elsif (\$WHAT eq '-signcert' ) {\n    \$RET = run(\"\$X509 -x509toreq -in \$NEWREQ -signkey \$NEWREQ\"\n            . \" -out tmp.pem\");\n    \$RET = run(\"\$CA -policy policy_anything -out \$NEWCERT\"\n            . \" -infiles tmp.pem\") if \$RET == 0;\n    print \"Signed certificate is in \$NEWCERT\\n\" if \$RET == 0;\n} elsif (\$WHAT eq '-verify' ) {\n    my @files = @ARGV ? @ARGV : ( \$NEWCERT );\n    my \$file;\n    foreach \$file (@files) {\n        my \$status = run(\"\$VERIFY \\\"-CAfile\\\" \${CATOP}/\$CACERT \$file\");\n        \$RET = \$status if \$status != 0;\n    }\n} elsif (\$WHAT eq '-crl' ) {\n    \$RET = run(\"\$CA -gencrl -out \${CATOP}/crl/\$CACRL\");\n    print \"Generated CRL is in \${CATOP}/crl/\$CACRL\\n\" if \$RET == 0;\n} elsif (\$WHAT eq '-revoke' ) {\n    my \$cname = \$ARGV[0];\n    if (!defined \$cname) {\n        print \"Certificate filename is required; reason optional.\\n\";\n        exit 1;\n    }\n    my \$reason = \$ARGV[1];\n    \$reason = \" -crl_reason \$reason\"\n        if defined \$reason && crl_reason_ok(\$reason);\n    \$RET = run(\"\$CA -revoke \\\"\$cname\\\"\" . \$reason);\n} else {\n    print STDERR \"Unknown arg \\\"\$WHAT\\\"\\n\";\n    print STDERR \"Use -help for help.\\n\";\n    exit 1;\n}\n\nexit \$RET;\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/apps/CMakeLists.txt"  "# Based on original work by David Manura Copyright (C) 2007-2012 LuaDist. Copyright (C) 2013 Brian Sidebotham\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfile(READ \${CMAKE_CURRENT_SOURCE_DIR}/CA.pl.cmake CA_PL)\nfile(WRITE \${CMAKE_CURRENT_BINARY_DIR}/CA.pl \"\${CA_PL}\")\n\nfile(READ \${CMAKE_CURRENT_SOURCE_DIR}/tsget.cmake TSGET)\nstring(REPLACE \"@VERSION_STRING@\" \"\${VERSION_STRING}\" TSGET \"\${TSGET}\")\nfile(WRITE \${CMAKE_CURRENT_BINARY_DIR}/tsget \"\${TSGET}\")\n\nfile(READ \${CMAKE_CURRENT_SOURCE_DIR}/progs.h.cmake PROGS_H)\nfile(WRITE \${CMAKE_CURRENT_BINARY_DIR}/progs.h \"\${PROGS_H}\")\n\nadd_definitions(-DMONOLITH)\n\nset(E_SRC app_rand.c apps.c asn1pars.c bf_prefix.c ca.c ciphers.c cms.c crl.c crl2p7.c dgst.c dhparam.c dsa.c dsaparam.c ec.c ecparam.c enc.c engine.c errstr.c gendsa.c genpkey.c genrsa.c nseq.c ocsp.c openssl.c opt.c passwd.c pkcs12.c pkcs7.c pkcs8.c pkey.c pkeyparam.c pkeyutl.c prime.c rand.c rehash.c req.c rsa.c rsautl.c s_cb.c s_client.c s_server.c s_socket.c s_time.c sess_id.c smime.c speed.c spkac.c storeutl.c srp.c ts.c verify.c version.c x509.c)\n\ninclude_directories(\n  BEFORE SYSTEM \${PROJECT_SOURCE_DIR}/ # e_os.h\n  \${PROJECT_SOURCE_DIR}/include \n  #\${CMAKE_CURRENT_SOURCE_DIR}/../include \n  \${CMAKE_CURRENT_BINARY_DIR}/ # progs.h\n)\n\nif(WIN32)\n  list(APPEND E_SRC win32_init.c)\nendif()\n\nadd_executable(openssl \${E_SRC})\n\ntarget_link_libraries(\n  openssl libcrypto libssl\n  pthread\n  # compat\n)\n\nif(NOT OPENSSL_NO_INSTALL)\n  install(TARGETS openssl RUNTIME DESTINATION bin)\n  install(FILES \${CMAKE_CURRENT_BINARY_DIR}/CA.pl \${CMAKE_CURRENT_BINARY_DIR}/tsget DESTINATION share/openssl)\nendif(NOT OPENSSL_NO_INSTALL)\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/apps/progs.h.cmake"  "/*\n * WARNING: do not edit!\n * Generated by apps/progs.pl\n *\n * Copyright 1995-2018 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\ntypedef enum FUNC_TYPE {\n    FT_none, FT_general, FT_md, FT_cipher, FT_pkey,\n    FT_md_alg, FT_cipher_alg\n} FUNC_TYPE;\n\ntypedef struct function_st {\n    FUNC_TYPE type;\n    const char *name;\n    int (*func)(int argc, char *argv[]);\n    const OPTIONS *help;\n} FUNCTION;\n\nDEFINE_LHASH_OF(FUNCTION);\n\nextern int asn1parse_main(int argc, char *argv[]);\nextern int ca_main(int argc, char *argv[]);\nextern int ciphers_main(int argc, char *argv[]);\nextern int cms_main(int argc, char *argv[]);\nextern int crl_main(int argc, char *argv[]);\nextern int crl2pkcs7_main(int argc, char *argv[]);\nextern int dgst_main(int argc, char *argv[]);\nextern int dhparam_main(int argc, char *argv[]);\nextern int dsa_main(int argc, char *argv[]);\nextern int dsaparam_main(int argc, char *argv[]);\nextern int ec_main(int argc, char *argv[]);\nextern int ecparam_main(int argc, char *argv[]);\nextern int enc_main(int argc, char *argv[]);\nextern int engine_main(int argc, char *argv[]);\nextern int errstr_main(int argc, char *argv[]);\nextern int gendsa_main(int argc, char *argv[]);\nextern int genpkey_main(int argc, char *argv[]);\nextern int genrsa_main(int argc, char *argv[]);\nextern int help_main(int argc, char *argv[]);\nextern int list_main(int argc, char *argv[]);\nextern int nseq_main(int argc, char *argv[]);\nextern int ocsp_main(int argc, char *argv[]);\nextern int passwd_main(int argc, char *argv[]);\nextern int pkcs12_main(int argc, char *argv[]);\nextern int pkcs7_main(int argc, char *argv[]);\nextern int pkcs8_main(int argc, char *argv[]);\nextern int pkey_main(int argc, char *argv[]);\nextern int pkeyparam_main(int argc, char *argv[]);\nextern int pkeyutl_main(int argc, char *argv[]);\nextern int prime_main(int argc, char *argv[]);\nextern int rand_main(int argc, char *argv[]);\nextern int rehash_main(int argc, char *argv[]);\nextern int req_main(int argc, char *argv[]);\nextern int rsa_main(int argc, char *argv[]);\nextern int rsautl_main(int argc, char *argv[]);\nextern int s_client_main(int argc, char *argv[]);\nextern int s_server_main(int argc, char *argv[]);\nextern int s_time_main(int argc, char *argv[]);\nextern int sess_id_main(int argc, char *argv[]);\nextern int smime_main(int argc, char *argv[]);\nextern int speed_main(int argc, char *argv[]);\nextern int spkac_main(int argc, char *argv[]);\nextern int srp_main(int argc, char *argv[]);\nextern int storeutl_main(int argc, char *argv[]);\nextern int ts_main(int argc, char *argv[]);\nextern int verify_main(int argc, char *argv[]);\nextern int version_main(int argc, char *argv[]);\nextern int x509_main(int argc, char *argv[]);\n\nextern const OPTIONS asn1parse_options[];\nextern const OPTIONS ca_options[];\nextern const OPTIONS ciphers_options[];\nextern const OPTIONS cms_options[];\nextern const OPTIONS crl_options[];\nextern const OPTIONS crl2pkcs7_options[];\nextern const OPTIONS dgst_options[];\nextern const OPTIONS dhparam_options[];\nextern const OPTIONS dsa_options[];\nextern const OPTIONS dsaparam_options[];\nextern const OPTIONS ec_options[];\nextern const OPTIONS ecparam_options[];\nextern const OPTIONS enc_options[];\nextern const OPTIONS engine_options[];\nextern const OPTIONS errstr_options[];\nextern const OPTIONS gendsa_options[];\nextern const OPTIONS genpkey_options[];\nextern const OPTIONS genrsa_options[];\nextern const OPTIONS help_options[];\nextern const OPTIONS list_options[];\nextern const OPTIONS nseq_options[];\nextern const OPTIONS ocsp_options[];\nextern const OPTIONS passwd_options[];\nextern const OPTIONS pkcs12_options[];\nextern const OPTIONS pkcs7_options[];\nextern const OPTIONS pkcs8_options[];\nextern const OPTIONS pkey_options[];\nextern const OPTIONS pkeyparam_options[];\nextern const OPTIONS pkeyutl_options[];\nextern const OPTIONS prime_options[];\nextern const OPTIONS rand_options[];\nextern const OPTIONS rehash_options[];\nextern const OPTIONS req_options[];\nextern const OPTIONS rsa_options[];\nextern const OPTIONS rsautl_options[];\nextern const OPTIONS s_client_options[];\nextern const OPTIONS s_server_options[];\nextern const OPTIONS s_time_options[];\nextern const OPTIONS sess_id_options[];\nextern const OPTIONS smime_options[];\nextern const OPTIONS speed_options[];\nextern const OPTIONS spkac_options[];\nextern const OPTIONS srp_options[];\nextern const OPTIONS storeutl_options[];\nextern const OPTIONS ts_options[];\nextern const OPTIONS verify_options[];\nextern const OPTIONS version_options[];\nextern const OPTIONS x509_options[];\n\n#ifdef INCLUDE_FUNCTION_TABLE\nstatic FUNCTION functions[] = {\n    {FT_general, \"asn1parse\", asn1parse_main, asn1parse_options},\n    {FT_general, \"ca\", ca_main, ca_options},\n#ifndef OPENSSL_NO_SOCK\n    {FT_general, \"ciphers\", ciphers_main, ciphers_options},\n#endif\n#ifndef OPENSSL_NO_CMS\n    {FT_general, \"cms\", cms_main, cms_options},\n#endif\n    {FT_general, \"crl\", crl_main, crl_options},\n    {FT_general, \"crl2pkcs7\", crl2pkcs7_main, crl2pkcs7_options},\n    {FT_general, \"dgst\", dgst_main, dgst_options},\n#ifndef OPENSSL_NO_DH\n    {FT_general, \"dhparam\", dhparam_main, dhparam_options},\n#endif\n#ifndef OPENSSL_NO_DSA\n    {FT_general, \"dsa\", dsa_main, dsa_options},\n#endif\n#ifndef OPENSSL_NO_DSA\n    {FT_general, \"dsaparam\", dsaparam_main, dsaparam_options},\n#endif\n#ifndef OPENSSL_NO_EC\n    {FT_general, \"ec\", ec_main, ec_options},\n#endif\n#ifndef OPENSSL_NO_EC\n    {FT_general, \"ecparam\", ecparam_main, ecparam_options},\n#endif\n    {FT_general, \"enc\", enc_main, enc_options},\n#ifndef OPENSSL_NO_ENGINE\n    {FT_general, \"engine\", engine_main, engine_options},\n#endif\n    {FT_general, \"errstr\", errstr_main, errstr_options},\n#ifndef OPENSSL_NO_DSA\n    {FT_general, \"gendsa\", gendsa_main, gendsa_options},\n#endif\n    {FT_general, \"genpkey\", genpkey_main, genpkey_options},\n#ifndef OPENSSL_NO_RSA\n    {FT_general, \"genrsa\", genrsa_main, genrsa_options},\n#endif\n    {FT_general, \"help\", help_main, help_options},\n    {FT_general, \"list\", list_main, list_options},\n    {FT_general, \"nseq\", nseq_main, nseq_options},\n#ifndef OPENSSL_NO_OCSP\n    {FT_general, \"ocsp\", ocsp_main, ocsp_options},\n#endif\n    {FT_general, \"passwd\", passwd_main, passwd_options},\n#ifndef OPENSSL_NO_DES\n    {FT_general, \"pkcs12\", pkcs12_main, pkcs12_options},\n#endif\n    {FT_general, \"pkcs7\", pkcs7_main, pkcs7_options},\n    {FT_general, \"pkcs8\", pkcs8_main, pkcs8_options},\n    {FT_general, \"pkey\", pkey_main, pkey_options},\n    {FT_general, \"pkeyparam\", pkeyparam_main, pkeyparam_options},\n    {FT_general, \"pkeyutl\", pkeyutl_main, pkeyutl_options},\n    {FT_general, \"prime\", prime_main, prime_options},\n    {FT_general, \"rand\", rand_main, rand_options},\n    {FT_general, \"rehash\", rehash_main, rehash_options},\n    {FT_general, \"req\", req_main, req_options},\n    {FT_general, \"rsa\", rsa_main, rsa_options},\n#ifndef OPENSSL_NO_RSA\n    {FT_general, \"rsautl\", rsautl_main, rsautl_options},\n#endif\n#ifndef OPENSSL_NO_SOCK\n    {FT_general, \"s_client\", s_client_main, s_client_options},\n#endif\n#ifndef OPENSSL_NO_SOCK\n    {FT_general, \"s_server\", s_server_main, s_server_options},\n#endif\n#ifndef OPENSSL_NO_SOCK\n    {FT_general, \"s_time\", s_time_main, s_time_options},\n#endif\n    {FT_general, \"sess_id\", sess_id_main, sess_id_options},\n    {FT_general, \"smime\", smime_main, smime_options},\n    {FT_general, \"speed\", speed_main, speed_options},\n    {FT_general, \"spkac\", spkac_main, spkac_options},\n#ifndef OPENSSL_NO_SRP\n    {FT_general, \"srp\", srp_main, srp_options},\n#endif\n    {FT_general, \"storeutl\", storeutl_main, storeutl_options},\n#ifndef OPENSSL_NO_TS\n    {FT_general, \"ts\", ts_main, ts_options},\n#endif\n    {FT_general, \"verify\", verify_main, verify_options},\n    {FT_general, \"version\", version_main, version_options},\n    {FT_general, \"x509\", x509_main, x509_options},\n#ifndef OPENSSL_NO_MD2\n    {FT_md, \"md2\", dgst_main},\n#endif\n#ifndef OPENSSL_NO_MD4\n    {FT_md, \"md4\", dgst_main},\n#endif\n    {FT_md, \"md5\", dgst_main},\n#ifndef OPENSSL_NO_GOST\n    {FT_md, \"gost\", dgst_main},\n#endif\n    {FT_md, \"sha1\", dgst_main},\n    {FT_md, \"sha224\", dgst_main},\n    {FT_md, \"sha256\", dgst_main},\n    {FT_md, \"sha384\", dgst_main},\n    {FT_md, \"sha512\", dgst_main},\n    {FT_md, \"sha512-224\", dgst_main},\n    {FT_md, \"sha512-256\", dgst_main},\n    {FT_md, \"sha3-224\", dgst_main},\n    {FT_md, \"sha3-256\", dgst_main},\n    {FT_md, \"sha3-384\", dgst_main},\n    {FT_md, \"sha3-512\", dgst_main},\n    {FT_md, \"shake128\", dgst_main},\n    {FT_md, \"shake256\", dgst_main},\n#ifndef OPENSSL_NO_MDC2\n    {FT_md, \"mdc2\", dgst_main},\n#endif\n#ifndef OPENSSL_NO_RMD160\n    {FT_md, \"rmd160\", dgst_main},\n#endif\n#ifndef OPENSSL_NO_BLAKE2\n    {FT_md, \"blake2b512\", dgst_main},\n#endif\n#ifndef OPENSSL_NO_BLAKE2\n    {FT_md, \"blake2s256\", dgst_main},\n#endif\n#ifndef OPENSSL_NO_SM3\n    {FT_md, \"sm3\", dgst_main},\n#endif\n    {FT_cipher, \"aes-128-cbc\", enc_main, enc_options},\n    {FT_cipher, \"aes-128-ecb\", enc_main, enc_options},\n    {FT_cipher, \"aes-192-cbc\", enc_main, enc_options},\n    {FT_cipher, \"aes-192-ecb\", enc_main, enc_options},\n    {FT_cipher, \"aes-256-cbc\", enc_main, enc_options},\n    {FT_cipher, \"aes-256-ecb\", enc_main, enc_options},\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-128-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-128-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-128-ctr\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-128-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-128-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-128-cfb1\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-128-cfb8\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-192-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-192-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-192-ctr\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-192-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-192-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-192-cfb1\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-192-cfb8\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-256-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-256-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-256-ctr\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-256-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-256-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-256-cfb1\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_ARIA\n    {FT_cipher, \"aria-256-cfb8\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAMELLIA\n    {FT_cipher, \"camellia-128-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAMELLIA\n    {FT_cipher, \"camellia-128-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAMELLIA\n    {FT_cipher, \"camellia-192-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAMELLIA\n    {FT_cipher, \"camellia-192-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAMELLIA\n    {FT_cipher, \"camellia-256-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAMELLIA\n    {FT_cipher, \"camellia-256-ecb\", enc_main, enc_options},\n#endif\n    {FT_cipher, \"base64\", enc_main, enc_options},\n#ifdef ZLIB\n    {FT_cipher, \"zlib\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des3\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"desx\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_IDEA\n    {FT_cipher, \"idea\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SEED\n    {FT_cipher, \"seed\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC4\n    {FT_cipher, \"rc4\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC4\n    {FT_cipher, \"rc4-40\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC2\n    {FT_cipher, \"rc2\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_BF\n    {FT_cipher, \"bf\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAST\n    {FT_cipher, \"cast\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC5\n    {FT_cipher, \"rc5\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ede\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ede3\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ede-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ede3-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ede-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ede3-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ede-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_DES\n    {FT_cipher, \"des-ede3-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_IDEA\n    {FT_cipher, \"idea-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_IDEA\n    {FT_cipher, \"idea-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_IDEA\n    {FT_cipher, \"idea-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_IDEA\n    {FT_cipher, \"idea-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SEED\n    {FT_cipher, \"seed-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SEED\n    {FT_cipher, \"seed-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SEED\n    {FT_cipher, \"seed-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SEED\n    {FT_cipher, \"seed-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC2\n    {FT_cipher, \"rc2-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC2\n    {FT_cipher, \"rc2-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC2\n    {FT_cipher, \"rc2-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC2\n    {FT_cipher, \"rc2-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC2\n    {FT_cipher, \"rc2-64-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC2\n    {FT_cipher, \"rc2-40-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_BF\n    {FT_cipher, \"bf-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_BF\n    {FT_cipher, \"bf-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_BF\n    {FT_cipher, \"bf-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_BF\n    {FT_cipher, \"bf-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAST\n    {FT_cipher, \"cast5-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAST\n    {FT_cipher, \"cast5-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAST\n    {FT_cipher, \"cast5-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAST\n    {FT_cipher, \"cast5-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_CAST\n    {FT_cipher, \"cast-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC5\n    {FT_cipher, \"rc5-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC5\n    {FT_cipher, \"rc5-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC5\n    {FT_cipher, \"rc5-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_RC5\n    {FT_cipher, \"rc5-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SM4\n    {FT_cipher, \"sm4-cbc\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SM4\n    {FT_cipher, \"sm4-ecb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SM4\n    {FT_cipher, \"sm4-cfb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SM4\n    {FT_cipher, \"sm4-ofb\", enc_main, enc_options},\n#endif\n#ifndef OPENSSL_NO_SM4\n    {FT_cipher, \"sm4-ctr\", enc_main, enc_options},\n#endif\n    {0, NULL, NULL}\n};\n#endif\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/cmake/toolchain-mingw64.cmake"  "\n# This is a CMake toolchain file so we can run Mingw64 to build a Windows64 binaries.\n# http://vtk.org/Wiki/CMake_Cross_Compiling\n\n# usage\n# cmake -DCMAKE_TOOLCHAIN_FILE=./toolchain-mingw64.cmake ../\n\n\nset( CMAKE_SYSTEM_NAME Windows )\nset( CMAKE_SYSTEM_PROCESSOR x86_64 )\n\n#-----<configuration>-----------------------------------------------\n\n# configure only the lines within this <configure> block, typically\n\nset( TC_PATH /usr/bin )\nset( CROSS_COMPILE x86_64-w64-mingw32- )\n\n# specify the cross compiler\nset( CMAKE_C_COMPILER   \${TC_PATH}/\${CROSS_COMPILE}gcc )\nset( CMAKE_CXX_COMPILER \${TC_PATH}/\${CROSS_COMPILE}g++ )\nset( CMAKE_RC_COMPILER  \${TC_PATH}/\${CROSS_COMPILE}windres )\n\n# where is the target environment\nset( CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32 )\n\n#-----</configuration>-----------------------------------------------\n\n# search for programs in the build host directories\nset( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )\n\n# for libraries and headers in the target directories\nset( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )\nset( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )\n\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/cmake/toolchain-mingw32.cmake"  "\n# This is a CMake toolchain file so we can using Mingw to build Windows32 binaries.\n# http://vtk.org/Wiki/CMake_Cross_Compiling\n\n# usage\n# cmake -DCMAKE_TOOLCHAIN_FILE=./toolchain-mingw32.cmake ../\n\nset( CMAKE_SYSTEM_NAME Windows )\nset( CMAKE_SYSTEM_PROCESSOR i686 )\n\n#-----<configuration>-----------------------------------------------\n\n# configure only the lines within this <configure> block, typically\n\nset( TC_PATH /usr/bin )\nset( CROSS_COMPILE i686-w64-mingw32- )\n\n# specify the cross compiler\nset( CMAKE_C_COMPILER   \${TC_PATH}/\${CROSS_COMPILE}gcc )\nset( CMAKE_CXX_COMPILER \${TC_PATH}/\${CROSS_COMPILE}g++ )\nset( CMAKE_RC_COMPILER  \${TC_PATH}/\${CROSS_COMPILE}windres )\n\n# where is the target environment\nset( CMAKE_FIND_ROOT_PATH /usr/i686-w64-mingw32 )\n\n#-----</configuration>-----------------------------------------------\n\n# search for programs in the build host directories\nset( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )\n\n# for libraries and headers in the target directories\nset( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )\nset( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )\n\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/cmake/MSVCRuntime.cmake"  "macro(configure_msvc_runtime)\n\tif(MSVC)\n\t\t# Set compiler options.\n\t\tset(variables\n\t\t\tCMAKE_C_FLAGS\n\t\t\tCMAKE_C_FLAGS_DEBUG\n\t\t\tCMAKE_C_FLAGS_MINSIZEREL\n\t\t\tCMAKE_C_FLAGS_RELEASE\n\t\t\tCMAKE_C_FLAGS_RELWITHDEBINFO\n\t\t\tCMAKE_CXX_FLAGS\n\t\t\tCMAKE_CXX_FLAGS_DEBUG\n\t\t\tCMAKE_CXX_FLAGS_MINSIZEREL\n\t\t\tCMAKE_CXX_FLAGS_RELEASE\n\t\t\tCMAKE_CXX_FLAGS_RELWITHDEBINFO)\n\n\t\tif(BUILD_SHARED_LIBS)\n\t\t\tset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n\t\telse()\n\t\t\tif(NOT MSVC_DYNAMIC_RUNTIME)\n\t\t\t\tmessage(STATUS \"MSVC: using statically-linked runtime (/MT and /MTd).\")\n\t\t\t\tforeach(variable \${variables})\n\t\t\t\t\tif(\${variable} MATCHES \"/MD\")\n\t\t\t\t\t\tstring(REGEX REPLACE \"/MD\" \"/MT\" \${variable} \"\${\${variable}}\")\n\t\t\t\t\tendif()\n\t\t\t\tendforeach()\n\t\t\tendif()\n\t\tendif()\n\n\t\tforeach(variable \${variables})\n\t\t\tif(\${variable} MATCHES \"/Ob0\")\n\t\t\t\tstring(REGEX REPLACE \"/Ob0\" \"/Ob2\" \${variable} \"\${\${variable}}\")\n\t\t\tendif()\n\t\tendforeach()\n\n\t\tforeach(variable \${variables})\n\t\t\tif(\${variable} MATCHES \"/W3\")\n\t\t\t\tstring(REGEX REPLACE \"/W3\" \"/W2\" \${variable} \"\${\${variable}}\")\n\t\t\tendif()\n\t\tendforeach()\n\n\t\tforeach(variable \${variables})\n\t\t\tset(\${variable} \"\${\${variable}}\" CACHE STRING \"MSVC_\${variable}\" FORCE)\n\t\tendforeach()\n\tendif()\nendmacro(configure_msvc_runtime)\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/CMakeLists.txt"  "# Based on original work by David Manura Copyright (C) 2007-2012 LuaDist. Copyright (C) 2013 Brian Sidebotham Copyright (C) 2016-2019 Jean-Luc Barriere\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nset(CMAKE_LEGACY_CYGWIN_WIN32 0)\nproject(openssl)\ncmake_minimum_required(VERSION 3.1.0)\n\nset(CMAKE_DISABLE_SOURCE_CHANGES ON)\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\n\nset(CMAKE_MODULE_PATH \"\${PROJECT_SOURCE_DIR}/cmake\")\n\noption(WITH_APPS \"Build applications\" ON)\n\n# OpenSSL version detection imported from FindOpenSSL.cmake\n\nfile(STRINGS \"\${PROJECT_SOURCE_DIR}/include/openssl/opensslv.h\" openssl_version_str REGEX \"^#[\\t ]*define[\\t ]+OPENSSL_VERSION_NUMBER[\\t ]+0x([0-9a-fA-F])+.*\")\n\nfunction(from_hex HEX DEC)\n  string(TOUPPER \"\${HEX}\" HEX)\n  set(_res 0)\n  string(LENGTH \"\${HEX}\" _strlen)\n\n  while(_strlen GREATER 0)\n    math(EXPR _res \"\${_res} * 16\")\n    string(SUBSTRING \"\${HEX}\" 0 1 NIBBLE)\n    string(SUBSTRING \"\${HEX}\" 1 -1 HEX)\n    if(NIBBLE STREQUAL \"A\")\n      math(EXPR _res \"\${_res} + 10\")\n    elseif(NIBBLE STREQUAL \"B\")\n      math(EXPR _res \"\${_res} + 11\")\n    elseif(NIBBLE STREQUAL \"C\")\n      math(EXPR _res \"\${_res} + 12\")\n    elseif(NIBBLE STREQUAL \"D\")\n      math(EXPR _res \"\${_res} + 13\")\n    elseif(NIBBLE STREQUAL \"E\")\n      math(EXPR _res \"\${_res} + 14\")\n    elseif(NIBBLE STREQUAL \"F\")\n      math(EXPR _res \"\${_res} + 15\")\n    else()\n      math(EXPR _res \"\${_res} + \${NIBBLE}\")\n    endif()\n\n    string(LENGTH \"\${HEX}\" _strlen)\n  endwhile()\n\n  set(\${DEC} \${_res} PARENT_SCOPE)\nendfunction()\n\nstring(REGEX REPLACE \"^.*OPENSSL_VERSION_NUMBER[\\t ]+0x([0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F]).*\$\" \"\\\\1;\\\\2;\\\\3;\\\\4;\\\\5\" OPENSSL_VERSION_LIST \"\${openssl_version_str}\")\nlist(GET OPENSSL_VERSION_LIST 0 OPENSSL_VERSION_MAJOR)\nlist(GET OPENSSL_VERSION_LIST 1 OPENSSL_VERSION_MINOR)\nfrom_hex(\"\${OPENSSL_VERSION_MINOR}\" OPENSSL_VERSION_MINOR)\nlist(GET OPENSSL_VERSION_LIST 2 OPENSSL_VERSION_FIX)\nfrom_hex(\"\${OPENSSL_VERSION_FIX}\" OPENSSL_VERSION_FIX)\nlist(GET OPENSSL_VERSION_LIST 3 OPENSSL_VERSION_PATCH)\n\nif(NOT OPENSSL_VERSION_PATCH STREQUAL \"00\")\n  from_hex(\"\${OPENSSL_VERSION_PATCH}\" _tmp)\n  # 96 is the ASCII code of 'a' minus 1\n  math(EXPR OPENSSL_VERSION_PATCH_ASCII \"\${_tmp} + 96\")\n  unset(_tmp)\n  string(ASCII \"\${OPENSSL_VERSION_PATCH_ASCII}\" OPENSSL_VERSION_PATCH_STRING)\nendif()\n\nset(OPENSSL_VERSION \"\${OPENSSL_VERSION_MAJOR}.\${OPENSSL_VERSION_MINOR}.\${OPENSSL_VERSION_FIX}\${OPENSSL_VERSION_PATCH_STRING}\")\n\nmessage(STATUS \"OpenSSL version \${OPENSSL_VERSION}\")\n\nset(VERSION_MAJOR \${OPENSSL_VERSION_MAJOR})\nset(VERSION_MINOR \${OPENSSL_VERSION_MINOR})\nset(VERSION_PATCH \${OPENSSL_VERSION_FIX})\n\nset(VERSION_STRING \${OPENSSL_VERSION})\nset(LIB_VERSION \${VERSION_MAJOR}.\${VERSION_MINOR})\nset(LIB_SOVERSION \${VERSION_MAJOR}.\${VERSION_MINOR})\n\nadd_definitions(-DOPENSSL_NO_ASM)\nadd_definitions(-DOPENSSL_NO_STATIC_ENGINE)\n\nif(MSVC)\n  include(MSVCRuntime)\n  configure_msvc_runtime()\n  set(OPENSSLDIR \"C:/ssl\")\n  set(ENGINESDIR \"C:/engines-1.1\")\nelse()\n  set(OPENSSLDIR \"/opt/diet/ssl\")\n  set(ENGINESDIR \"/opt/diet/engines-1.1\")\nendif()\nadd_definitions(\"-DOPENSSLDIR=\\\"\${OPENSSLDIR}\\\"\")\nadd_definitions(\"-DENGINESDIR=\\\"\${ENGINESDIR}\\\"\")\n\nif(APPLE)\n  set(CMAKE_MACOSX_RPATH ON)\n  add_definitions(-DOPENSSL_SYSNAME_MACOSX)\nendif()\n\nif(WIN32)\n  set(CMAKE_SHARED_LIBRARY_PREFIX \"lib\")\n  set(CMAKE_STATIC_LIBRARY_PREFIX \"lib\")\nendif()\n\nif(WIN32 AND NOT CYGWIN)\n  add_definitions(-DOPENSSL_SYSNAME_WIN32)\n  add_definitions(-DWIN32_LEAN_AND_MEAN)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n\n  if(BUILD_SHARED_LIBS)\n    # avoid conflict: ocsp.h and wincrypt.h\n    add_definitions(-D_WINDLL)\n  endif()\nendif()\n\nif(MINGW)\n  set(CMAKE_SHARED_LINKER_FLAGS \"-Wl,--export-all\")\nendif()\n\ninclude(CheckTypeSize)\ncheck_type_size(\"long\" LONG_INT)\ncheck_type_size(\"long long\" LONG_LONG_INT)\ncheck_type_size(\"int\" INT)\nif(HAVE_LONG_INT AND \"\${LONG_INT}\" EQUAL 8)\n  set(SIXTY_FOUR_BIT_LONG ON)\nelseif(HAVE_LONG_LONG_INT AND \"\${LONG_LONG_INT}\" EQUAL 8)\n  set(SIXTY_FOUR_BIT ON)\nelse()\n  set(THIRTY_TWO_BIT ON)\nendif()\n\nif(MSVC OR (WIN32 AND MINGW AND NOT CYGWIN))\n  set(OPENSSL_EXPORT_VAR_AS_FUNCTION 1)\nendif()\n\n# Begin configure public headers\nfile(COPY \${PROJECT_SOURCE_DIR}/include/internal DESTINATION include)\nfile(COPY \${PROJECT_SOURCE_DIR}/include/crypto DESTINATION include)\nfile(COPY \${PROJECT_SOURCE_DIR}/include/openssl DESTINATION include)\n\nfile(READ \${PROJECT_SOURCE_DIR}/opensslconf.h.cmake CONF)\nset(CONF\n    \"\n#define OPENSSL_NO_MD2\n#define OPENSSL_NO_RC5\n#define OPENSSL_NO_RFC3779\n#define OPENSSL_NO_EC_NISTP_64_GCC_128\n\${CONF}\")\nfile(WRITE \${CMAKE_CURRENT_BINARY_DIR}/opensslconf.h.cmake \"\${CONF}\")\n\nconfigure_file(\${CMAKE_CURRENT_BINARY_DIR}/opensslconf.h.cmake \${CMAKE_CURRENT_BINARY_DIR}/include/openssl/opensslconf.h)\n# End configure public headers\n\nadd_subdirectory(crypto)\nadd_subdirectory(ssl)\n\nif(WITH_APPS AND NOT ANDROID AND NOT IOS)\n  add_subdirectory(apps)\nendif()\n\nfile(READ \${PROJECT_SOURCE_DIR}/c_rehash.cmake C_REHASH)\nstring(REPLACE \"@OPENSSLDIR@\" \"\${OPENSSLDIR}\" C_REHASH \"\${C_REHASH}\")\nstring(REPLACE \"@CMAKE_INSTALL_PREFIX@\" \"\${CMAKE_INSTALL_PREFIX}\" C_REHASH \"\${C_REHASH}\")\nfile(WRITE \${CMAKE_CURRENT_BINARY_DIR}/c_rehash \"\${C_REHASH}\")\n\nfile(GLOB PUBLIC_HEADERS \"\${CMAKE_CURRENT_BINARY_DIR}/include/openssl/*.h\")\n\nif(NOT OPENSSL_NO_INSTALL)\n  install(FILES \${PUBLIC_HEADERS} DESTINATION include/openssl)\n  install(FILES \${CMAKE_CURRENT_BINARY_DIR}/c_rehash FAQ LICENSE README README.ENGINE DESTINATION share/openssl)\n  install(DIRECTORY doc DESTINATION share)\nendif(NOT OPENSSL_NO_INSTALL)\n\n# Generate the package target\nset(CPACK_GENERATOR ZIP TGZ)\nset(CPACK_PACKAGE_NAME \"\${CMAKE_PROJECT_NAME}\")\nset(CPACK_PACKAGE_VERSION_MAJOR \${VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR \${VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH \${VERSION_PATCH})\nset(CPACK_PACKAGE_FILE_NAME \"\${CMAKE_PROJECT_NAME}-\${VERSION_STRING}\")\n\ninclude(CPack)\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/c_rehash.cmake"  "# Copyright 1999-2016 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the OpenSSL license (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\n# Perl c_rehash script, scan all files in a directory\n# and add symbolic links to their hash values.\n\nmy \$dir = \"@OPENSSLDIR@\";\nmy \$prefix = \"@CMAKE_INSTALL_PREFIX@\";\n\nmy \$errorcount = 0;\nmy \$openssl = \$ENV{OPENSSL} || \"openssl\";\nmy \$pwd;\nmy \$x509hash = \"-subject_hash\";\nmy \$crlhash = \"-hash\";\nmy \$verbose = 0;\nmy \$symlink_exists=eval {symlink(\"\",\"\"); 1};\nmy \$removelinks = 1;\n\n##  Parse flags.\nwhile ( \$ARGV[0] =~ /^-/ ) {\n    my \$flag = shift @ARGV;\n    last if ( \$flag eq '--');\n    if ( \$flag eq '-old') {\n\t    \$x509hash = \"-subject_hash_old\";\n\t    \$crlhash = \"-hash_old\";\n    } elsif ( \$flag eq '-h' || \$flag eq '-help' ) {\n\t    help();\n    } elsif ( \$flag eq '-n' ) {\n\t    \$removelinks = 0;\n    } elsif ( \$flag eq '-v' ) {\n\t    \$verbose++;\n    }\n    else {\n\t    print STDERR \"Usage error; try -h.\\n\";\n\t    exit 1;\n    }\n}\n\nsub help {\n\tprint \"Usage: c_rehash [-old] [-h] [-help] [-v] [dirs...]\\n\";\n\tprint \"   -old use old-style digest\\n\";\n\tprint \"   -h or -help print this help text\\n\";\n\tprint \"   -v print files removed and linked\\n\";\n\texit 0;\n}\n\neval \"require Cwd\";\nif (defined(&Cwd::getcwd)) {\n\t\$pwd=Cwd::getcwd();\n} else {\n\t\$pwd=`pwd`;\n\tchomp(\$pwd);\n}\n\n# DOS/Win32 or Unix delimiter?  Prefix our installdir, then search.\nmy \$path_delim = (\$pwd =~ /^[a-z]\\:/i) ? ';' : ':';\n\$ENV{PATH} = \"\$prefix/bin\" . (\$ENV{PATH} ? \$path_delim . \$ENV{PATH} : \"\");\n\nif (! -x \$openssl) {\n\tmy \$found = 0;\n\tforeach (split /\$path_delim/, \$ENV{PATH}) {\n\t\tif (-x \"\$_/\$openssl\") {\n\t\t\t\$found = 1;\n\t\t\t\$openssl = \"\$_/\$openssl\";\n\t\t\tlast;\n\t\t}\t\n\t}\n\tif (\$found == 0) {\n\t\tprint STDERR \"c_rehash: rehashing skipped ('openssl' program not available)\\n\";\n\t\texit 0;\n\t}\n}\n\nif (@ARGV) {\n\t@dirlist = @ARGV;\n} elsif (\$ENV{SSL_CERT_DIR}) {\n\t@dirlist = split /\$path_delim/, \$ENV{SSL_CERT_DIR};\n} else {\n\t\$dirlist[0] = \"\$dir/certs\";\n}\n\nif (-d \$dirlist[0]) {\n\tchdir \$dirlist[0];\n\t\$openssl=\"\$pwd/\$openssl\" if (!-x \$openssl);\n\tchdir \$pwd;\n}\n\nforeach (@dirlist) {\n\tif (-d \$_ ) {\n            if ( -w \$_) {\n\t\thash_dir(\$_);\n            } else {\n                print \"Skipping \$_, can't write\\n\";\n                \$errorcount++;\n            }\n\t}\n}\nexit(\$errorcount);\n\nsub hash_dir {\n\tmy %hashlist;\n\tprint \"Doing \$_[0]\\n\";\n\tchdir \$_[0];\n\topendir(DIR, \".\");\n\tmy @flist = sort readdir(DIR);\n\tclosedir DIR;\n\tif ( \$removelinks ) {\n\t\t# Delete any existing symbolic links\n\t\tforeach (grep {/^[\\da-f]+\\.r{0,1}\\d+\$/} @flist) {\n\t\t\tif (-l \$_) {\n\t\t\t\tprint \"unlink \$_\" if \$verbose;\n\t\t\t\tunlink \$_ || warn \"Can't unlink \$_, \$!\\n\";\n\t\t\t}\n\t\t}\n\t}\n\tFILE: foreach \$fname (grep {/\\.(pem)|(crt)|(cer)|(crl)\$/} @flist) {\n\t\t# Check to see if certificates and/or CRLs present.\n\t\tmy (\$cert, \$crl) = check_file(\$fname);\n\t\tif (!\$cert && !\$crl) {\n\t\t\tprint STDERR \"WARNING: \$fname does not contain a certificate or CRL: skipping\\n\";\n\t\t\tnext;\n\t\t}\n\t\tlink_hash_cert(\$fname) if (\$cert);\n\t\tlink_hash_crl(\$fname) if (\$crl);\n\t}\n}\n\nsub check_file {\n\tmy (\$is_cert, \$is_crl) = (0,0);\n\tmy \$fname = \$_[0];\n\topen IN, \$fname;\n\twhile(<IN>) {\n\t\tif (/^-----BEGIN (.*)-----/) {\n\t\t\tmy \$hdr = \$1;\n\t\t\tif (\$hdr =~ /^(X509 |TRUSTED |)CERTIFICATE\$/) {\n\t\t\t\t\$is_cert = 1;\n\t\t\t\tlast if (\$is_crl);\n\t\t\t} elsif (\$hdr eq \"X509 CRL\") {\n\t\t\t\t\$is_crl = 1;\n\t\t\t\tlast if (\$is_cert);\n\t\t\t}\n\t\t}\n\t}\n\tclose IN;\n\treturn (\$is_cert, \$is_crl);\n}\n\n\n# Link a certificate to its subject name hash value, each hash is of\n# the form <hash>.<n> where n is an integer. If the hash value already exists\n# then we need to up the value of n, unless its a duplicate in which\n# case we skip the link. We check for duplicates by comparing the\n# certificate fingerprints\n\nsub link_hash_cert {\n\t\tmy \$fname = \$_[0];\n\t\t\$fname =~ s/'/'\\\\''/g;\n\t\tmy (\$hash, \$fprint) = `\"\$openssl\" x509 \$x509hash -fingerprint -noout -in \"\$fname\"`;\n\t\tchomp \$hash;\n\t\tchomp \$fprint;\n\t\t\$fprint =~ s/^.*=//;\n\t\t\$fprint =~ tr/://d;\n\t\tmy \$suffix = 0;\n\t\t# Search for an unused hash filename\n\t\twhile(exists \$hashlist{\"\$hash.\$suffix\"}) {\n\t\t\t# Hash matches: if fingerprint matches its a duplicate cert\n\t\t\tif (\$hashlist{\"\$hash.\$suffix\"} eq \$fprint) {\n\t\t\t\tprint STDERR \"WARNING: Skipping duplicate certificate \$fname\\n\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\$suffix++;\n\t\t}\n\t\t\$hash .= \".\$suffix\";\n\t\tif (\$symlink_exists) {\n\t\t\tprint \"link \$fname -> \$hash\\n\" if \$verbose;\n\t\t\tsymlink \$fname, \$hash || warn \"Can't symlink, \$!\";\n\t\t} else {\n\t\t\tprint \"copy \$fname -> \$hash\\n\" if \$verbose;\n                        if (open(\$in, \"<\", \$fname)) {\n                            if (open(\$out,\">\", \$hash)) {\n                                print \$out \$_ while (<\$in>);\n                                close \$out;\n                            } else {\n                                warn \"can't open \$hash for write, \$!\";\n                            }\n                            close \$in;\n                        } else {\n                            warn \"can't open \$fname for read, \$!\";\n                        }\n\t\t}\n\t\t\$hashlist{\$hash} = \$fprint;\n}\n\n# Same as above except for a CRL. CRL links are of the form <hash>.r<n>\n\nsub link_hash_crl {\n\t\tmy \$fname = \$_[0];\n\t\t\$fname =~ s/'/'\\\\''/g;\n\t\tmy (\$hash, \$fprint) = `\"\$openssl\" crl \$crlhash -fingerprint -noout -in '\$fname'`;\n\t\tchomp \$hash;\n\t\tchomp \$fprint;\n\t\t\$fprint =~ s/^.*=//;\n\t\t\$fprint =~ tr/://d;\n\t\tmy \$suffix = 0;\n\t\t# Search for an unused hash filename\n\t\twhile(exists \$hashlist{\"\$hash.r\$suffix\"}) {\n\t\t\t# Hash matches: if fingerprint matches its a duplicate cert\n\t\t\tif (\$hashlist{\"\$hash.r\$suffix\"} eq \$fprint) {\n\t\t\t\tprint STDERR \"WARNING: Skipping duplicate CRL \$fname\\n\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\$suffix++;\n\t\t}\n\t\t\$hash .= \".r\$suffix\";\n\t\tif (\$symlink_exists) {\n\t\t\tprint \"link \$fname -> \$hash\\n\" if \$verbose;\n\t\t\tsymlink \$fname, \$hash || warn \"Can't symlink, \$!\";\n\t\t} else {\n\t\t\tprint \"cp \$fname -> \$hash\\n\" if \$verbose;\n\t\t\tsystem (\"cp\", \$fname, \$hash);\n                        warn \"Can't copy, \$!\" if (\$? >> 8) != 0;\n\t\t}\n\t\t\$hashlist{\$hash} = \$fprint;\n}\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/crypto/buildinf.h.cmake"  "/* auto-generated for crypto/cversion.c */\n#define CFLAGS \"compiler: @CMAKE_C_COMPILER_ID@ @CMAKE_C_FLAGS@\"\n#define PLATFORM \"platform: @CMAKE_SYSTEM_NAME@\"\n#define DATE \"built on: @BUILDINF_DATE@\"\nstatic const char *compiler_flags = CFLAGS;\n\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/crypto/dso_conf.h.cmake"  "/*\n * Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n#ifndef HEADER_DSO_CONF_H\n# define HEADER_DSO_CONF_H\n# define DSO_EXTENSION \"@DSO_EXTENSION@\"\n#cmakedefine DSO_NONE\n#cmakedefine DSO_WIN32\n#ifndef __dietlibc__\n#cmakedefine DSO_DLFCN\n#endif\n#cmakedefine HAVE_DLFCN_H\n#endif\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/crypto/bn_conf.h.cmake"  "/*\n * Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n#ifndef HEADER_BN_CONF_H\n# define HEADER_BN_CONF_H\n\n/*\n * The contents of this file are not used in the UEFI build, as\n * both 32-bit and 64-bit builds are supported from a single run\n * of the Configure script.\n */\n\n/* Should we define BN_DIV2W here? */\n\n/* Only one for the following should be defined */\n#cmakedefine SIXTY_FOUR_BIT_LONG\n#cmakedefine SIXTY_FOUR_BIT\n#cmakedefine THIRTY_TWO_BIT\n\n#endif\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/crypto/CMakeLists.txt"  "# Based on original work by David Manura Copyright (C) 2007-2012 LuaDist. Copyright (C) 2013 Brian Sidebotham\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\ninclude(CMakeParseArguments)\n\nstring(TIMESTAMP BUILDINF_DATE \"%Y-%m-%d %H:%M:%S UTC\" UTC)\nconfigure_file(buildinf.h.cmake buildinf.h)\n\ninclude(CheckIncludeFile)\ncheck_include_file(fcntl.h CHK_DLFCN)\nif(CHK_DLFCN)\n  set(HAVE_DLFCN_H ON)\nendif()\n\nif(APPLE)\n  set(DSO_DLFCN ON)\n  set(DSO_EXTENSION \".dylib\")\nelseif(WIN32 AND NOT CYGWIN)\n  set(DSO_WIN32 ON)\n  set(DSO_EXTENSION \".dll\")\nelseif(CYGWIN)\n  set(DSO_DLFCN ON)\n  set(DSO_EXTENSION \".dll\")\nelse()\n  if(CHK_DLFCN)\n    set(DSO_DLFCN ON)\n  else()\n    set(DSO_NONE ON)\n  endif()\n  set(DSO_EXTENSION \".so\")\nendif()\n\nconfigure_file(\${CMAKE_CURRENT_SOURCE_DIR}/bn_conf.h.cmake \${PROJECT_BINARY_DIR}/include/crypto/bn_conf.h)\nconfigure_file(\${CMAKE_CURRENT_SOURCE_DIR}/dso_conf.h.cmake \${PROJECT_BINARY_DIR}/include/crypto/dso_conf.h)\n\nset(LIBSRC cpt_err.c cryptlib.c ctype.c cversion.c ebcdic.c ex_data.c init.c mem.c mem_clr.c mem_dbg.c mem_sec.c o_dir.c o_fips.c o_fopen.c o_init.c o_str.c o_time.c uid.c getenv.c)\n# file(GLOB LIBSRC *.c *.h)\n\ninclude_directories(\n  BEFORE SYSTEM modes ec/curve448 ec/curve448/arch_32 \${CMAKE_CURRENT_BINARY_DIR}/ # buildinf.h\n  \${PROJECT_SOURCE_DIR}/include # public|libcrypto|internal\n  \${PROJECT_BINARY_DIR}/include # public|libcrypto|internal\n  \${PROJECT_SOURCE_DIR}/ # e_os.h\n)\n\nif(BUILD_SHARED_LIBS)\n  add_definitions(-DOPENSSL_BUILD_SHLIBCRYPTO)\nendif()\n\nmacro(add_submodule dir)\n  set(options)\n  set(oneValueArgs)\n  set(multiValueArgs EXHEADERS)\n  cmake_parse_arguments(add_submodule \"\" \"\" \"\${multiValueArgs}\" \${ARGN})\n\n  # message( STATUS \"{dir} \${dir}\" ) message( STATUS \"{add_submodule_UNPARSED_ARGUMENTS} \${add_submodule_UNPARSED_ARGUMENTS}\" )\n  foreach(name \${add_submodule_UNPARSED_ARGUMENTS})\n    set(LIBSRC \${LIBSRC} \${dir}/\${name})\n  endforeach(name)\n\n  # message( STATUS \"{add_submodule_EXHEADERS} \${add_submodule_EXHEADERS}\" )\n  foreach(name \${add_submodule_EXHEADERS})\n    set(EXHEADERS \${EXHEADERS} \${name})\n  endforeach(name)\n\nendmacro(add_submodule)\n\nadd_submodule(aes aes_cbc.c aes_cfb.c aes_core.c aes_ecb.c aes_ige.c aes_misc.c aes_ofb.c aes_wrap.c)\n\nadd_submodule(aria aria.c)\n\nadd_submodule(asn1 a_bitstr.c a_d2i_fp.c a_digest.c a_dup.c a_gentm.c a_i2d_fp.c a_int.c a_mbstr.c a_object.c a_octet.c a_print.c a_sign.c a_strex.c a_strnid.c a_time.c a_type.c a_utctm.c a_utf8.c a_verify.c ameth_lib.c asn1_err.c asn1_gen.c asn1_item_list.c asn1_lib.c asn1_par.c asn_mime.c asn_moid.c asn_mstbl.c asn_pack.c bio_asn1.c bio_ndef.c d2i_pr.c d2i_pu.c evp_asn1.c f_int.c f_string.c i2d_pr.c i2d_pu.c n_pkey.c nsseq.c p5_pbe.c p5_pbev2.c p5_scrypt.c p8_pkey.c t_bitst.c t_pkey.c t_spki.c tasn_dec.c\n              tasn_enc.c tasn_fre.c tasn_new.c tasn_prn.c tasn_scn.c tasn_typ.c tasn_utl.c x_algor.c x_bignum.c x_info.c x_int64.c x_long.c x_pkey.c x_sig.c x_spki.c x_val.c)\n\nadd_submodule(async async.c async_err.c async_wait.c arch/async_null.c arch/async_posix.c arch/async_win.c)\n\nadd_submodule(bf bf_cfb64.c bf_ecb.c bf_enc.c bf_ofb64.c bf_skey.c)\n\nadd_submodule(bio b_addr.c b_dump.c b_print.c b_sock.c b_sock2.c bf_buff.c # bf_lbuf.c\n              bf_nbio.c bf_null.c bio_cb.c bio_err.c bio_lib.c bio_meth.c bss_acpt.c bss_bio.c bss_conn.c bss_dgram.c bss_fd.c bss_file.c bss_log.c bss_mem.c bss_null.c bss_sock.c)\n\nadd_submodule(blake2 blake2b.c blake2s.c m_blake2b.c m_blake2s.c)\n\nadd_submodule(bn bn_add.c bn_asm.c bn_blind.c bn_const.c bn_ctx.c bn_depr.c bn_dh.c bn_div.c bn_err.c bn_exp.c bn_exp2.c bn_gcd.c bn_gf2m.c bn_intern.c bn_kron.c bn_lib.c bn_mod.c bn_mont.c bn_mpi.c bn_mul.c bn_nist.c bn_prime.c bn_print.c bn_rand.c bn_recp.c bn_shift.c bn_sqr.c bn_sqrt.c bn_srp.c bn_word.c bn_x931p.c rsaz_exp.c)\n\nadd_submodule(buffer buf_err.c buffer.c)\n\nadd_submodule(camellia camellia.c cmll_cbc.c cmll_cfb.c cmll_ctr.c cmll_ecb.c cmll_misc.c cmll_ofb.c)\n\nadd_submodule(cast c_cfb64.c c_ecb.c c_enc.c c_ofb64.c c_skey.c)\n\nadd_submodule(chacha chacha_enc.c)\n\nadd_submodule(cmac cm_ameth.c cm_pmeth.c cmac.c)\n\nadd_submodule(cms cms_asn1.c cms_att.c cms_cd.c cms_dd.c cms_enc.c cms_env.c cms_err.c cms_ess.c cms_io.c cms_kari.c cms_lib.c cms_pwri.c cms_sd.c cms_smime.c)\n\nadd_submodule(comp c_zlib.c comp_err.c comp_lib.c)\n\nadd_submodule(conf conf_api.c conf_def.c conf_err.c conf_lib.c conf_mall.c conf_mod.c conf_sap.c conf_ssl.c)\n\nadd_submodule(ct ct_b64.c ct_err.c ct_log.c ct_oct.c ct_policy.c ct_prn.c ct_sct.c ct_sct_ctx.c ct_vfy.c ct_x509v3.c)\n\nadd_submodule(des cbc_cksm.c cbc_enc.c cfb64ede.c cfb64enc.c cfb_enc.c des_enc.c ecb3_enc.c ecb_enc.c fcrypt.c fcrypt_b.c ofb64ede.c ofb64enc.c ofb_enc.c pcbc_enc.c qud_cksm.c rand_key.c set_key.c str2key.c xcbc_enc.c)\n\nadd_submodule(dh dh_ameth.c dh_asn1.c dh_check.c dh_depr.c dh_err.c dh_gen.c dh_kdf.c dh_key.c dh_lib.c dh_meth.c dh_pmeth.c dh_prn.c dh_rfc5114.c dh_rfc7919.c)\n\nadd_submodule(dsa dsa_ameth.c dsa_asn1.c dsa_depr.c dsa_err.c dsa_gen.c dsa_key.c dsa_lib.c dsa_meth.c dsa_ossl.c dsa_pmeth.c dsa_prn.c dsa_sign.c dsa_vrf.c)\n\nadd_submodule(dso dso_dl.c dso_dlfcn.c dso_err.c dso_lib.c dso_openssl.c dso_vms.c dso_win32.c)\n\nadd_submodule(ec curve25519.c ec2_oct.c ec2_smpl.c ec_ameth.c ec_asn1.c ec_check.c ec_curve.c ec_cvt.c ec_err.c ec_key.c ec_kmeth.c ec_lib.c ec_mult.c ec_oct.c ec_pmeth.c ec_print.c ecdh_kdf.c ecdh_ossl.c ecdsa_ossl.c ecdsa_sign.c ecdsa_vrf.c eck_prn.c ecp_mont.c ecp_nist.c ecp_nistp224.c ecp_nistp256.c ecp_nistp521.c ecp_nistputil.c ecp_oct.c ecp_smpl.c ecx_meth.c curve448/curve448.c curve448/curve448_tables.c curve448/eddsa.c curve448/f_generic.c curve448/scalar.c curve448/arch_32/f_impl.c)\n\nadd_submodule(engine eng_all.c eng_cnf.c eng_ctrl.c eng_dyn.c eng_err.c eng_fat.c eng_init.c eng_lib.c eng_list.c eng_openssl.c eng_pkey.c eng_rdrand.c eng_table.c tb_asnmth.c tb_cipher.c tb_dh.c tb_digest.c tb_dsa.c tb_eckey.c tb_pkmeth.c tb_rand.c tb_rsa.c)\n\nadd_submodule(err err.c err_all.c err_prn.c)\n\nadd_submodule(evp bio_b64.c bio_enc.c bio_md.c bio_ok.c c_allc.c c_alld.c cmeth_lib.c digest.c e_aes.c e_aes_cbc_hmac_sha1.c e_aes_cbc_hmac_sha256.c e_aria.c e_bf.c e_camellia.c e_cast.c e_chacha20_poly1305.c e_des.c e_des3.c e_idea.c e_null.c e_old.c e_rc2.c e_rc4.c e_rc4_hmac_md5.c e_rc5.c e_sm4.c e_seed.c e_xcbc_d.c encode.c evp_cnf.c evp_enc.c evp_err.c evp_key.c evp_lib.c evp_pbe.c evp_pkey.c m_md2.c m_md4.c m_md5.c m_md5_sha1.c m_sha3.c m_mdc2.c m_null.c m_ripemd.c m_sha1.c m_sigver.c m_wp.c names.c\n              p5_crpt.c p5_crpt2.c p_dec.c p_enc.c p_lib.c p_open.c p_seal.c p_sign.c p_verify.c pbe_scrypt.c pmeth_fn.c pmeth_gn.c pmeth_lib.c)\n\nadd_submodule(hmac hm_ameth.c hm_pmeth.c hmac.c)\n\nadd_submodule(idea i_cbc.c i_cfb64.c i_ecb.c i_ofb64.c i_skey.c)\n\nadd_submodule(kdf hkdf.c kdf_err.c scrypt.c tls1_prf.c)\n\nadd_submodule(lhash lh_stats.c lhash.c)\n\nadd_submodule(md4 md4_dgst.c md4_one.c)\n\nadd_submodule(md5 md5_dgst.c md5_one.c)\n\nadd_submodule(mdc2 mdc2_one.c mdc2dgst.c)\n\nadd_submodule(modes cbc128.c ccm128.c cfb128.c ctr128.c cts128.c gcm128.c ocb128.c ofb128.c wrap128.c xts128.c)\n\nadd_submodule(objects o_names.c obj_dat.c obj_err.c obj_lib.c obj_xref.c)\n\nadd_submodule(ocsp ocsp_asn.c ocsp_cl.c ocsp_err.c ocsp_ext.c ocsp_ht.c ocsp_lib.c ocsp_prn.c ocsp_srv.c ocsp_vfy.c v3_ocsp.c)\n\nadd_submodule(pem pem_all.c pem_err.c pem_info.c pem_lib.c pem_oth.c pem_pk8.c pem_pkey.c pem_sign.c pem_x509.c pem_xaux.c pvkfmt.c)\n\nadd_submodule(pkcs12 p12_add.c p12_asn.c p12_attr.c p12_crpt.c p12_crt.c p12_decr.c p12_init.c p12_key.c p12_kiss.c p12_mutl.c p12_npas.c p12_p8d.c p12_p8e.c p12_sbag.c p12_utl.c pk12err.c)\n\nadd_submodule(pkcs7 bio_pk7.c pk7_asn1.c pk7_attr.c pk7_doit.c pk7_lib.c pk7_mime.c pk7_smime.c pkcs7err.c)\n\nadd_submodule(poly1305 poly1305.c poly1305_ameth.c poly1305_pmeth.c)\n\nadd_submodule(rand drbg_ctr.c drbg_lib.c rand_egd.c rand_err.c rand_lib.c rand_unix.c rand_vms.c rand_win.c randfile.c)\n\nadd_submodule(rc2 rc2_cbc.c rc2_ecb.c rc2_skey.c rc2cfb64.c rc2ofb64.c)\n\nadd_submodule(rc4 rc4_enc.c rc4_skey.c)\n\n# add_submodule ( rc5 rc5_ecb.c rc5_enc.c rc5_skey.c rc5cfb64.c rc5ofb64.c )\n\nadd_submodule(ripemd rmd_dgst.c rmd_one.c)\n\nadd_submodule(rsa rsa_ameth.c rsa_asn1.c rsa_chk.c rsa_crpt.c rsa_depr.c rsa_err.c rsa_gen.c rsa_lib.c rsa_meth.c rsa_mp.c rsa_none.c rsa_oaep.c rsa_ossl.c rsa_pk1.c rsa_pmeth.c rsa_prn.c rsa_pss.c rsa_saos.c rsa_sign.c rsa_ssl.c rsa_x931.c rsa_x931g.c)\n\nadd_submodule(seed seed.c seed_cbc.c seed_cfb.c seed_ecb.c seed_ofb.c)\n\nadd_submodule(sha keccak1600.c sha1_one.c sha1dgst.c sha256.c sha512.c)\n\nadd_submodule(siphash siphash.c siphash_ameth.c siphash_pmeth.c)\n\nadd_submodule(sm2 sm2_crypt.c sm2_err.c sm2_pmeth.c sm2_sign.c)\n\nadd_submodule(sm3 m_sm3.c sm3.c)\n\nadd_submodule(sm4 sm4.c)\n\nadd_submodule(srp srp_lib.c srp_vfy.c)\n\nadd_submodule(stack stack.c)\n\nadd_submodule(store loader_file.c store_err.c store_init.c store_lib.c store_register.c store_strings.c)\n\nadd_submodule(ts ts_asn1.c ts_conf.c ts_err.c ts_lib.c ts_req_print.c ts_req_utils.c ts_rsp_print.c ts_rsp_sign.c ts_rsp_utils.c ts_rsp_verify.c ts_verify_ctx.c)\n\nadd_submodule(txt_db txt_db.c)\n\nadd_submodule(ui ui_err.c ui_lib.c ui_null.c ui_openssl.c ui_util.c)\n\nadd_submodule(whrlpool wp_block.c wp_dgst.c)\n\nadd_submodule(x509 by_dir.c by_file.c t_crl.c t_req.c t_x509.c x509_att.c x509_cmp.c x509_d2.c x509_def.c x509_err.c x509_ext.c x509_lu.c x509_meth.c x509_obj.c x509_r2x.c x509_req.c x509_set.c x509_trs.c x509_txt.c x509_v3.c x509_vfy.c x509_vpm.c x509cset.c x509name.c x509rset.c x509spki.c x509type.c x_all.c x_attrib.c x_crl.c x_exten.c x_name.c x_pubkey.c x_req.c x_x509.c x_x509a.c)\n\nadd_submodule(x509v3 pcy_cache.c pcy_data.c pcy_lib.c pcy_map.c pcy_node.c pcy_tree.c v3_addr.c v3_admis.c v3_akey.c v3_akeya.c v3_alt.c v3_asid.c v3_bcons.c v3_bitst.c v3_conf.c v3_cpols.c v3_crld.c v3_enum.c v3_extku.c v3_genn.c v3_ia5.c v3_info.c v3_int.c v3_lib.c v3_ncons.c v3_pci.c v3_pcia.c v3_pcons.c v3_pku.c v3_pmaps.c v3_prn.c v3_purp.c v3_skey.c v3_sxnet.c v3_tlsf.c v3_utl.c v3err.c)\n\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nfind_package(Threads)\nif(NOT Threads_FOUND)\n  add_submodule(. threads_none.c)\nelseif(WIN32)\n  add_submodule(. threads_win.c)\nelse()\n  add_submodule(. threads_pthread.c)\nendif()\n\nadd_library(libcrypto \${LIBSRC} \${OBJECTS_SRC})\n\ntarget_include_directories(libcrypto PUBLIC \${PROJECT_BINARY_DIR}/include)\n\nif(WIN32 AND NOT CYGWIN)\n  target_link_libraries(libcrypto ws2_32 crypt32)\nelse()\n  if(Threads_FOUND)\n    target_link_libraries(libcrypto \${CMAKE_THREAD_LIBS_INIT})\n  endif()\n  if(DSO_DLFCN AND HAVE_DLFCN_H)\n    target_link_libraries(libcrypto dl)\n  endif()\nendif()\n\nset_target_properties(libcrypto PROPERTIES VERSION \"\${LIB_VERSION}\" SOVERSION \"\${LIB_SOVERSION}\" OUTPUT_NAME crypto)\n\nif(ANDROID)\n  set_target_properties(libcrypto PROPERTIES OUTPUT_NAME \"crypto_1_1\")\nendif()\n\nif(MSVC)\n  if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n    set_target_properties(libcrypto PROPERTIES OUTPUT_NAME \"libcrypto-1_1-x64\")\n  elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)\n    set_target_properties(libcrypto PROPERTIES OUTPUT_NAME \"libcrypto-1_1\")\n  endif()\nendif()\nif(NOT LIBDIR)\n  set(LIBDIR lib)\nendif()\n\nif(NOT OPENSSL_NO_INSTALL)\n  install(TARGETS libcrypto RUNTIME DESTINATION bin LIBRARY DESTINATION \${LIBDIR} ARCHIVE DESTINATION \${LIBDIR})\nendif(NOT OPENSSL_NO_INSTALL)\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/crypto_orig/buildinf.h.cmake"  "/* auto-generated for crypto/cversion.c */\n#define CFLAGS \"compiler: @CMAKE_C_COMPILER_ID@ @CMAKE_C_FLAGS@\"\n#define PLATFORM \"platform: @CMAKE_SYSTEM_NAME@\"\n#define DATE \"built on: @BUILDINF_DATE@\"\nstatic const char *compiler_flags = CFLAGS;\n\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/crypto_orig/dso_conf.h.cmake"  "/*\n * Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n#ifndef HEADER_DSO_CONF_H\n# define HEADER_DSO_CONF_H\n# define DSO_EXTENSION \"@DSO_EXTENSION@\"\n#cmakedefine DSO_NONE\n#cmakedefine DSO_WIN32\n#ifndef __dietlibc__\n#cmakedefine DSO_DLFCN\n#endif\n#cmakedefine HAVE_DLFCN_H\n#endif\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/crypto_orig/bn_conf.h.cmake"  "/*\n * Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n#ifndef HEADER_BN_CONF_H\n# define HEADER_BN_CONF_H\n\n/*\n * The contents of this file are not used in the UEFI build, as\n * both 32-bit and 64-bit builds are supported from a single run\n * of the Configure script.\n */\n\n/* Should we define BN_DIV2W here? */\n\n/* Only one for the following should be defined */\n#cmakedefine SIXTY_FOUR_BIT_LONG\n#cmakedefine SIXTY_FOUR_BIT\n#cmakedefine THIRTY_TWO_BIT\n\n#endif\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/crypto_orig/CMakeLists.txt"  "# Based on original work by David Manura Copyright (C) 2007-2012 LuaDist. Copyright (C) 2013 Brian Sidebotham\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\ninclude(CMakeParseArguments)\n\nstring(TIMESTAMP BUILDINF_DATE \"%Y-%m-%d %H:%M:%S UTC\" UTC)\nconfigure_file(buildinf.h.cmake buildinf.h)\n\ninclude(CheckIncludeFile)\ncheck_include_file(fcntl.h CHK_DLFCN)\nif(CHK_DLFCN)\n  set(HAVE_DLFCN_H ON)\nendif()\n\nif(APPLE)\n  set(DSO_DLFCN ON)\n  set(DSO_EXTENSION \".dylib\")\nelseif(WIN32 AND NOT CYGWIN)\n  set(DSO_WIN32 ON)\n  set(DSO_EXTENSION \".dll\")\nelseif(CYGWIN)\n  set(DSO_DLFCN ON)\n  set(DSO_EXTENSION \".dll\")\nelse()\n  if(CHK_DLFCN)\n    set(DSO_DLFCN ON)\n  else()\n    set(DSO_NONE ON)\n  endif()\n  set(DSO_EXTENSION \".so\")\nendif()\n\nconfigure_file(\${CMAKE_CURRENT_SOURCE_DIR}/bn_conf.h.cmake \${PROJECT_BINARY_DIR}/include/crypto/bn_conf.h)\nconfigure_file(\${CMAKE_CURRENT_SOURCE_DIR}/dso_conf.h.cmake \${PROJECT_BINARY_DIR}/include/crypto/dso_conf.h)\n\nset(LIBSRC cpt_err.c cryptlib.c ctype.c cversion.c ebcdic.c ex_data.c init.c mem.c mem_clr.c mem_dbg.c mem_sec.c o_dir.c o_fips.c o_fopen.c o_init.c o_str.c o_time.c uid.c getenv.c)\n# file(GLOB LIBSRC *.c *.h)\n\ninclude_directories(\n  BEFORE SYSTEM modes ec/curve448 ec/curve448/arch_32 \${CMAKE_CURRENT_BINARY_DIR}/ # buildinf.h\n  \${PROJECT_SOURCE_DIR}/include # public|libcrypto|internal\n  \${PROJECT_BINARY_DIR}/include # public|libcrypto|internal\n  \${PROJECT_SOURCE_DIR}/ # e_os.h\n)\n\nif(BUILD_SHARED_LIBS)\n  add_definitions(-DOPENSSL_BUILD_SHLIBCRYPTO)\nendif()\n\nmacro(add_submodule dir)\n  set(options)\n  set(oneValueArgs)\n  set(multiValueArgs EXHEADERS)\n  cmake_parse_arguments(add_submodule \"\" \"\" \"\${multiValueArgs}\" \${ARGN})\n\n  # message( STATUS \"{dir} \${dir}\" ) message( STATUS \"{add_submodule_UNPARSED_ARGUMENTS} \${add_submodule_UNPARSED_ARGUMENTS}\" )\n  foreach(name \${add_submodule_UNPARSED_ARGUMENTS})\n    set(LIBSRC \${LIBSRC} \${dir}/\${name})\n  endforeach(name)\n\n  # message( STATUS \"{add_submodule_EXHEADERS} \${add_submodule_EXHEADERS}\" )\n  foreach(name \${add_submodule_EXHEADERS})\n    set(EXHEADERS \${EXHEADERS} \${name})\n  endforeach(name)\n\nendmacro(add_submodule)\n\nadd_submodule(aes aes_cbc.c aes_cfb.c aes_core.c aes_ecb.c aes_ige.c aes_misc.c aes_ofb.c aes_wrap.c)\n\nadd_submodule(aria aria.c)\n\nadd_submodule(asn1 a_bitstr.c a_d2i_fp.c a_digest.c a_dup.c a_gentm.c a_i2d_fp.c a_int.c a_mbstr.c a_object.c a_octet.c a_print.c a_sign.c a_strex.c a_strnid.c a_time.c a_type.c a_utctm.c a_utf8.c a_verify.c ameth_lib.c asn1_err.c asn1_gen.c asn1_item_list.c asn1_lib.c asn1_par.c asn_mime.c asn_moid.c asn_mstbl.c asn_pack.c bio_asn1.c bio_ndef.c d2i_pr.c d2i_pu.c evp_asn1.c f_int.c f_string.c i2d_pr.c i2d_pu.c n_pkey.c nsseq.c p5_pbe.c p5_pbev2.c p5_scrypt.c p8_pkey.c t_bitst.c t_pkey.c t_spki.c tasn_dec.c\n              tasn_enc.c tasn_fre.c tasn_new.c tasn_prn.c tasn_scn.c tasn_typ.c tasn_utl.c x_algor.c x_bignum.c x_info.c x_int64.c x_long.c x_pkey.c x_sig.c x_spki.c x_val.c)\n\nadd_submodule(async async.c async_err.c async_wait.c arch/async_null.c arch/async_posix.c arch/async_win.c)\n\nadd_submodule(bf bf_cfb64.c bf_ecb.c bf_enc.c bf_ofb64.c bf_skey.c)\n\nadd_submodule(bio b_addr.c b_dump.c b_print.c b_sock.c b_sock2.c bf_buff.c # bf_lbuf.c\n              bf_nbio.c bf_null.c bio_cb.c bio_err.c bio_lib.c bio_meth.c bss_acpt.c bss_bio.c bss_conn.c bss_dgram.c bss_fd.c bss_file.c bss_log.c bss_mem.c bss_null.c bss_sock.c)\n\nadd_submodule(blake2 blake2b.c blake2s.c m_blake2b.c m_blake2s.c)\n\nadd_submodule(bn bn_add.c bn_asm.c bn_blind.c bn_const.c bn_ctx.c bn_depr.c bn_dh.c bn_div.c bn_err.c bn_exp.c bn_exp2.c bn_gcd.c bn_gf2m.c bn_intern.c bn_kron.c bn_lib.c bn_mod.c bn_mont.c bn_mpi.c bn_mul.c bn_nist.c bn_prime.c bn_print.c bn_rand.c bn_recp.c bn_shift.c bn_sqr.c bn_sqrt.c bn_srp.c bn_word.c bn_x931p.c rsaz_exp.c)\n\nadd_submodule(buffer buf_err.c buffer.c)\n\nadd_submodule(camellia camellia.c cmll_cbc.c cmll_cfb.c cmll_ctr.c cmll_ecb.c cmll_misc.c cmll_ofb.c)\n\nadd_submodule(cast c_cfb64.c c_ecb.c c_enc.c c_ofb64.c c_skey.c)\n\nadd_submodule(chacha chacha_enc.c)\n\nadd_submodule(cmac cm_ameth.c cm_pmeth.c cmac.c)\n\nadd_submodule(cms cms_asn1.c cms_att.c cms_cd.c cms_dd.c cms_enc.c cms_env.c cms_err.c cms_ess.c cms_io.c cms_kari.c cms_lib.c cms_pwri.c cms_sd.c cms_smime.c)\n\nadd_submodule(comp c_zlib.c comp_err.c comp_lib.c)\n\nadd_submodule(conf conf_api.c conf_def.c conf_err.c conf_lib.c conf_mall.c conf_mod.c conf_sap.c conf_ssl.c)\n\nadd_submodule(ct ct_b64.c ct_err.c ct_log.c ct_oct.c ct_policy.c ct_prn.c ct_sct.c ct_sct_ctx.c ct_vfy.c ct_x509v3.c)\n\nadd_submodule(des cbc_cksm.c cbc_enc.c cfb64ede.c cfb64enc.c cfb_enc.c des_enc.c ecb3_enc.c ecb_enc.c fcrypt.c fcrypt_b.c ofb64ede.c ofb64enc.c ofb_enc.c pcbc_enc.c qud_cksm.c rand_key.c set_key.c str2key.c xcbc_enc.c)\n\nadd_submodule(dh dh_ameth.c dh_asn1.c dh_check.c dh_depr.c dh_err.c dh_gen.c dh_kdf.c dh_key.c dh_lib.c dh_meth.c dh_pmeth.c dh_prn.c dh_rfc5114.c dh_rfc7919.c)\n\nadd_submodule(dsa dsa_ameth.c dsa_asn1.c dsa_depr.c dsa_err.c dsa_gen.c dsa_key.c dsa_lib.c dsa_meth.c dsa_ossl.c dsa_pmeth.c dsa_prn.c dsa_sign.c dsa_vrf.c)\n\nadd_submodule(dso dso_dl.c dso_dlfcn.c dso_err.c dso_lib.c dso_openssl.c dso_vms.c dso_win32.c)\n\nadd_submodule(ec curve25519.c ec2_oct.c ec2_smpl.c ec_ameth.c ec_asn1.c ec_check.c ec_curve.c ec_cvt.c ec_err.c ec_key.c ec_kmeth.c ec_lib.c ec_mult.c ec_oct.c ec_pmeth.c ec_print.c ecdh_kdf.c ecdh_ossl.c ecdsa_ossl.c ecdsa_sign.c ecdsa_vrf.c eck_prn.c ecp_mont.c ecp_nist.c ecp_nistp224.c ecp_nistp256.c ecp_nistp521.c ecp_nistputil.c ecp_oct.c ecp_smpl.c ecx_meth.c curve448/curve448.c curve448/curve448_tables.c curve448/eddsa.c curve448/f_generic.c curve448/scalar.c curve448/arch_32/f_impl.c)\n\nadd_submodule(engine eng_all.c eng_cnf.c eng_ctrl.c eng_dyn.c eng_err.c eng_fat.c eng_init.c eng_lib.c eng_list.c eng_openssl.c eng_pkey.c eng_rdrand.c eng_table.c tb_asnmth.c tb_cipher.c tb_dh.c tb_digest.c tb_dsa.c tb_eckey.c tb_pkmeth.c tb_rand.c tb_rsa.c)\n\nadd_submodule(err err.c err_all.c err_prn.c)\n\nadd_submodule(evp bio_b64.c bio_enc.c bio_md.c bio_ok.c c_allc.c c_alld.c cmeth_lib.c digest.c e_aes.c e_aes_cbc_hmac_sha1.c e_aes_cbc_hmac_sha256.c e_aria.c e_bf.c e_camellia.c e_cast.c e_chacha20_poly1305.c e_des.c e_des3.c e_idea.c e_null.c e_old.c e_rc2.c e_rc4.c e_rc4_hmac_md5.c e_rc5.c e_sm4.c e_seed.c e_xcbc_d.c encode.c evp_cnf.c evp_enc.c evp_err.c evp_key.c evp_lib.c evp_pbe.c evp_pkey.c m_md2.c m_md4.c m_md5.c m_md5_sha1.c m_sha3.c m_mdc2.c m_null.c m_ripemd.c m_sha1.c m_sigver.c m_wp.c names.c\n              p5_crpt.c p5_crpt2.c p_dec.c p_enc.c p_lib.c p_open.c p_seal.c p_sign.c p_verify.c pbe_scrypt.c pmeth_fn.c pmeth_gn.c pmeth_lib.c)\n\nadd_submodule(hmac hm_ameth.c hm_pmeth.c hmac.c)\n\nadd_submodule(idea i_cbc.c i_cfb64.c i_ecb.c i_ofb64.c i_skey.c)\n\nadd_submodule(kdf hkdf.c kdf_err.c scrypt.c tls1_prf.c)\n\nadd_submodule(lhash lh_stats.c lhash.c)\n\nadd_submodule(md4 md4_dgst.c md4_one.c)\n\nadd_submodule(md5 md5_dgst.c md5_one.c)\n\nadd_submodule(mdc2 mdc2_one.c mdc2dgst.c)\n\nadd_submodule(modes cbc128.c ccm128.c cfb128.c ctr128.c cts128.c gcm128.c ocb128.c ofb128.c wrap128.c xts128.c)\n\nadd_submodule(objects o_names.c obj_dat.c obj_err.c obj_lib.c obj_xref.c)\n\nadd_submodule(ocsp ocsp_asn.c ocsp_cl.c ocsp_err.c ocsp_ext.c ocsp_ht.c ocsp_lib.c ocsp_prn.c ocsp_srv.c ocsp_vfy.c v3_ocsp.c)\n\nadd_submodule(pem pem_all.c pem_err.c pem_info.c pem_lib.c pem_oth.c pem_pk8.c pem_pkey.c pem_sign.c pem_x509.c pem_xaux.c pvkfmt.c)\n\nadd_submodule(pkcs12 p12_add.c p12_asn.c p12_attr.c p12_crpt.c p12_crt.c p12_decr.c p12_init.c p12_key.c p12_kiss.c p12_mutl.c p12_npas.c p12_p8d.c p12_p8e.c p12_sbag.c p12_utl.c pk12err.c)\n\nadd_submodule(pkcs7 bio_pk7.c pk7_asn1.c pk7_attr.c pk7_doit.c pk7_lib.c pk7_mime.c pk7_smime.c pkcs7err.c)\n\nadd_submodule(poly1305 poly1305.c poly1305_ameth.c poly1305_pmeth.c)\n\nadd_submodule(rand drbg_ctr.c drbg_lib.c rand_egd.c rand_err.c rand_lib.c rand_unix.c rand_vms.c rand_win.c randfile.c)\n\nadd_submodule(rc2 rc2_cbc.c rc2_ecb.c rc2_skey.c rc2cfb64.c rc2ofb64.c)\n\nadd_submodule(rc4 rc4_enc.c rc4_skey.c)\n\n# add_submodule ( rc5 rc5_ecb.c rc5_enc.c rc5_skey.c rc5cfb64.c rc5ofb64.c )\n\nadd_submodule(ripemd rmd_dgst.c rmd_one.c)\n\nadd_submodule(rsa rsa_ameth.c rsa_asn1.c rsa_chk.c rsa_crpt.c rsa_depr.c rsa_err.c rsa_gen.c rsa_lib.c rsa_meth.c rsa_mp.c rsa_none.c rsa_oaep.c rsa_ossl.c rsa_pk1.c rsa_pmeth.c rsa_prn.c rsa_pss.c rsa_saos.c rsa_sign.c rsa_ssl.c rsa_x931.c rsa_x931g.c)\n\nadd_submodule(seed seed.c seed_cbc.c seed_cfb.c seed_ecb.c seed_ofb.c)\n\nadd_submodule(sha keccak1600.c sha1_one.c sha1dgst.c sha256.c sha512.c)\n\nadd_submodule(siphash siphash.c siphash_ameth.c siphash_pmeth.c)\n\nadd_submodule(sm2 sm2_crypt.c sm2_err.c sm2_pmeth.c sm2_sign.c)\n\nadd_submodule(sm3 m_sm3.c sm3.c)\n\nadd_submodule(sm4 sm4.c)\n\nadd_submodule(srp srp_lib.c srp_vfy.c)\n\nadd_submodule(stack stack.c)\n\nadd_submodule(store loader_file.c store_err.c store_init.c store_lib.c store_register.c store_strings.c)\n\nadd_submodule(ts ts_asn1.c ts_conf.c ts_err.c ts_lib.c ts_req_print.c ts_req_utils.c ts_rsp_print.c ts_rsp_sign.c ts_rsp_utils.c ts_rsp_verify.c ts_verify_ctx.c)\n\nadd_submodule(txt_db txt_db.c)\n\nadd_submodule(ui ui_err.c ui_lib.c ui_null.c ui_openssl.c ui_util.c)\n\nadd_submodule(whrlpool wp_block.c wp_dgst.c)\n\nadd_submodule(x509 by_dir.c by_file.c t_crl.c t_req.c t_x509.c x509_att.c x509_cmp.c x509_d2.c x509_def.c x509_err.c x509_ext.c x509_lu.c x509_meth.c x509_obj.c x509_r2x.c x509_req.c x509_set.c x509_trs.c x509_txt.c x509_v3.c x509_vfy.c x509_vpm.c x509cset.c x509name.c x509rset.c x509spki.c x509type.c x_all.c x_attrib.c x_crl.c x_exten.c x_name.c x_pubkey.c x_req.c x_x509.c x_x509a.c)\n\nadd_submodule(x509v3 pcy_cache.c pcy_data.c pcy_lib.c pcy_map.c pcy_node.c pcy_tree.c v3_addr.c v3_admis.c v3_akey.c v3_akeya.c v3_alt.c v3_asid.c v3_bcons.c v3_bitst.c v3_conf.c v3_cpols.c v3_crld.c v3_enum.c v3_extku.c v3_genn.c v3_ia5.c v3_info.c v3_int.c v3_lib.c v3_ncons.c v3_pci.c v3_pcia.c v3_pcons.c v3_pku.c v3_pmaps.c v3_prn.c v3_purp.c v3_skey.c v3_sxnet.c v3_tlsf.c v3_utl.c v3err.c)\n\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nfind_package(Threads)\nif(NOT Threads_FOUND)\n  add_submodule(. threads_none.c)\nelseif(WIN32)\n  add_submodule(. threads_win.c)\nelse()\n  add_submodule(. threads_pthread.c)\nendif()\n\nadd_library(libcrypto \${LIBSRC} \${OBJECTS_SRC})\n\ntarget_include_directories(libcrypto PUBLIC \${PROJECT_BINARY_DIR}/include)\n\nif(WIN32 AND NOT CYGWIN)\n  target_link_libraries(libcrypto ws2_32 crypt32)\nelse()\n  if(Threads_FOUND)\n    target_link_libraries(libcrypto \${CMAKE_THREAD_LIBS_INIT})\n  endif()\n  if(DSO_DLFCN AND HAVE_DLFCN_H)\n    target_link_libraries(libcrypto dl)\n  endif()\nendif()\n\nset_target_properties(libcrypto PROPERTIES VERSION \"\${LIB_VERSION}\" SOVERSION \"\${LIB_SOVERSION}\" OUTPUT_NAME crypto)\n\nif(ANDROID)\n  set_target_properties(libcrypto PROPERTIES OUTPUT_NAME \"crypto_1_1\")\nendif()\n\nif(MSVC)\n  if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n    set_target_properties(libcrypto PROPERTIES OUTPUT_NAME \"libcrypto-1_1-x64\")\n  elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)\n    set_target_properties(libcrypto PROPERTIES OUTPUT_NAME \"libcrypto-1_1\")\n  endif()\nendif()\nif(NOT LIBDIR)\n  set(LIBDIR lib)\nendif()\nif(NOT OPENSSL_NO_INSTALL)\n  install(TARGETS libcrypto RUNTIME DESTINATION bin LIBRARY DESTINATION \${LIBDIR} ARCHIVE DESTINATION \${LIBDIR})\nendif(NOT OPENSSL_NO_INSTALL)\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/opensslconf.h.cmake"  "/*\n * Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n#include <openssl/opensslv.h>\n\n#ifdef  __cplusplus\nextern \"C\" {\n#endif\n\n#ifdef OPENSSL_ALGORITHM_DEFINES\n# error OPENSSL_ALGORITHM_DEFINES no longer supported\n#endif\n\n/*\n * OpenSSL was configured with the following options:\n */\n\n#ifndef OPENSSL_NO_MD2\n# define OPENSSL_NO_MD2\n#endif\n#ifndef OPENSSL_NO_RC5\n# define OPENSSL_NO_RC5\n#endif\n#ifndef OPENSSL_THREADS\n# define OPENSSL_THREADS\n#endif\n#ifndef OPENSSL_RAND_SEED_OS\n# define OPENSSL_RAND_SEED_OS\n#endif\n#ifndef OPENSSL_NO_ASAN\n# define OPENSSL_NO_ASAN\n#endif\n#ifndef OPENSSL_NO_ASM\n# define OPENSSL_NO_ASM\n#endif\n#ifndef OPENSSL_NO_CRYPTO_MDEBUG\n# define OPENSSL_NO_CRYPTO_MDEBUG\n#endif\n#ifndef OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE\n# define OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE\n#endif\n#ifndef OPENSSL_NO_DEVCRYPTOENG\n# define OPENSSL_NO_DEVCRYPTOENG\n#endif\n#ifndef OPENSSL_NO_EC_NISTP_64_GCC_128\n# define OPENSSL_NO_EC_NISTP_64_GCC_128\n#endif\n#ifndef OPENSSL_NO_EGD\n# define OPENSSL_NO_EGD\n#endif\n#ifndef OPENSSL_NO_EXTERNAL_TESTS\n# define OPENSSL_NO_EXTERNAL_TESTS\n#endif\n#ifndef OPENSSL_NO_FUZZ_AFL\n# define OPENSSL_NO_FUZZ_AFL\n#endif\n#ifndef OPENSSL_NO_FUZZ_LIBFUZZER\n# define OPENSSL_NO_FUZZ_LIBFUZZER\n#endif\n#ifndef OPENSSL_NO_HEARTBEATS\n# define OPENSSL_NO_HEARTBEATS\n#endif\n#ifndef OPENSSL_NO_MSAN\n# define OPENSSL_NO_MSAN\n#endif\n#ifndef OPENSSL_NO_SCTP\n# define OPENSSL_NO_SCTP\n#endif\n#ifndef OPENSSL_NO_SSL_TRACE\n# define OPENSSL_NO_SSL_TRACE\n#endif\n#ifndef OPENSSL_NO_SSL3\n# define OPENSSL_NO_SSL3\n#endif\n#ifndef OPENSSL_NO_SSL3_METHOD\n# define OPENSSL_NO_SSL3_METHOD\n#endif\n#ifndef OPENSSL_NO_UBSAN\n# define OPENSSL_NO_UBSAN\n#endif\n#ifndef OPENSSL_NO_UNIT_TEST\n# define OPENSSL_NO_UNIT_TEST\n#endif\n#ifndef OPENSSL_NO_WEAK_SSL_CIPHERS\n# define OPENSSL_NO_WEAK_SSL_CIPHERS\n#endif\n#ifndef OPENSSL_NO_STATIC_ENGINE\n# define OPENSSL_NO_STATIC_ENGINE\n#endif\n#ifndef OPENSSL_NO_AFALGENG\n# define OPENSSL_NO_AFALGENG\n#endif\n\n/*\n * Sometimes OPENSSSL_NO_xxx ends up with an empty file and some compilers\n * don't like that.  This will hopefully silence them.\n */\n#define NON_EMPTY_TRANSLATION_UNIT static void *dummy = &dummy;\n\n/*\n * Applications should use -DOPENSSL_API_COMPAT=<version> to suppress the\n * declarations of functions deprecated in or before <version>. Otherwise, they\n * still won't see them if the library has been built to disable deprecated\n * functions.\n */\n#ifndef DECLARE_DEPRECATED\n# define DECLARE_DEPRECATED(f)   f;\n# ifdef __GNUC__\n#  if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ > 0)\n#   undef DECLARE_DEPRECATED\n#   define DECLARE_DEPRECATED(f)    f __attribute__ ((deprecated));\n#  endif\n# endif\n#endif\n\n#ifndef OPENSSL_FILE\n# ifdef OPENSSL_NO_FILENAMES\n#  define OPENSSL_FILE \"\"\n#  define OPENSSL_LINE 0\n# else\n#  define OPENSSL_FILE __FILE__\n#  define OPENSSL_LINE __LINE__\n# endif\n#endif\n\n#ifndef OPENSSL_MIN_API\n# define OPENSSL_MIN_API 0\n#endif\n\n#if !defined(OPENSSL_API_COMPAT) || OPENSSL_API_COMPAT < OPENSSL_MIN_API\n# undef OPENSSL_API_COMPAT\n# define OPENSSL_API_COMPAT OPENSSL_MIN_API\n#endif\n\n/*\n * Do not deprecate things to be deprecated in version 1.2.0 before the\n * OpenSSL version number matches.\n */\n#if OPENSSL_VERSION_NUMBER < 0x10200000L\n# define DEPRECATEDIN_1_2_0(f)   f;\n#elif OPENSSL_API_COMPAT < 0x10200000L\n# define DEPRECATEDIN_1_2_0(f)   DECLARE_DEPRECATED(f)\n#else\n# define DEPRECATEDIN_1_2_0(f)\n#endif\n\n#if OPENSSL_API_COMPAT < 0x10100000L\n# define DEPRECATEDIN_1_1_0(f)   DECLARE_DEPRECATED(f)\n#else\n# define DEPRECATEDIN_1_1_0(f)\n#endif\n\n#if OPENSSL_API_COMPAT < 0x10000000L\n# define DEPRECATEDIN_1_0_0(f)   DECLARE_DEPRECATED(f)\n#else\n# define DEPRECATEDIN_1_0_0(f)\n#endif\n\n#if OPENSSL_API_COMPAT < 0x00908000L\n# define DEPRECATEDIN_0_9_8(f)   DECLARE_DEPRECATED(f)\n#else\n# define DEPRECATEDIN_0_9_8(f)\n#endif\n\n/* Generate 80386 code? */\n#undef I386_ONLY\n\n#undef OPENSSL_UNISTD\n#define OPENSSL_UNISTD <unistd.h>\n\n#undef OPENSSL_EXPORT_VAR_AS_FUNCTION\n#cmakedefine OPENSSL_EXPORT_VAR_AS_FUNCTION\n\n/*\n * The following are cipher-specific, but are part of the public API.\n */\n#if !defined(OPENSSL_SYS_UEFI)\n#undef BN_LLONG\n/* Only one for the following should be defined */\n#undef SIXTY_FOUR_BIT_LONG\n#cmakedefine SIXTY_FOUR_BIT_LONG\n#undef SIXTY_FOUR_BIT\n#cmakedefine SIXTY_FOUR_BIT\n#undef THIRTY_TWO_BIT\n#cmakedefine THIRTY_TWO_BIT\n#endif\n\n#define RC4_INT unsigned int\n\n#ifdef  __cplusplus\n}\n#endif\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/openssl/ssl/CMakeLists.txt"  "# Based on original work by David Manura Copyright (C) 2007-2012 LuaDist. Copyright (C) 2013 Brian Sidebotham\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nif(BUILD_SHARED_LIBS)\n  add_definitions(-DOPENSSL_BUILD_SHLIBSSL)\nendif()\n\nfile(GLOB LIBSRC *.c *.h record/*.c record/*.h statem/*.c statem/*.h)\n\ninclude_directories(BEFORE SYSTEM \${PROJECT_SOURCE_DIR}/ # e_os.h\n)\n\nadd_library(libssl \${LIBSRC})\n\ntarget_include_directories(libssl PUBLIC \${PROJECT_BINARY_DIR}/include)\n\ntarget_link_libraries(libssl libcrypto)\n\nset_target_properties(libssl PROPERTIES VERSION \"\${LIB_VERSION}\" SOVERSION \"\${LIB_SOVERSION}\" OUTPUT_NAME ssl)\n\nif(ANDROID)\n  set_target_properties(libssl PROPERTIES OUTPUT_NAME \"ssl_1_1\")\nendif()\n\nif(MSVC)\n  if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n    set_target_properties(libssl PROPERTIES OUTPUT_NAME \"libssl-1_1-x64\")\n  elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)\n    set_target_properties(libssl PROPERTIES OUTPUT_NAME \"libssl-1_1\")\n  endif()\nendif()\nif(NOT LIBDIR)\n  set(LIBDIR lib)\nendif()\ninstall(TARGETS libssl RUNTIME DESTINATION bin LIBRARY DESTINATION \${LIBDIR} ARCHIVE DESTINATION \${LIBDIR})\n")
