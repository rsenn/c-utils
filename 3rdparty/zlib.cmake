file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/zlib/CMakeLists.txt"  "cmake_minimum_required(VERSION 2.4.4)\nset(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)\n\nset(BUILD_SHARED_LIBS OFF)\n\nproject(zlib C)\n\nset(VERSION \"1.2.7\")\n\nset(INSTALL_BIN_DIR \"\${CMAKE_INSTALL_PREFIX}/bin\" CACHE PATH \"Installation directory for executables\")\nset(INSTALL_LIB_DIR \"\${CMAKE_INSTALL_PREFIX}/lib\" CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_INC_DIR \"\${CMAKE_INSTALL_PREFIX}/include\" CACHE PATH \"Installation directory for headers\")\nset(INSTALL_MAN_DIR \"\${CMAKE_INSTALL_PREFIX}/share/man\" CACHE PATH \"Installation directory for manual pages\")\nset(INSTALL_PKGCONFIG_DIR \"\${CMAKE_INSTALL_PREFIX}/share/pkgconfig\" CACHE PATH \"Installation directory for pkgconfig (.pc) files\")\n\ninclude(CheckTypeSize)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckCSourceCompiles)\nenable_testing()\n\ncheck_include_file(sys/types.h HAVE_SYS_TYPES_H)\ncheck_include_file(stdint.h\t\tHAVE_STDINT_H)\ncheck_include_file(stddef.h\t\tHAVE_STDDEF_H)\n\n#\n# Check to see if we have large file support\n#\nset(CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1)\n# We add these other definitions here because CheckTypeSize.cmake\n# in CMake 2.4.x does not automatically do so and we want\n# compatibility with CMake 2.4.x.\nif(HAVE_SYS_TYPES_H)\n\t\tlist(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_SYS_TYPES_H)\nendif()\nif(HAVE_STDINT_H)\n\t\tlist(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDINT_H)\nendif()\nif(HAVE_STDDEF_H)\n\t\tlist(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDDEF_H)\nendif()\ncheck_type_size(off64_t OFF64_T)\nif(HAVE_OFF64_T)\n\t add_definitions(-D_LARGEFILE64_SOURCE=1)\nendif()\nset(CMAKE_REQUIRED_DEFINITIONS) # clear variable\n\n#\n# Check for fseeko\n#\ncheck_function_exists(fseeko HAVE_FSEEKO)\nif(NOT HAVE_FSEEKO)\n\t\tadd_definitions(-DNO_FSEEKO)\nendif()\n\n#\n# Check for unistd.h\n#\ncheck_include_file(unistd.h Z_HAVE_UNISTD_H)\n\nif(MSVC)\n\t\tset(CMAKE_DEBUG_POSTFIX \"d\")\n\t\tadd_definitions(-D_CRT_SECURE_NO_DEPRECATE)\n\t\tadd_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\n\t\tinclude_directories(\${CMAKE_CURRENT_SOURCE_DIR})\nendif()\n\nif(NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n\t\t# If we're doing an out of source build and the user has a zconf.h\n\t\t# in their source tree...\n\t\tif(EXISTS \${CMAKE_CURRENT_SOURCE_DIR}/zconf.h)\n\t\t\t\tmessage(STATUS \"Renaming\")\n\t\t\t\tmessage(STATUS \"\t\t\${CMAKE_CURRENT_SOURCE_DIR}/zconf.h\")\n\t\t\t\tmessage(STATUS \"to 'zconf.h.included' because this file is included with zlib\")\n\t\t\t\tmessage(STATUS \"but CMake generates it automatically in the build directory.\")\n\t\t\t\tfile(RENAME \${CMAKE_CURRENT_SOURCE_DIR}/zconf.h \${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.included)\n\tendif()\nendif()\n\nset(ZLIB_PC \${CMAKE_CURRENT_BINARY_DIR}/zlib.pc)\nconfigure_file( \${CMAKE_CURRENT_SOURCE_DIR}/zlib.pc.cmakein\n\t\t\${ZLIB_PC} @ONLY)\nconfigure_file(\t\${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.cmakein\n\t\t\${CMAKE_CURRENT_BINARY_DIR}/zconf.h @ONLY)\ninclude_directories(\${CMAKE_CURRENT_BINARY_DIR} \${CMAKE_SOURCE_DIR})\n\n\n#============================================================================\n# zlib\n#============================================================================\n\nset(ZLIB_PUBLIC_HDRS\n\t\t\${CMAKE_CURRENT_BINARY_DIR}/zconf.h\n\t\tzlib.h\n)\nset(ZLIB_PRIVATE_HDRS\n\t\tcrc32.h\n\t\tdeflate.h\n\t\tgzguts.h\n\t\tinffast.h\n\t\tinffixed.h\n\t\tinflate.h\n\t\tinftrees.h\n\t\ttrees.h\n\t\tzutil.h\n)\nset(ZLIB_SRCS\n\t\tadler32.c\n\t\tcompress.c\n\t\tcrc32.c\n\t\tdeflate.c\n\t\tgzclose.c\n\t\tgzlib.c\n\t\tgzread.c\n\t\tgzwrite.c\n\t\tinflate.c\n\t\tinfback.c\n\t\tinftrees.c\n\t\tinffast.c\n\t\ttrees.c\n\t\tuncompr.c\n\t\tzutil.c\n)\n\nif(NOT MINGW)\n\t\tset(ZLIB_SRCS \${ZLIB_SRCS}\n\t\t\t\twin32/zlib1.rc # If present will override custom build rule below.\n\t\t)\nendif()\n\n# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\nfile(READ \${CMAKE_CURRENT_SOURCE_DIR}/zlib.h _zlib_h_contents)\nstring(REGEX REPLACE \".*#define[ \\t]+ZLIB_VERSION[ \\t]+\\\"([-0-9A-Za-z.]+)\\\".*\"\n\t\t\"\\\\1\" ZLIB_FULL_VERSION \${_zlib_h_contents})\n\nif(MINGW)\n\t\t# This gets us DLL resource information when compiling on MinGW.\n\t\tif(NOT CMAKE_RC_COMPILER)\n\t\t\t\tSET(CMAKE_RC_COMPILER windres.exe)\n\t\tendif()\n\n\t\tadd_custom_command(OUTPUT \${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj\n\t\t\t\t\t\t\t\t\t\t\t COMMAND \${CMAKE_RC_COMPILER}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-D GCC_WINDRES\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-I \${CMAKE_CURRENT_SOURCE_DIR}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-I \${CMAKE_CURRENT_BINARY_DIR}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-o \${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-i \${CMAKE_CURRENT_SOURCE_DIR}/win32/zlib1.rc)\n\t\tset(ZLIB_SRCS \${ZLIB_SRCS} \${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj)\nendif(MINGW)\n\nif(NOT ZLIB_STATIC)\n\t add_library(zlib SHARED \${ZLIB_SRCS} \${ZLIB_PUBLIC_HDRS} \${ZLIB_PRIVATE_HDRS})\nendif(NOT ZLIB_STATIC)\nadd_library(zlibstatic STATIC \${ZLIB_SRCS} \${ZLIB_PUBLIC_HDRS} \${ZLIB_PRIVATE_HDRS})\n#set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)\n#set_target_properties(zlib PROPERTIES SOVERSION 1)\n\nif(NOT CYGWIN)\n\t\t# This property causes shared libraries on Linux to have the full version\n\t\t# encoded into their final filename.\tWe disable this on Cygwin because\n\t\t# it causes cygz-\${ZLIB_FULL_VERSION}.dll to be created when cygz.dll\n\t\t# seems to be the default.\n\t\t#\n\t\t# This has no effect with MSVC, on that platform the version info for\n\t\t# the DLL comes from the resource file win32/zlib1.rc\n\t\t#\t\tset_target_properties(zlib PROPERTIES VERSION \${ZLIB_FULL_VERSION})\nendif()\n\nif(UNIX)\n\t\t# On unix-like platforms the library is almost always called libz\n\t set_target_properties(zlibstatic PROPERTIES OUTPUT_NAME z)\n\t #\tset_target_properties(zlib PROPERTIES LINK_FLAGS \"-Wl,--version-script,\${CMAKE_CURRENT_SOURCE_DIR}/zlib.map\")\nelseif(BUILD_SHARED_LIBS AND WIN32)\n\t\t# Creates zlib1.dll when building shared library version\n\t\t# set_target_properties(zlib PROPERTIES SUFFIX \"1.dll\")\nendif()\n\nif(ZLIB_NO_INSTALL)\n\tset(SKIP_INSTALL_ALL TRUE)\nendif(ZLIB_NO_INSTALL)\n\nif(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL )\n\t\tinstall(TARGETS zlibstatic\n\t\t\t\tRUNTIME DESTINATION \"\${INSTALL_BIN_DIR}\"\n\t\t\t\tARCHIVE DESTINATION \"\${INSTALL_LIB_DIR}\"\n\t\t\t\tLIBRARY DESTINATION \"\${INSTALL_LIB_DIR}\" )\nendif()\nif(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL )\n\t\tinstall(FILES \${ZLIB_PUBLIC_HDRS} DESTINATION \"\${INSTALL_INC_DIR}\")\nendif()\nif(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL )\n\t\tinstall(FILES zlib.3 DESTINATION \"\${INSTALL_MAN_DIR}/man3\")\nendif()\nif(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL )\n\t\tinstall(FILES \${ZLIB_PC} DESTINATION \"\${INSTALL_PKGCONFIG_DIR}\")\nendif()\n\n#============================================================================\n# Example binaries\n#============================================================================\n\n#add_executable(example test/example.c)\n#target_link_libraries(example zlib)\n#add_test(example example)\n#\n#add_executable(minigzip test/minigzip.c)\n#target_link_libraries(minigzip zlib)\n#\n#if(HAVE_OFF64_T)\n#\t\tadd_executable(example64 test/example.c)\n#\t\ttarget_link_libraries(example64 zlib)\n#\t\tset_target_properties(example64 PROPERTIES COMPILE_FLAGS \"-D_FILE_OFFSET_BITS=64\")\n#\t\tadd_test(example64 example64)\n#\n#\t\tadd_executable(minigzip64 test/minigzip.c)\n#\t\ttarget_link_libraries(minigzip64 zlib)\n#\t\tset_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS \"-D_FILE_OFFSET_BITS=64\")\n#endif()\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/zlib/zconf.h.cmakein"  "/* zconf.h -- configuration of the zlib compression library\n * Copyright (C) 1995-2012 Jean-loup Gailly.\n * For conditions of distribution and use, see copyright notice in zlib.h\n */\n\n/* @(#) \$Id\$ */\n\n#ifndef ZCONF_H\n#define ZCONF_H\n#cmakedefine Z_PREFIX\n#cmakedefine Z_HAVE_UNISTD_H\n\n/*\n * If you *really* need a unique prefix for all types and library functions,\n * compile with -DZ_PREFIX. The \"standard\" zlib should be compiled without it.\n * Even better than compiling with -DZ_PREFIX would be to use configure to set\n * this permanently in zconf.h using \"./configure --zprefix\".\n */\n#ifdef Z_PREFIX\t\t /* may be set to #if 1 by ./configure */\n#\tdefine Z_PREFIX_SET\n\n/* all linked symbols */\n#\tdefine _dist_code\t\t\t\t\t\tz__dist_code\n#\tdefine _length_code\t\t\t\t\tz__length_code\n#\tdefine _tr_align\t\t\t\t\t\t z__tr_align\n#\tdefine _tr_flush_block\t\t\t z__tr_flush_block\n#\tdefine _tr_init\t\t\t\t\t\t\tz__tr_init\n#\tdefine _tr_stored_block\t\t\tz__tr_stored_block\n#\tdefine _tr_tally\t\t\t\t\t\t z__tr_tally\n#\tdefine adler32\t\t\t\t\t\t\t z_adler32\n#\tdefine adler32_combine\t\t\t z_adler32_combine\n#\tdefine adler32_combine64\t\t z_adler32_combine64\n#\tifndef Z_SOLO\n#\t\tdefine compress\t\t\t\t\t\t\tz_compress\n#\t\tdefine compress2\t\t\t\t\t\t z_compress2\n#\t\tdefine compressBound\t\t\t\t z_compressBound\n#\tendif\n#\tdefine crc32\t\t\t\t\t\t\t\t z_crc32\n#\tdefine crc32_combine\t\t\t\t z_crc32_combine\n#\tdefine crc32_combine64\t\t\t z_crc32_combine64\n#\tdefine deflate\t\t\t\t\t\t\t z_deflate\n#\tdefine deflateBound\t\t\t\t\tz_deflateBound\n#\tdefine deflateCopy\t\t\t\t\t z_deflateCopy\n#\tdefine deflateEnd\t\t\t\t\t\tz_deflateEnd\n#\tdefine deflateInit2_\t\t\t\t z_deflateInit2_\n#\tdefine deflateInit_\t\t\t\t\tz_deflateInit_\n#\tdefine deflateParams\t\t\t\t z_deflateParams\n#\tdefine deflatePending\t\t\t\tz_deflatePending\n#\tdefine deflatePrime\t\t\t\t\tz_deflatePrime\n#\tdefine deflateReset\t\t\t\t\tz_deflateReset\n#\tdefine deflateResetKeep\t\t\tz_deflateResetKeep\n#\tdefine deflateSetDictionary\tz_deflateSetDictionary\n#\tdefine deflateSetHeader\t\t\tz_deflateSetHeader\n#\tdefine deflateTune\t\t\t\t\t z_deflateTune\n#\tdefine deflate_copyright\t\t z_deflate_copyright\n#\tdefine get_crc_table\t\t\t\t z_get_crc_table\n#\tifndef Z_SOLO\n#\t\tdefine gz_error\t\t\t\t\t\t\tz_gz_error\n#\t\tdefine gz_intmax\t\t\t\t\t\t z_gz_intmax\n#\t\tdefine gz_strwinerror\t\t\t\tz_gz_strwinerror\n#\t\tdefine gzbuffer\t\t\t\t\t\t\tz_gzbuffer\n#\t\tdefine gzclearerr\t\t\t\t\t\tz_gzclearerr\n#\t\tdefine gzclose\t\t\t\t\t\t\t z_gzclose\n#\t\tdefine gzclose_r\t\t\t\t\t\t z_gzclose_r\n#\t\tdefine gzclose_w\t\t\t\t\t\t z_gzclose_w\n#\t\tdefine gzdirect\t\t\t\t\t\t\tz_gzdirect\n#\t\tdefine gzdopen\t\t\t\t\t\t\t z_gzdopen\n#\t\tdefine gzeof\t\t\t\t\t\t\t\t z_gzeof\n#\t\tdefine gzerror\t\t\t\t\t\t\t z_gzerror\n#\t\tdefine gzflush\t\t\t\t\t\t\t z_gzflush\n#\t\tdefine gzgetc\t\t\t\t\t\t\t\tz_gzgetc\n#\t\tdefine gzgetc_\t\t\t\t\t\t\t z_gzgetc_\n#\t\tdefine gzgets\t\t\t\t\t\t\t\tz_gzgets\n#\t\tdefine gzoffset\t\t\t\t\t\t\tz_gzoffset\n#\t\tdefine gzoffset64\t\t\t\t\t\tz_gzoffset64\n#\t\tdefine gzopen\t\t\t\t\t\t\t\tz_gzopen\n#\t\tdefine gzopen64\t\t\t\t\t\t\tz_gzopen64\n#\t\tifdef _WIN32\n#\t\t\tdefine gzopen_w\t\t\t\t\t\t\tz_gzopen_w\n#\t\tendif\n#\t\tdefine gzprintf\t\t\t\t\t\t\tz_gzprintf\n#\t\tdefine gzputc\t\t\t\t\t\t\t\tz_gzputc\n#\t\tdefine gzputs\t\t\t\t\t\t\t\tz_gzputs\n#\t\tdefine gzread\t\t\t\t\t\t\t\tz_gzread\n#\t\tdefine gzrewind\t\t\t\t\t\t\tz_gzrewind\n#\t\tdefine gzseek\t\t\t\t\t\t\t\tz_gzseek\n#\t\tdefine gzseek64\t\t\t\t\t\t\tz_gzseek64\n#\t\tdefine gzsetparams\t\t\t\t\t z_gzsetparams\n#\t\tdefine gztell\t\t\t\t\t\t\t\tz_gztell\n#\t\tdefine gztell64\t\t\t\t\t\t\tz_gztell64\n#\t\tdefine gzungetc\t\t\t\t\t\t\tz_gzungetc\n#\t\tdefine gzwrite\t\t\t\t\t\t\t z_gzwrite\n#\tendif\n#\tdefine inflate\t\t\t\t\t\t\t z_inflate\n#\tdefine inflateBack\t\t\t\t\t z_inflateBack\n#\tdefine inflateBackEnd\t\t\t\tz_inflateBackEnd\n#\tdefine inflateBackInit_\t\t\tz_inflateBackInit_\n#\tdefine inflateCopy\t\t\t\t\t z_inflateCopy\n#\tdefine inflateEnd\t\t\t\t\t\tz_inflateEnd\n#\tdefine inflateGetHeader\t\t\tz_inflateGetHeader\n#\tdefine inflateInit2_\t\t\t\t z_inflateInit2_\n#\tdefine inflateInit_\t\t\t\t\tz_inflateInit_\n#\tdefine inflateMark\t\t\t\t\t z_inflateMark\n#\tdefine inflatePrime\t\t\t\t\tz_inflatePrime\n#\tdefine inflateReset\t\t\t\t\tz_inflateReset\n#\tdefine inflateReset2\t\t\t\t z_inflateReset2\n#\tdefine inflateSetDictionary\tz_inflateSetDictionary\n#\tdefine inflateSync\t\t\t\t\t z_inflateSync\n#\tdefine inflateSyncPoint\t\t\tz_inflateSyncPoint\n#\tdefine inflateUndermine\t\t\tz_inflateUndermine\n#\tdefine inflateResetKeep\t\t\tz_inflateResetKeep\n#\tdefine inflate_copyright\t\t z_inflate_copyright\n#\tdefine inflate_fast\t\t\t\t\tz_inflate_fast\n#\tdefine inflate_table\t\t\t\t z_inflate_table\n#\tifndef Z_SOLO\n#\t\tdefine uncompress\t\t\t\t\t\tz_uncompress\n#\tendif\n#\tdefine zError\t\t\t\t\t\t\t\tz_zError\n#\tifndef Z_SOLO\n#\t\tdefine zcalloc\t\t\t\t\t\t\t z_zcalloc\n#\t\tdefine zcfree\t\t\t\t\t\t\t\tz_zcfree\n#\tendif\n#\tdefine zlibCompileFlags\t\t\tz_zlibCompileFlags\n#\tdefine zlibVersion\t\t\t\t\t z_zlibVersion\n\n/* all zlib typedefs in zlib.h and zconf.h */\n#\tdefine Byte\t\t\t\t\t\t\t\t\tz_Byte\n#\tdefine Bytef\t\t\t\t\t\t\t\t z_Bytef\n#\tdefine alloc_func\t\t\t\t\t\tz_alloc_func\n#\tdefine charf\t\t\t\t\t\t\t\t z_charf\n#\tdefine free_func\t\t\t\t\t\t z_free_func\n#\tifndef Z_SOLO\n#\t\tdefine gzFile\t\t\t\t\t\t\t\tz_gzFile\n#\tendif\n#\tdefine gz_header\t\t\t\t\t\t z_gz_header\n#\tdefine gz_headerp\t\t\t\t\t\tz_gz_headerp\n#\tdefine in_func\t\t\t\t\t\t\t z_in_func\n#\tdefine intf\t\t\t\t\t\t\t\t\tz_intf\n#\tdefine out_func\t\t\t\t\t\t\tz_out_func\n#\tdefine uInt\t\t\t\t\t\t\t\t\tz_uInt\n#\tdefine uIntf\t\t\t\t\t\t\t\t z_uIntf\n#\tdefine uLong\t\t\t\t\t\t\t\t z_uLong\n#\tdefine uLongf\t\t\t\t\t\t\t\tz_uLongf\n#\tdefine voidp\t\t\t\t\t\t\t\t z_voidp\n#\tdefine voidpc\t\t\t\t\t\t\t\tz_voidpc\n#\tdefine voidpf\t\t\t\t\t\t\t\tz_voidpf\n\n/* all zlib structs in zlib.h and zconf.h */\n#\tdefine gz_header_s\t\t\t\t\t z_gz_header_s\n#\tdefine internal_state\t\t\t\tz_internal_state\n\n#endif\n\n#if defined(__MSDOS__) && !defined(MSDOS)\n#\tdefine MSDOS\n#endif\n#if (defined(OS_2) || defined(__OS2__)) && !defined(OS2)\n#\tdefine OS2\n#endif\n#if defined(_WINDOWS) && !defined(WINDOWS)\n#\tdefine WINDOWS\n#endif\n#if defined(_WIN32) || defined(_WIN32_WCE) || defined(__WIN32__)\n#\tifndef WIN32\n#\t\tdefine WIN32\n#\tendif\n#endif\n#if (defined(MSDOS) || defined(OS2) || defined(WINDOWS)) && !defined(WIN32)\n#\tif !defined(__GNUC__) && !defined(__FLAT__) && !defined(__386__)\n#\t\tifndef SYS16BIT\n#\t\t\tdefine SYS16BIT\n#\t\tendif\n#\tendif\n#endif\n\n/*\n * Compile with -DMAXSEG_64K if the alloc function cannot allocate more\n * than 64k bytes at a time (needed on systems with 16-bit int).\n */\n#ifdef SYS16BIT\n#\tdefine MAXSEG_64K\n#endif\n#ifdef MSDOS\n#\tdefine UNALIGNED_OK\n#endif\n\n#ifdef __STDC_VERSION__\n#\tifndef STDC\n#\t\tdefine STDC\n#\tendif\n#\tif __STDC_VERSION__ >= 199901L\n#\t\tifndef STDC99\n#\t\t\tdefine STDC99\n#\t\tendif\n#\tendif\n#endif\n#if !defined(STDC) && (defined(__STDC__) || defined(__cplusplus))\n#\tdefine STDC\n#endif\n#if !defined(STDC) && (defined(__GNUC__) || defined(__BORLANDC__))\n#\tdefine STDC\n#endif\n#if !defined(STDC) && (defined(MSDOS) || defined(WINDOWS) || defined(WIN32))\n#\tdefine STDC\n#endif\n#if !defined(STDC) && (defined(OS2) || defined(__HOS_AIX__))\n#\tdefine STDC\n#endif\n\n#if defined(__OS400__) && !defined(STDC)\t\t/* iSeries (formerly AS/400). */\n#\tdefine STDC\n#endif\n\n#ifndef STDC\n#\tifndef const /* cannot use !defined(STDC) && !defined(const) on Mac */\n#\t\tdefine const\t\t\t /* note: need a more gentle solution here */\n#\tendif\n#endif\n\n#if defined(ZLIB_CONST) && !defined(z_const)\n#\tdefine z_const const\n#else\n#\tdefine z_const\n#endif\n\n/* Some Mac compilers merge all .h files incorrectly: */\n#if defined(__MWERKS__)||defined(applec)||defined(THINK_C)||defined(__SC__)\n#\tdefine NO_DUMMY_DECL\n#endif\n\n/* Maximum value for memLevel in deflateInit2 */\n#ifndef MAX_MEM_LEVEL\n#\tifdef MAXSEG_64K\n#\t\tdefine MAX_MEM_LEVEL 8\n#\telse\n#\t\tdefine MAX_MEM_LEVEL 9\n#\tendif\n#endif\n\n/* Maximum value for windowBits in deflateInit2 and inflateInit2.\n * WARNING: reducing MAX_WBITS makes minigzip unable to extract .gz files\n * created by gzip. (Files created by minigzip can still be extracted by\n * gzip.)\n */\n#ifndef MAX_WBITS\n#\tdefine MAX_WBITS\t 15 /* 32K LZ77 window */\n#endif\n\n/* The memory requirements for deflate are (in bytes):\n\t\t\t\t\t\t(1 << (windowBits+2)) +\t(1 << (memLevel+9))\n that is: 128K for windowBits=15\t+\t128K for memLevel = 8\t(default values)\n plus a few kilobytes for small objects. For example, if you want to reduce\n the default memory requirements from 256K to 128K, compile with\n\t\t make CFLAGS=\"-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7\"\n Of course this will generally degrade compression (there's no free lunch).\n\n\t The memory requirements for inflate are (in bytes) 1 << windowBits\n that is, 32K for windowBits=15 (default value) plus a few kilobytes\n for small objects.\n*/\n\n\t\t\t\t\t\t\t\t\t\t\t\t/* Type declarations */\n\n#ifndef OF /* function prototypes */\n#\tifdef STDC\n#\t\tdefine OF(args)\targs\n#\telse\n#\t\tdefine OF(args)\t()\n#\tendif\n#endif\n\n#ifndef Z_ARG /* function prototypes for stdarg */\n#\tif defined(STDC) || defined(Z_HAVE_STDARG_H)\n#\t\tdefine Z_ARG(args)\targs\n#\telse\n#\t\tdefine Z_ARG(args)\t()\n#\tendif\n#endif\n\n/* The following definitions for FAR are needed only for MSDOS mixed\n * model programming (small or medium model with some far allocations).\n * This was tested only with MSC; for other MSDOS compilers you may have\n * to define NO_MEMCPY in zutil.h.\tIf you don't need the mixed model,\n * just define FAR to be empty.\n */\n#ifdef SYS16BIT\n#\tif defined(M_I86SM) || defined(M_I86MM)\n\t\t /* MSC small or medium model */\n#\t\tdefine SMALL_MEDIUM\n#\t\tifdef _MSC_VER\n#\t\t\tdefine FAR _far\n#\t\telse\n#\t\t\tdefine FAR far\n#\t\tendif\n#\tendif\n#\tif (defined(__SMALL__) || defined(__MEDIUM__))\n\t\t /* Turbo C small or medium model */\n#\t\tdefine SMALL_MEDIUM\n#\t\tifdef __BORLANDC__\n#\t\t\tdefine FAR _far\n#\t\telse\n#\t\t\tdefine FAR far\n#\t\tendif\n#\tendif\n#endif\n\n#if defined(WINDOWS) || defined(WIN32)\n\t /* If building or using zlib as a DLL, define ZLIB_DLL.\n\t\t* This is not mandatory, but it offers a little performance increase.\n\t\t*/\n#\tifdef ZLIB_DLL\n#\t\tif defined(WIN32) && (!defined(__BORLANDC__) || (__BORLANDC__ >= 0x500))\n#\t\t\tifdef ZLIB_INTERNAL\n#\t\t\t\tdefine ZEXTERN extern __declspec(dllexport)\n#\t\t\telse\n#\t\t\t\tdefine ZEXTERN extern __declspec(dllimport)\n#\t\t\tendif\n#\t\tendif\n#\tendif\t/* ZLIB_DLL */\n\t /* If building or using zlib with the WINAPI/WINAPIV calling convention,\n\t\t* define ZLIB_WINAPI.\n\t\t* Caution: the standard ZLIB1.DLL is NOT compiled using ZLIB_WINAPI.\n\t\t*/\n#\tifdef ZLIB_WINAPI\n#\t\tifdef FAR\n#\t\t\tundef FAR\n#\t\tendif\n#\t\tinclude <windows.h>\n\t\t /* No need for _export, use ZLIB.DEF instead. */\n\t\t /* For complete Windows compatibility, use WINAPI, not __stdcall. */\n#\t\tdefine ZEXPORT WINAPI\n#\t\tifdef WIN32\n#\t\t\tdefine ZEXPORTVA WINAPIV\n#\t\telse\n#\t\t\tdefine ZEXPORTVA FAR CDECL\n#\t\tendif\n#\tendif\n#endif\n\n#if defined (__BEOS__)\n#\tifdef ZLIB_DLL\n#\t\tifdef ZLIB_INTERNAL\n#\t\t\tdefine ZEXPORT\t __declspec(dllexport)\n#\t\t\tdefine ZEXPORTVA __declspec(dllexport)\n#\t\telse\n#\t\t\tdefine ZEXPORT\t __declspec(dllimport)\n#\t\t\tdefine ZEXPORTVA __declspec(dllimport)\n#\t\tendif\n#\tendif\n#endif\n\n#ifndef ZEXTERN\n#\tdefine ZEXTERN extern\n#endif\n#ifndef ZEXPORT\n#\tdefine ZEXPORT\n#endif\n#ifndef ZEXPORTVA\n#\tdefine ZEXPORTVA\n#endif\n\n#ifndef FAR\n#\tdefine FAR\n#endif\n\n#if !defined(__MACTYPES__)\ntypedef unsigned char\tByte;\t/* 8 bits */\n#endif\ntypedef unsigned int\t uInt;\t/* 16 bits or more */\ntypedef unsigned long\tuLong; /* 32 bits or more */\n\n#ifdef SMALL_MEDIUM\n\t /* Borland C/C++ and some old MSC versions ignore FAR inside typedef */\n#\tdefine Bytef Byte FAR\n#else\n\t typedef Byte\tFAR Bytef;\n#endif\ntypedef char\tFAR charf;\ntypedef int\t FAR intf;\ntypedef uInt\tFAR uIntf;\ntypedef uLong FAR uLongf;\n\n#ifdef STDC\n\t typedef void const *voidpc;\n\t typedef void FAR\t *voidpf;\n\t typedef void\t\t\t *voidp;\n#else\n\t typedef Byte const *voidpc;\n\t typedef Byte FAR\t *voidpf;\n\t typedef Byte\t\t\t *voidp;\n#endif\n\n/* ./configure may #define Z_U4 here */\n\n#if !defined(Z_U4) && !defined(Z_SOLO) && defined(STDC)\n#\tinclude <limits.h>\n#\tif (UINT_MAX == 0xffffffffUL)\n#\t\tdefine Z_U4 unsigned\n#\telse\n#\t\tif (ULONG_MAX == 0xffffffffUL)\n#\t\t\tdefine Z_U4 unsigned long\n#\t\telse\n#\t\t\tif (USHRT_MAX == 0xffffffffUL)\n#\t\t\t\tdefine Z_U4 unsigned short\n#\t\t\tendif\n#\t\tendif\n#\tendif\n#endif\n\n#ifdef Z_U4\n\t typedef Z_U4 z_crc_t;\n#else\n\t typedef unsigned long z_crc_t;\n#endif\n\n#ifdef HAVE_UNISTD_H\t\t/* may be set to #if 1 by ./configure */\n#\tdefine Z_HAVE_UNISTD_H\n#endif\n\n#ifdef HAVE_STDARG_H\t\t/* may be set to #if 1 by ./configure */\n#\tdefine Z_HAVE_STDARG_H\n#endif\n\n#ifdef STDC\n#\tifndef Z_SOLO\n#\t\tinclude <sys/types.h>\t\t\t/* for off_t */\n#\tendif\n#endif\n\n#ifdef _WIN32\n#\tinclude <stddef.h>\t\t\t\t\t /* for wchar_t */\n#endif\n\n/* a little trick to accommodate both \"#define _LARGEFILE64_SOURCE\" and\n * \"#define _LARGEFILE64_SOURCE 1\" as requesting 64-bit operations, (even\n * though the former does not conform to the LFS document), but considering\n * both \"#undef _LARGEFILE64_SOURCE\" and \"#define _LARGEFILE64_SOURCE 0\" as\n * equivalently requesting no 64-bit operations\n */\n#if defined(LARGEFILE64_SOURCE) && -_LARGEFILE64_SOURCE - -1 == 1\n#\tundef _LARGEFILE64_SOURCE\n#endif\n\n#if defined(__WATCOMC__) && !defined(Z_HAVE_UNISTD_H)\n#\tdefine Z_HAVE_UNISTD_H\n#endif\n#ifndef Z_SOLO\n#\tif defined(Z_HAVE_UNISTD_H) || defined(LARGEFILE64_SOURCE)\n#\t\tinclude <unistd.h>\t\t\t\t /* for SEEK_*, off_t, and _LFS64_LARGEFILE */\n#\t\tifdef VMS\n#\t\t\tinclude <unixio.h>\t\t\t /* for off_t */\n#\t\tendif\n#\t\tifndef z_off_t\n#\t\t\tdefine z_off_t off_t\n#\t\tendif\n#\tendif\n#endif\n\n#if defined(_LFS64_LARGEFILE) && _LFS64_LARGEFILE-0\n#\tdefine Z_LFS64\n#endif\n\n#if defined(_LARGEFILE64_SOURCE) && defined(Z_LFS64)\n#\tdefine Z_LARGE64\n#endif\n\n#if defined(_FILE_OFFSET_BITS) && _FILE_OFFSET_BITS-0 == 64 && defined(Z_LFS64)\n#\tdefine Z_WANT64\n#endif\n\n#if !defined(SEEK_SET) && !defined(Z_SOLO)\n#\tdefine SEEK_SET\t\t\t\t0\t\t\t /* Seek from beginning of file.\t*/\n#\tdefine SEEK_CUR\t\t\t\t1\t\t\t /* Seek from current position.\t*/\n#\tdefine SEEK_END\t\t\t\t2\t\t\t /* Set file pointer to EOF plus \"offset\" */\n#endif\n\n#ifndef z_off_t\n#\tdefine z_off_t long\n#endif\n\n#if !defined(_WIN32) && defined(Z_LARGE64)\n#\tdefine z_off64_t off64_t\n#else\n#\tif defined(_WIN32) && !defined(__GNUC__) && !defined(Z_SOLO)\n#\t\tdefine z_off64_t __int64\n#\telse\n#\t\tdefine z_off64_t z_off_t\n#\tendif\n#endif\n\n/* MVS linker does not support external names larger than 8 bytes */\n#if defined(__MVS__)\n\t#pragma map(deflateInit_,\"DEIN\")\n\t#pragma map(deflateInit2_,\"DEIN2\")\n\t#pragma map(deflateEnd,\"DEEND\")\n\t#pragma map(deflateBound,\"DEBND\")\n\t#pragma map(inflateInit_,\"ININ\")\n\t#pragma map(inflateInit2_,\"ININ2\")\n\t#pragma map(inflateEnd,\"INEND\")\n\t#pragma map(inflateSync,\"INSY\")\n\t#pragma map(inflateSetDictionary,\"INSEDI\")\n\t#pragma map(compressBound,\"CMBND\")\n\t#pragma map(inflate_table,\"INTABL\")\n\t#pragma map(inflate_fast,\"INFA\")\n\t#pragma map(inflate_copyright,\"INCOPY\")\n#endif\n\n#endif /* ZCONF_H */\n")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/zlib/zlib.pc.cmakein"  "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=@CMAKE_INSTALL_PREFIX@\nlibdir=@INSTALL_LIB_DIR@\nsharedlibdir=@INSTALL_LIB_DIR@\nincludedir=@INSTALL_INC_DIR@\n\nName: zlib\nDescription: zlib compression library\nVersion: @VERSION@\n\nRequires:\nLibs: -L\${libdir} -L\${sharedlibdir} -lz\nCflags: -I\${includedir}\n")
