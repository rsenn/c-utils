set(CMAKE_LEGACY_CYGWIN_WIN32 0)
cmake_minimum_required(VERSION 2.8)
set(CMAKE_WARN_VS8 OFF)

project(dirlist)

set(DIRLIST_VERSION 1.0)
set(CPACK_SOURCE_GENERATOR TXZ)
set(CPACK_SOURCE_IGNORE_FILES ${ignored_files})
set(CPACK_SOURCE_PACKAGE_FILE_NAME dirlist-${DIRLIST_VERSION})
set(CPACK_PACKAGE_NAME dirlist)
set(CPACK_RESOURCE_FILE_README ${PROJECT_SOURCE_DIR}/README)
set(CPACK_INSTALL_CMAKE_PROJECTS "${CMAKE_CURRENT_BINARY_DIR};${CMAKE_PROJECT_NAME};ALL;/")


set(BUILD_SHARED_LIBS FALSE)

if(NOT ENABLE_SHARED)
 set(BUILD_SHARED_LIBS FALSE)
else(NOT ENABLE_SHARED)
 set(BUILD_SHARED_LIBS TRUE)
endif(NOT ENABLE_SHARED)

include(FindPkgConfig)
include(${CMAKE_SOURCE_DIR}/FindZlib.cmake)
include(${CMAKE_SOURCE_DIR}/FindBZip2.cmake)
include(${CMAKE_SOURCE_DIR}/FindLibLZMA.cmake)
include(${CMAKE_SOURCE_DIR}/CheckInline.cmake)

 set(CompilerFlags
 CMAKE_C_FLAGS
 CMAKE_C_FLAGS_DEBUG
 CMAKE_C_FLAGS_RELEASE
 CMAKE_C_FLAGS_RELWITHDEBINFO
 CMAKE_C_FLAGS_MINSIZEREL
 )
foreach(CompilerFlag ${CompilerFlags})
 string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
 set(${CompilerFlag} "${${CompilerFlag}}" CACHE STRING "Compiler flags ${CompilerFlag}")
 message("${CompilerFlag}: ${${CompilerFlag}}")
endforeach()


if(LIBLZMA_FOUND)
 link_libraries(${LIBLZMA_LIBRARIES})
 include_directories(${LIBLZMA_INCLUDE_DIRS})
 add_definitions(-DHAVE_LIBLZMA=1
 -DLZMA_API_STATIC=1
 )
else()
 add_definitions(-DHAVE_LIBLZMA=0)
endif()

if(ZLIB_FOUND)
 link_libraries(${ZLIB_LIBRARIES})
 include_directories(${ZLIB_INCLUDE_DIRS})
 add_definitions(-DHAVE_ZLIB=1 #-DZLIB_DLL=1
 )
else()
 add_definitions(-DHAVE_ZLIB=0)
endif()
 link_libraries(${BZIP2_LIBRARIES})
 include_directories(${BZIP2_INCLUDE_DIR})
pkg_search_module(LIBBZ2 libbz2 bzip2)

if(LIBBZ2_FOUND OR BZIP2_FOUND)
 add_definitions(-DHAVE_LIBBZ2=1)
else()
 add_definitions(-DHAVE_LIBBZ2=0)
endif()

link_libraries(
 ${ZLIB_LIBRARY_RELEASE}
 ${BZIP2_LIBRARY_RELEASE}
 ${LIBLZMA_LIBRARY}
 )
add_definitions(-Dinline=__inline)

set(LIBSUBDIRS array binfmt buffer byte case cb cbmap charbuf dir dns elf env errmsg expand fmt gpio hmap http iarray io json list map mmap ndelay omf open path pe playlist range rdir scan sig slist socket str stralloc strarray strlist tai taia textbuf uint16 uint32 uint64 unix var vartab xml)

foreach(ARCHIVE ${LIBSUBDIRS})
 file(GLOB MODHEADERS lib/${ARCHIVE}.h lib/${ARCHIVE}_*.h)
 file(GLOB MODSOURCES lib/${ARCHIVE}/*.c)
 if(NOT MODSOURCES)
 file(GLOB MODSOURCES lib/${ARCHIVE}_*.c)
 endif()
 add_library("${ARCHIVE}" ${MODSOURCES} ${MODHEADERS})
 set_target_properties("${ARCHIVE}" PROPERTIES PREFIX "")
endforeach(ARCHIVE)

foreach(NETLIB dns http io ndelay socket)
 target_link_libraries(${NETLIB} wsock32)
endforeach()
target_link_libraries(unix ndelay)
target_link_libraries(array byte str)
target_link_libraries(binfmt mmap byte)
target_link_libraries(buffer byte fmt mmap open str)
target_link_libraries(cb str)
target_link_libraries(cbmap str)
target_link_libraries(dns byte case fmt io open socket str taia uint16 ${LIBIPHLPAPI})
target_link_libraries(dir)
target_link_libraries(errmsg str)
target_link_libraries(expand errmsg var unix)
target_link_libraries(elf byte str range mmap uint64 uint32)
target_link_libraries(fmt byte str uint64 uint32)
target_link_libraries(gpio)
target_link_libraries(hmap str)
target_link_libraries(http dns errmsg byte io scan socket str)
target_link_libraries(io iarray array byte fmt open taia ${LIBMSWSOCK})
target_link_libraries(json byte charbuf hmap scan)
target_link_libraries(map str)
target_link_libraries(mmap open scan ${LIBPSAPI})
target_link_libraries(open uint32)
target_link_libraries(path unix strlist)
target_link_libraries(pe uint64 uint32 uint16)
target_link_libraries(playlist byte fmt scan str xml)
target_link_libraries(rdir dir)
target_link_libraries(scan byte case str)
target_link_libraries(socket byte fmt ndelay scan uint16 ${LIBMSWSOCK})
target_link_libraries(str byte)	
target_link_libraries(stralloc byte fmt str)
target_link_libraries(strarray array byte str unix)
target_link_libraries(strlist stralloc)
target_link_libraries(taia tai)
target_link_libraries(textbuf byte playlist)
target_link_libraries(uint64 uint32)
target_link_libraries(xml array strlist hmap)
target_link_libraries(ndelay socket)


set(COMMON_LIBS unix strlist buffer array stralloc scan str byte mmap open fmt )
file(GLOB LIBHEADERS lib/*.h)
function(add_program PROG)
 unset(INCLUDES)
 foreach(DEP ${ARGN})
 list(FIND LIBSUBDIRS "${DEP}" I)
 if(I GREATER -1)
 list(APPEND INCLUDES "lib/${DEP}.h")
 endif(I GREATER -1)
 endforeach(DEP ${ARGN})
 #message("Program '${PROG}' dependencies: ${INCLUDES}")
 add_executable(${PROG} ${PROG}.c ${INCLUDES})
 target_link_libraries(${PROG} ${ARGN})
 install(TARGETS ${PROG} DESTINATION bin)
endfunction(add_program PROG)


add_program(binfmttest binfmt)
add_program(bsdiffcat array buffer byte errmsg uint32 uint64)
add_program(buffertest buffer mmap stralloc)
add_program(ccat buffer str unix)
add_program(compiler-wrapper buffer byte fmt str strlist dir)
add_program(count-depth buffer fmt)
add_program(decode-ls-lR buffer byte fmt io open str stralloc)
add_program(dnsip buffer dns errmsg socket ${LIBIPHLPAPI})
add_program(dnsname buffer dns errmsg ${LIBIPHLPAPI})
add_program(dnstest buffer dns errmsg ${LIBIPHLPAPI} ${LIBMSWSOCK})
add_program(eagle-gen-cmds xml strarray array buffer byte cb cbmap errmsg fmt hmap mmap scan str unix)
add_program(eagle-init-brd xml hmap scan str stralloc strlist)
add_program(eagle-to-circuit xml array buffer byte cb cbmap fmt hmap mmap scan str stralloc strlist)
add_program(elf64list elf mmap uint16 uint32 uint64)
add_program(elflist errmsg unix buffer elf mmap str)
add_program(elfwrsec buffer elf mmap)
add_program(genmakefile errmsg buffer hmap mmap path rdir scan slist str unix stralloc strarray strlist ${LIBSHLWAPI})
add_program(hexedit array buffer io errmsg mmap open path scan stralloc uint64 unix)
add_program(httptest errmsg buffer byte http io socket taia ${LIBMSWSOCK})
add_program(impgen buffer byte mmap open pe uint16 uint32)
add_program(jsontest byte charbuf fmt hmap json mmap open stralloc)
add_program(list-r unix dir array buffer fmt open str stralloc uint64 ${LIBADVAPI32})
add_program(macho32list mmap uint32)
add_program(mediathek-list buffer byte fmt http scan slist str unix strarray strlist stralloc)
add_program(mediathek-parser array buffer byte open str unix stralloc strlist)
add_program(ntldd pe strlist buffer byte path str unix stralloc uint64)
add_program(opensearch-dump buffer stralloc xml)
add_program(pathtool buffer errmsg path stralloc strlist unix)
add_program(pelist errmsg buffer mmap pe str unix)
add_program(omflist errmsg buffer omf mmap str unix)
add_program(pkgcfg buffer byte cbmap dir env errmsg path slist str unix stralloc strarray strlist)
add_program(plsconv buffer byte open playlist str unix)
add_program(rdir-test buffer rdir)
add_program(reg2cmd buffer byte fmt open scan str stralloc uint64)
add_program(regfilter buffer byte fmt open scan str stralloc uint64)
add_program(sln buffer byte errmsg path)
add_program(strarraytest buffer mmap stralloc strarray unix)
add_program(torrent-progress buffer io mmap open stralloc uint64)
add_program(xmlpp buffer hmap io stralloc xml)
add_program(xmltest buffer byte fmt hmap stralloc xml)
add_program(xmltest2 buffer byte fmt hmap stralloc xml)
add_program(xmltest3 buffer byte fmt hmap stralloc xml)
add_program(xmltest4 array buffer byte cb cbmap fmt hmap mmap scan str stralloc strlist xml)
add_program(ziptest buffer str unix)


add_subdirectory(tests)
add_subdirectory(examples)
