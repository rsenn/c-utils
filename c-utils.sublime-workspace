{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"IP",
				"IPV6_V6ONLY"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "   Ⓜ  FATAL … — macro object\n   Ⓜ  MAXUDP … — macro object\n   Ⓜ  MAXTCP … — macro object\n—Ⓒ– tcpclient { … } ; — type\n—Ⓒ– udpclient { … } ; — type\n—Ⓕ– dnscache_okclient ( ) { … } — function\n—Ⓕ– dnscache_droproot ( ) { … } — function\n—Ⓕ– packetquery ( ) { … } — function\n—Ⓕ– udp_drop ( ) { … } — function\n—Ⓕ– udp_respond ( ) { … } — function\n—Ⓕ– udp_new ( ) { … } — function\n—Ⓕ– tcp_free ( ) { … } — function\n—Ⓕ– tcp_timeout ( ) { … } — function\n—Ⓕ– tcp_close ( ) { … } — function\n—Ⓕ– tcp_drop ( ) { … } — function\n—Ⓕ– tcp_respond ( ) { … } — function\n—Ⓕ– tcp_rw ( ) { … } — function\n—Ⓕ– tcp_new ( ) { … } — function\n—Ⓕ– dnscache_run ( ) { … } — function\n—Ⓕ– main ( ) { … } — function",
			"settings":
			{
				"buffer_size": 683,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			}
		},
		{
			"contents": "#include \"lib/env.h\"\n#include \"lib/scan.h\"\n#include \"lib/errmsg.h\"\n#include \"lib/ip4.h\"\n#include \"lib/ip6.h\"\n#include \"lib/uint16.h\"\n#include \"lib/uint64.h\"\n#include \"lib/socket.h\"\n#include \"lib/dns.h\"\n#include \"lib/taia.h\"\n#include \"lib/byte.h\"\n#include \"lib/fmt.h\"\n#include \"lib/iopause.h\"\n#include \"lib/alloc.h\"\n#include \"lib/ndelay.h\"\n#include \"lib/str.h\"\n\n#include <stdbool.h>\n#include <unistd.h>\n#include <sys/stat.h>\n\n#include \"response.h\"\n#include \"roots.h\"\n#include \"query.h\"\n#include \"cache.h\"\n#include \"log.h\"\n\n#define FATAL \"dnscache: fatal: \"\n\nstatic char fn[3 + IP6_FMT];\n\nstatic char sendaddr[16], bindaddr[16];\nstatic uint32 bindscope;\nstatic char buf[1024];\nuint64 numqueries = 0;\n\nstatic int udp53, tcp53;\n\n#define MAXUDP 200\n#define MAXTCP 20\n\niopause_fd io[3 + MAXUDP + MAXTCP];\niopause_fd *udp53io, *tcp53io;\n\nstruct tcpclient {\n  struct query q;\n  struct taia start;\n  struct taia timeout;\n  uint64 active; /* query number or 1, if active; otherwise 0 */\n  iopause_fd* io;\n  char ip[16]; /* send response to this address */\n  uint16 port; /* send response to this port */\n  uint32 scope_id;\n  char id[2];\n  int tcp; /* open TCP socket, if active */\n  int state;\n  char* buf; /* 0, or dynamically allocated of length len */\n  unsigned int len;\n  unsigned int pos;\n};\n\nstruct udpclient {\n  struct query q;\n  struct taia start;\n  uint64 active; /* query number, if active; otherwise 0 */\n  iopause_fd* io;\n  char ip[16];\n  uint16 port;\n  uint32 scope_id;\n  char id[2];\n};\n\nstatic struct udpclient u[MAXUDP];\nint uactive = 0;\n\nstatic struct tcpclient t[MAXTCP];\nint tactive = 0;\n\nunion {\n  char u8[128];\n  uint32 u32[32];\n} seed;\n\nint\ndnscache_okclient(char ip[16], bool ip6) {\n  struct stat st;\n  int i;\n\n  if(ip6 && ip6_isv4mapped(ip)) {\n    if(dnscache_okclient(&ip[12], false))\n      return 1;\n  }\n\n  fn[0] = 'i';\n  fn[1] = 'p';\n  fn[2] = '/';\n  fn[3 + (ip6 ? fmt_ip6 : fmt_ip4)(fn + 3, ip)] = 0;\n\n  for(;;) {\n    if(stat(fn, &st) == 0)\n      return 1;\n    /* treat temporary error as rejection */\n    i = str_rchr(fn, '.');\n    if(!fn[i])\n      return 0;\n    fn[i] = 0;\n  }\n}\n\nvoid\ndnscache_droproot(const char* fatal) {\n  const char* x;\n  unsigned long id;\n\n  x = env_get(\"ROOT\");\n  if(!x)\n    die(111, fatal, \"$ROOT not set\");\n  if(chdir(x) == -1)\n    diesys(111, fatal, \"unable to chdir to \", x, \": \");\n  if(chroot(\".\") == -1)\n    diesys(111, fatal, \"unable to chroot to \", x, \": \");\n\n  x = env_get(\"GID\");\n  if(!x)\n    die(111, fatal, \"$GID not set\");\n  scan_ulong(x, &id);\n  if(setgid((int)id) == -1)\n    diesys(111, fatal, \"unable to setgid: \");\n\n  x = env_get(\"UID\");\n  if(!x)\n    die(111, fatal, \"$UID not set\");\n  scan_ulong(x, &id);\n  if(setuid((int)id) == -1)\n    diesys(111, fatal, \"unable to setuid: \");\n}\n\nstatic int\npacketquery(char* buf, unsigned int len, char** q, char qtype[2], char qclass[2], char id[2]) {\n  unsigned int pos;\n  char header[12];\n\n  errno = EPROTO;\n  pos = dns_packet_copy(buf, len, 0, header, 12);\n  if(!pos)\n    return 0;\n  if(header[2] & 128)\n    return 0; /* must not respond to responses */\n  if(!(header[2] & 1))\n    return 0; /* do not respond to non-recursive queries */\n  if(header[2] & 120)\n    return 0;\n  if(header[2] & 2)\n    return 0;\n  if(byte_diff(header + 4, 2, \"\\0\\1\"))\n    return 0;\n\n  pos = dns_packet_getname(buf, len, pos, q);\n  if(!pos)\n    return 0;\n  pos = dns_packet_copy(buf, len, pos, qtype, 2);\n  if(!pos)\n    return 0;\n  pos = dns_packet_copy(buf, len, pos, qclass, 2);\n  if(!pos)\n    return 0;\n  if(byte_diff(qclass, 2, DNS_C_IN) && byte_diff(qclass, 2, DNS_C_ANY))\n    return 0;\n\n  byte_copy(id, 2, header);\n  return 1;\n}\n\nvoid\nudp_drop(int j) {\n  if(!u[j].active)\n    return;\n  log_querydrop(&u[j].active);\n  u[j].active = 0;\n  --uactive;\n}\n\nvoid\nudp_respond(int j) {\n  response* resp;\n  if(!u[j].active)\n    return;\n  resp = &u[j].q.response;\n  response_id(resp, u[j].id);\n  if(resp->pos > 512)\n    response_tc(resp);\n\n  response_send(resp, udp53, u[j].ip, u[j].port);\n  log_querydone(&u[j].active, u[j].ip, u[j].port, udp53, u[j].id, resp->pos);\n\n  u[j].active = 0;\n  --uactive;\n}\n\nvoid\nudp_new(void) {\n  int j, i, len;\n  struct udpclient* x;\n  char *q = 0, qtype[2], qclass[2];\n\n  for(j = 0; j < MAXUDP; ++j)\n    if(!u[j].active)\n      break;\n\n  if(j >= MAXUDP) {\n    j = 0;\n    for(i = 1; i < MAXUDP; ++i)\n      if(taia_less(&u[i].start, &u[j].start))\n        j = i;\n    errno = ETIMEDOUT;\n    udp_drop(j);\n  }\n\n  x = u + j;\n  taia_now(&x->start);\n\n  if((len = socket_recv6(udp53, buf, sizeof buf, x->ip, &x->port, &x->scope_id)) == -1)\n    return;\n  if(len >= sizeof buf)\n    return;\n  if(x->port < 1024)\n    if(x->port != 53)\n      return;\n  if(!dnscache_okclient(x->ip, true))\n    return;\n\n  if(!packetquery(buf, len, &q, qtype, qclass, x->id))\n    return;\n\n  x->active = ++numqueries;\n  ++uactive;\n  log_query(&x->active, x->ip, x->port, udp53, x->id, q, qtype);\n\n  switch(query_start(&x->q, q, qtype, qclass, sendaddr)) {\n    case -1: udp_drop(j); return;\n    case 1: udp_respond(j);\n  }\n}\n\n/*\nstate 1: buf 0; normal state at beginning of TCP connection\nstate 2: buf 0; have read 1 byte of query packet length into len\nstate 3: buf allocated; have read pos bytes of buf\nstate 0: buf 0; handling query in q\nstate -1: buf allocated; have written pos bytes\n*/\n\nvoid\ntcp_free(int j) {\n  if(!t[j].buf)\n    return;\n  alloc_free(t[j].buf);\n  t[j].buf = 0;\n}\n\nvoid\ntcp_timeout(int j) {\n  struct taia now;\n  if(!t[j].active)\n    return;\n  taia_now(&now);\n  taia_uint(&t[j].timeout, 10);\n  taia_add(&t[j].timeout, &t[j].timeout, &now);\n}\n\nvoid\ntcp_close(int j) {\n  if(!t[j].active)\n    return;\n  tcp_free(j);\n  errno = 0;\n  log_tcpclose(t[j].ip, t[j].port, t[j].tcp);\n  close(t[j].tcp);\n\n  t[j].active = 0;\n  --tactive;\n}\n\nvoid\ntcp_drop(int j) {\n  log_querydrop(&t[j].active);\n  errno = EPIPE;\n  tcp_close(j);\n}\n\nvoid\ntcp_respond(int j) {\n  response* resp;\n  if(!t[j].active)\n    return;\n  resp = &t[j].q.response;\n  log_querydone(&t[j].active, t[j].ip, t[j].port, t[j].tcp, t[j].id, resp->pos);\n  response_id(resp, t[j].id);\n  t[j].len = resp->pos + 2;\n  tcp_free(j);\n  t[j].buf = alloc(resp->pos + 2);\n  if(!t[j].buf) {\n    tcp_close(j);\n    return;\n  }\n  uint16_pack_big(t[j].buf, resp->pos);\n  byte_copy(t[j].buf + 2, resp->pos, resp->buf);\n  t[j].pos = 0;\n  t[j].state = -1;\n}\n\nvoid\ntcp_rw(int j) {\n  struct tcpclient* x;\n  char ch;\n  static char* q = 0;\n  char qtype[2];\n  char qclass[2];\n  int r;\n\n  x = t + j;\n  if(x->state == -1) {\n    r = write(x->tcp, x->buf + x->pos, x->len - x->pos);\n    if(r <= 0) {\n      tcp_close(j);\n      return;\n    }\n    x->pos += r;\n    if(x->pos == x->len) {\n      tcp_free(j);\n      x->state = 1; /* could drop connection immediately */\n    }\n    return;\n  }\n\n  r = read(x->tcp, &ch, 1);\n  if(r == 0) {\n    errno = EPIPE;\n    tcp_close(j);\n    return;\n  }\n  if(r < 0) {\n    tcp_close(j);\n    return;\n  }\n\n  if(x->state == 1) {\n    x->len = (unsigned char)ch;\n    x->len <<= 8;\n    x->state = 2;\n    return;\n  }\n  if(x->state == 2) {\n    x->len += (unsigned char)ch;\n    if(!x->len) {\n      errno = EPROTO;\n      tcp_close(j);\n      return;\n    }\n    x->buf = alloc(x->len);\n    if(!x->buf) {\n      tcp_close(j);\n      return;\n    }\n    x->pos = 0;\n    x->state = 3;\n    return;\n  }\n\n  if(x->state != 3)\n    return; /* impossible */\n\n  x->buf[x->pos++] = ch;\n  if(x->pos < x->len)\n    return;\n\n  if(!packetquery(x->buf, x->len, &q, qtype, qclass, x->id)) {\n    tcp_close(j);\n    return;\n  }\n\n  x->active = ++numqueries;\n  log_query(&x->active, x->ip, x->port, x->tcp, x->id, q, qtype);\n  log_query(&x->active, x->ip, x->port, x->tcp, x->id, q, qtype);\n  switch(query_start(&x->q, q, qtype, qclass, sendaddr)) {\n    case -1: tcp_drop(j); return;\n    case 1: tcp_respond(j); return;\n  }\n  tcp_free(j);\n  x->state = 0;\n}\n\nvoid\ntcp_new(void) {\n  int i;\n  int j;\n  struct tcpclient* x;\n\n  for(j = 0; j < MAXTCP; ++j)\n    if(!t[j].active)\n      break;\n\n  if(j >= MAXTCP) {\n    j = 0;\n    for(i = 1; i < MAXTCP; ++i)\n      if(taia_less(&t[i].start, &t[j].start))\n        j = i;\n    errno = ETIMEDOUT;\n    if(t[j].state == 0)\n      tcp_drop(j);\n    else\n      tcp_close(j);\n  }\n\n  x = t + j;\n  taia_now(&x->start);\n\n  x->tcp = socket_accept6(tcp53, x->ip, &x->port, &x->scope_id);\n  if(x->tcp == -1)\n    return;\n  if(x->port < 1024)\n    if(x->port != 53) {\n      close(x->tcp);\n      return;\n    }\n  if(!dnscache_okclient(x->ip, true)) {\n    close(x->tcp);\n    return;\n  }\n  if(ndelay_on(x->tcp) == -1) {\n    close(x->tcp);\n    return;\n  } /* Linux bug */\n\n  x->active = 1;\n  ++tactive;\n  x->state = 1;\n  tcp_timeout(j);\n\n  log_tcpopen(x->ip, x->port, x->tcp);\n}\n\nvoid\ndnscache_run(void) {\n  int j;\n  struct taia deadline;\n  struct taia stamp;\n  int iolen;\n  int r;\n\n  for(;;) {\n    taia_now(&stamp);\n    taia_uint(&deadline, 120);\n    taia_add(&deadline, &deadline, &stamp);\n\n    iolen = 0;\n\n    udp53io = io + iolen++;\n    udp53io->fd = udp53;\n    udp53io->events = IOPAUSE_READ;\n\n    tcp53io = io + iolen++;\n    tcp53io->fd = tcp53;\n    tcp53io->events = IOPAUSE_READ;\n\n    for(j = 0; j < MAXUDP; ++j)\n      if(u[j].active) {\n        u[j].io = io + iolen++;\n        query_io(&u[j].q, u[j].io, &deadline);\n      }\n\n    for(j = 0; j < MAXTCP; ++j)\n      if(t[j].active) {\n        t[j].io = io + iolen++;\n        if(t[j].state == 0)\n          query_io(&t[j].q, t[j].io, &deadline);\n        else {\n          if(taia_less(&t[j].timeout, &deadline))\n            deadline = t[j].timeout;\n          t[j].io->fd = t[j].tcp;\n          t[j].io->events = (t[j].state > 0) ? IOPAUSE_READ : IOPAUSE_WRITE;\n        }\n      }\n\n    iopause(io, iolen, &deadline, &stamp);\n\n    for(j = 0; j < MAXUDP; ++j)\n      if(u[j].active) {\n        r = query_get(&u[j].q, u[j].io, &stamp);\n        if(r == -1)\n          udp_drop(j);\n        if(r == 1)\n          udp_respond(j);\n      }\n\n    for(j = 0; j < MAXTCP; ++j)\n      if(t[j].active) {\n        if(t[j].io->revents)\n          tcp_timeout(j);\n        if(t[j].state == 0) {\n          r = query_get(&t[j].q, t[j].io, &stamp);\n          if(r == -1)\n            tcp_drop(j);\n          if(r == 1)\n            tcp_respond(j);\n        } else if(t[j].io->revents || taia_less(&t[j].timeout, &stamp))\n          tcp_rw(j);\n      }\n\n    if(udp53io)\n      if(udp53io->revents)\n        udp_new();\n\n    if(tcp53io)\n      if(tcp53io->revents)\n        tcp_new();\n  }\n}\n\nint\nmain(int argc, char* argv[]) {\n  const char *x, *y;\n  unsigned long cachesize;\n  int i;\n  int v6only_prev;\n\n  uint32_seed(NULL, 0);\n\n  for(i = 1; i < argc; i++) env_put(argv[i]);\n\n  x = env_get(\"IP\");\n  if(!x)\n    die(111, FATAL, \"$IP not set\");\n  if(!scan_ip6if(x, bindaddr, &bindscope))\n    die(111, FATAL, \"unable to parse IP address \", x);\n\n  udp53 = socket_udp6();\n  /// v6only_prev = socket_v6only(udp53, 0);\n\n  if(udp53 == -1)\n    diesys(111, FATAL, \"unable to create UDP socket: \");\n  if(socket_bind6_reuse(udp53, bindaddr, 53, bindscope) == -1)\n    diesys(111, FATAL, \"unable to bind UDP socket: \");\n\n  tcp53 = socket_tcp6();\n  // v6only_prev = socket_v6only(udp53, 0);\n\n  if(tcp53 == -1)\n    diesys(111, FATAL, \"unable to create TCP socket: \");\n  if(socket_bind6_reuse(tcp53, bindaddr, 53, bindscope) == -1)\n    diesys(111, FATAL, \"unable to bind TCP socket: \");\n\n  dnscache_droproot(FATAL);\n\n  socket_tryreservein(udp53, 131072);\n\n  for(i = 0; i < 32; i++) seed.u32[i] = uint32_random();\n\n  dns_random_init(seed.u8);\n\n  x = env_get(\"IPSEND\");\n  if(!x)\n    die(111, FATAL, \"$IPSEND not set\");\n  if(!scan_ip6(x, sendaddr))\n    die(111, FATAL, \"unable to parse IP address \", x);\n\n  x = env_get(\"CACHESIZE\");\n  if(!x)\n    die(111, FATAL, \"$CACHESIZE not set\");\n  scan_ulong(x, &cachesize);\n\n  y = env_get(\"CACHEFILE\");\n  if(y) {\n    if(!cache_open(y, cachesize))\n      diesys(111, FATAL, \"unable to open cache file \", y);\n\n  } else {\n    if(!cache_init(cachesize))\n      die(111, FATAL, \"not enough memory for cache of size \", x);\n  }\n\n  if(env_get(\"HIDETTL\"))\n    response_hidettl = 1;\n\n  if(env_get(\"FORWARDONLY\"))\n    query_forwardonly();\n\n  if(!roots_init())\n    diesys(111, FATAL, \"unable to read servers: \");\n\n  if(socket_listen(tcp53, 20) == -1)\n    diesys(111, FATAL, \"unable to listen on TCP socket: \");\n\n  log_startup();\n  dnscache_run();\n}\n",
			"file": "dnscache.c",
			"file_size": 12167,
			"file_write_time": 132480129231217408,
			"settings":
			{
				"buffer_size": 12167,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 3108 files for \"AAAA\" (regex, case sensitive)\n\n/home/roman/Sources/c-utils/lib/dns.h:\n   25  #define DNS_T_SIG \"\\0\\30\"\n   26  #define DNS_T_KEY \"\\0\\31\"\n   27: #define DNS_T_AAAA \"\\0\\34\"\n   28  #define DNS_T_AXFR \"\\0\\374\"\n   29  #define DNS_T_ANY \"\\0\\377\"\n\n/home/roman/Sources/c-utils/lib/dns/dns_ip6.c:\n   30        return -1;\n   31      uint16_unpack_big(header + 8, &datalen);\n   32:     if(byte_equal(header, 2, DNS_T_AAAA)) {\n   33        if(byte_equal(header + 2, 2, DNS_C_IN))\n   34          if(datalen == 16) {\n   ..\n  106      if(!stralloc_copys(out, \"\"))\n  107        return -1;\n  108:     if(dns_resolve(q, DNS_T_AAAA) != -1)\n  109        if(dns_ip6_packet_add(out, dns_resolve_tx.packet, dns_resolve_tx.packetlen) != -1) {\n  110          dns_transmit_free(&dns_resolve_tx);\n\n/home/roman/Sources/c-utils/lib/dns.h:\n   25  #define DNS_T_SIG \"\\0\\30\"\n   26  #define DNS_T_KEY \"\\0\\31\"\n   27: #define DNS_T_AAAA \"\\0\\34\"\n   28  #define DNS_T_AXFR \"\\0\\374\"\n   29  #define DNS_T_ANY \"\\0\\377\"\n\n/home/roman/Sources/c-utils/lib/dns/dns_ip6.c:\n   30        return -1;\n   31      uint16_unpack_big(header + 8, &datalen);\n   32:     if(byte_equal(header, 2, DNS_T_AAAA)) {\n   33        if(byte_equal(header + 2, 2, DNS_C_IN))\n   34          if(datalen == 16) {\n   ..\n  106      if(!stralloc_copys(out, \"\"))\n  107        return -1;\n  108:     if(dns_resolve(q, DNS_T_AAAA) != -1)\n  109        if(dns_ip6_packet_add(out, dns_resolve_tx.packet, dns_resolve_tx.packetlen) != -1) {\n  110          dns_transmit_free(&dns_resolve_tx);\n\n/home/roman/Sources/c-utils/libc-resolv-override.h:\n   55  #define DNS_T_SIG \"\\0\\30\"\n   56  #define DNS_T_KEY \"\\0\\31\"\n   57: #define DNS_T_AAAA \"\\0\\34\"\n   58  #define DNS_T_AXFR \"\\0\\374\"\n   59  #define DNS_T_ANY \"\\0\\377\"\n\n/home/roman/Sources/c-utils/log.c:\n  155    else if(byte_equal(type, 2, DNS_T_KEY))\n  156      log_string(\"key\");\n  157:   else if(byte_equal(type, 2, DNS_T_AAAA))\n  158      log_string(\"aaaa\");\n  159    else if(byte_equal(type, 2, DNS_T_AXFR))\n  ...\n  301    if(byte_equal(type, 2, DNS_T_A)) {\n  302      log_iplist(cached, cachedlen, 4);\n  303:   } else if(byte_equal(type, 2, DNS_T_AAAA)) {\n  304      log_iplist(cached, cachedlen, 16);\n  305    } else if(byte_equal(type, 2, DNS_T_MX)) {\n\n/home/roman/Sources/c-utils/wapm_packages/_/clang@0.1.0/sysroot/include/arpa/nameser.h:\n  422  #define\tT_PX\t\tns_t_px\n  423  #define\tT_GPOS\t\tns_t_gpos\n  424: #define\tT_AAAA\t\tns_t_aaaa\n  425  #define\tT_LOC\t\tns_t_loc\n  426  #define\tT_NXT\t\tns_t_nxt\n\n/home/roman/Sources/c-utils/wapm_packages/_/clang@0.1.0/sysroot/share/wasm32-wasi/predefined-macros.txt:\n 2334  #define T_A ns_t_a\n 2335  #define T_A6 ns_t_a6\n 2336: #define T_AAAA ns_t_aaaa\n 2337  #define T_AFSDB ns_t_afsdb\n 2338  #define T_ANY ns_t_any\n\n/home/roman/Sources/c-utils/wapm_packages/syrusakbary/clang@0.0.1/sysroot2/include/arpa/nameser.h:\n  422  #define\tT_PX\t\tns_t_px\n  423  #define\tT_GPOS\t\tns_t_gpos\n  424: #define\tT_AAAA\t\tns_t_aaaa\n  425  #define\tT_LOC\t\tns_t_loc\n  426  #define\tT_NXT\t\tns_t_nxt\n\n12 matches across 9 files\n\n\nSearching 3108 files for \"\"rr\" (regex, case sensitive)\n\n/home/roman/Sources/c-utils/log.c:\n  419    int i;\n  420  \n  421:   log_string(\"rr \");\n  422    log_ip(server, 4);\n  423    log_space();\n  ...\n  441  void\n  442  log_rrns(const char server[], const char* q, const char* data, unsigned int ttl) {\n  443:   log_string(\"rr \");\n  444    log_ip(server, 4);\n  445    log_space();\n  ...\n  454  void\n  455  log_rrcname(const char server[], const char* q, const char* data, unsigned int ttl) {\n  456:   log_string(\"rr \");\n  457    log_ip(server, 4);\n  458    log_space();\n  ...\n  467  void\n  468  log_rrptr(const char server[], const char* q, const char* data, unsigned int ttl) {\n  469:   log_string(\"rr \");\n  470    log_ip(server, 4);\n  471    log_space();\n  ...\n  482    uint16 u;\n  483  \n  484:   log_string(\"rr \");\n  485    log_ip(server, 4);\n  486    log_space();\n  ...\n  501    int i;\n  502  \n  503:   log_string(\"rr \");\n  504    log_ip(server, 4);\n  505    log_space();\n\n6 matches in 1 file\n\n\nSearching 3108 files for \"log_rr\" (regex, case sensitive)\n\n/home/roman/Sources/c-utils/log.c:\n  416  \n  417  void\n  418: log_rr(const char server[], const char* q, const char type[2], const char* buf, unsigned int len, unsigned int ttl) {\n  419    int i;\n  420  \n  ...\n  440  \n  441  void\n  442: log_rrns(const char server[], const char* q, const char* data, unsigned int ttl) {\n  443    log_string(\"rr \");\n  444    log_ip(server, 4);\n  ...\n  453  \n  454  void\n  455: log_rrcname(const char server[], const char* q, const char* data, unsigned int ttl) {\n  456    log_string(\"rr \");\n  457    log_ip(server, 4);\n  ...\n  466  \n  467  void\n  468: log_rrptr(const char server[], const char* q, const char* data, unsigned int ttl) {\n  469    log_string(\"rr \");\n  470    log_ip(server, 4);\n  ...\n  479  \n  480  void\n  481: log_rrmx(const char server[], const char* q, const char* mx, const char pref[2], unsigned int ttl) {\n  482    uint16 u;\n  483  \n  ...\n  497  \n  498  void\n  499: log_rrsoa(const char server[], const char* q, const char* n1, const char* n2, const char misc[20], unsigned int ttl) {\n  500    uint32 u;\n  501    int i;\n\n/home/roman/Sources/c-utils/log.h:\n   32  void log_lame(const char[], const char*, const char*);\n   33  void log_servfail(const char*);\n   34: void log_rr(const char[], const char*, const char[2], const char*, unsigned int, unsigned int);\n   35: void log_rrns(const char[], const char*, const char*, unsigned int);\n   36: void log_rrcname(const char[], const char*, const char*, unsigned int);\n   37: void log_rrptr(const char[], const char*, const char*, unsigned int);\n   38: void log_rrmx(const char[], const char*, const char*, const char[2], unsigned int);\n   39: void log_rrsoa(const char[], const char*, const char*, const char*, const char[20], unsigned int);\n   40  void log_stats(void);\n   41  \n\n/home/roman/Sources/c-utils/query.c:\n  742            goto fail;\n  743          if(records[i] < posauthority)\n  744:           log_rrsoa(whichserver, t1, t2, t3, misc, ttl);\n  745          ++i;\n  746        }\n  ...\n  752        if(!pos)\n  753          goto fail;\n  754:       log_rrcname(whichserver, t1, t2, ttl);\n  755        cachegeneric(DNS_T_CNAME, t1, t2, dns_domain_length(t2), ttl);\n  756      } else if(byte_equal(type, 2, DNS_T_PTR)) {\n  ...\n  763          if(!pos)\n  764            goto fail;\n  765:         log_rrptr(whichserver, t1, t2, ttl);\n  766          save_data(t2, dns_domain_length(t2));\n  767          ++i;\n  ...\n  777          if(!pos)\n  778            goto fail;\n  779:         log_rrns(whichserver, t1, t2, ttl);\n  780          save_data(t2, dns_domain_length(t2));\n  781          ++i;\n  ...\n  794          if(!pos)\n  795            goto fail;\n  796:         log_rrmx(whichserver, t1, t2, misc, ttl);\n  797          save_data(misc, 2);\n  798          save_data(t2, dns_domain_length(t2));\n  ...\n  814              goto fail;\n  815            save_data(header, 4);\n  816:           log_rr(whichserver, t1, DNS_T_A, header, 4, ttl);\n  817          }\n  818          ++i;\n  ...\n  833          save_data(header + 8, 2);\n  834          save_data(buf + pos, datalen);\n  835:         log_rr(whichserver, t1, type, buf + pos, datalen, ttl);\n  836          ++i;\n  837        }\n\n19 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 7291,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/home/roman/Sources/c-utils/log.c",
			"settings":
			{
				"buffer_size": 10296,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cache.c",
			"settings":
			{
				"buffer_size": 6609,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/errmsg.h",
			"settings":
			{
				"buffer_size": 1924,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/errmsg/errmsg_warn.c",
			"settings":
			{
				"buffer_size": 237,
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 66776,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pkgcfg.c",
			"settings":
			{
				"buffer_size": 30851,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tinyproxy.c",
			"settings":
			{
				"buffer_size": 33260,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/stralloc/stralloc_fmt.c",
			"settings":
			{
				"buffer_size": 353,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/fmt/fmt_escapecharshell.c",
			"settings":
			{
				"buffer_size": 1083,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/strarray/strarray_from_argv.c",
			"settings":
			{
				"buffer_size": 214,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cfg.sh",
			"settings":
			{
				"buffer_size": 11755,
				"line_ending": "Unix"
			}
		},
		{
			"file": "response.c",
			"settings":
			{
				"buffer_size": 3254,
				"line_ending": "Unix"
			}
		},
		{
			"file": "query.c",
			"settings":
			{
				"buffer_size": 28131,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"svgo",
				"SVGO: Prettify SVG"
			],
			[
				"ctag",
				"CTags: Rebuild Tags"
			],
			[
				"rebuild",
				"CTags: Rebuild Tags"
			],
			[
				"ctags",
				"CTags: Rebuild Tags"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"tags",
				"CTags: Rebuild Tags"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"remove",
				"Package Control: Remove Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 205.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Dokumente/Sources/c-utils",
		"/home/roman/Dokumente/Sources/c-utils/ip",
		"/home/roman/Dokumente/Sources/c-utils/lib",
		"/home/roman/Dokumente/Sources/c-utils/lib/buffer",
		"/home/roman/Dokumente/Sources/c-utils/lib/fmt",
		"/home/roman/Dokumente/Sources/c-utils/lib/stralloc"
	],
	"file_history":
	[
		"/home/roman/Dokumente/Sources/c-utils/tryselect.c",
		"/home/roman/Dokumente/Sources/c-utils/genmakefile.c",
		"/home/roman/Dokumente/Sources/c-utils/tinyproxy.c",
		"/home/roman/Dokumente/Sources/c-utils/list-r.c",
		"/home/roman/Dokumente/Sources/c-utils/debug.h",
		"/home/roman/Dokumente/Sources/c-utils/CMakeLists.txt",
		"/home/roman/Dokumente/Sources/c-utils/lib/io/io_wantread.c",
		"/home/roman/Dokumente/Sources/c-utils/logserial.c",
		"/home/roman/Dokumente/Sources/c-utils/debug.c",
		"/home/roman/Dokumente/Sources/c-utils/genmakefile.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/path.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/fmt.h",
		"/home/roman/Sources/c-utils/lib/stralloc/buffer_put_escaped.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/stralloc/buffer_puts_escaped.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/buffer.h",
		"/home/roman/Sources/c-utils/debug.h",
		"/home/roman/Sources/c-utils/genmakefile.c",
		"/home/roman/Dokumente/Sources/c-utils/response.c",
		"/home/roman/Dokumente/Sources/c-utils/response.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/io/io_dump.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/io/io_waituntil2.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/iarray/iarray_get.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/iarray/iarray_allocate.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/iarray/iarray_free.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/iarray/iarray_length.c",
		"/home/roman/Sources/c-utils/lib/io/io_fd.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/socket/socket_getifname.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/io/io_wantwrite.c",
		"/home/roman/Sources/c-utils/cc-wrap.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/io.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/io/io_nonblock.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/buffer/buffer_get.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/buffer/buffer_putc.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/io_internal.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/buffer/buffer_stubborn.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/buffer/buffer_flush.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/buffer/buffer_init_free.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/buffer/buffer_write.c",
		"/home/roman/Dokumente/Sources/plot-cv/firmware/connect.sh",
		"/home/roman/Dokumente/Sources/c-utils/lib/socket/socket_getifidx.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/process/process_create.c",
		"/home/roman/Sources/c-utils/lib/socket_internal.h",
		"/home/roman/Dokumente/Sources/c-utils/cofflist.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/coff/coff_line_numbers.c",
		"/home/roman/Dokumente/Sources/c-utils/scripts/gen-pro-template.sh",
		"/home/roman/Dokumente/Sources/c-utils/cfg.sh",
		"/home/roman/Sources/c-utils/ar-wrap.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/wait.h",
		"/home/roman/Dokumente/Sources/c-utils/pkgcfg.c",
		"/home/roman/Downloads/gcode (4).gcode",
		"/home/roman/Dokumente/Sources/c-utils/lib/omf.h",
		"/home/roman/Dokumente/Sources/c-utils/omflist.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/omf/omf_record_next.c",
		"/home/roman/Dokumente/Sources/shish/cfg-cmake.sh",
		"/home/roman/Dokumente/Sources/c-utils/lib/process.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/wait/wait_pid.c",
		"/home/roman/Sources/c-utils/lib/socket/socket_getifidx.c",
		"/home/roman/Dokumente/Sources/c-utils/omf.h",
		"/home/roman/Dokumente/Sources/c-utils/ar-wrap.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/str.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_find.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_findb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/unix/wordexp.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/typedefs.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/dir/dir_open.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/dir/dir_type.c",
		"/home/roman/Sources/c-utils/lib/dir_internal.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/dir_internal.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/dir/dir_time.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/process/process_wait.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/unix/glob.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/wait/wait_nohang.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/wait/waitn_reap.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/wait/wait_pid_nohang.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/wait/waitn.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/dir.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/unix/pipe2.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_chrs.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_chr.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/stralloc/stralloc_replace.c",
		"/home/roman/Dokumente/Sources/c-utils/build/cmake/config.h.cmake",
		"/home/roman/Dokumente/Sources/c-utils/3rdparty/openssl/external/perl/Text-Template-1.46/t/02-hash.t",
		"/home/roman/Dokumente/Sources/c-utils/lib/stralloc/stralloc_ends.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/stralloc/stralloc_endb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/stralloc/stralloc_endsb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/set.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/set/set_adds.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/set/set_add.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/strarray.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/wait/waitpid_nointr.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/stralloc.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_diff.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_rchrs.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_chrs.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_rchrs.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_findb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/strarray/strarray_pushb_unique.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/strarray/strarray_pushb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/strarray/strarray_index_of.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/path/path_exists.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/sig.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_start.c",
		"/home/roman/Dokumente/Sources/c-utils/eagle-gen-cmds.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_equal.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_starts.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_ends.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_startb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_endb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_diff.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_finds.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_end.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_endb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_startb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/str/str_rfindb.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/xml.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/xml/xml_has_attribute.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_skip.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/http/http_socket_write.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/http/http_socket_read.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/http/http_read_internal.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/http.h",
		"/home/roman/Dokumente/Sources/c-utils/lib/buffer/buffer_getline.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/stralloc/buffer_getline_sa.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_trimr.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/stralloc/stralloc_trimr.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/byte/byte_count.c",
		"/home/roman/Dokumente/Sources/c-utils/lib/http/http_read_header.c"
	],
	"find":
	{
		"height": 57.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/home/roman/Sources/c-utils/lib,*.c,*.h,*.txt,/home/roman/Sources/c-utils,*.c,*.h,-*/3rdparty/*,-*/build/*",
			"/home/roman/Sources/c-utils/lib,*.c,*.h,*.txt,/home/roman/Sources/c-utils,*.c,*.h,-*/3rdparty/*",
			"/home/roman/Sources/c-utils/lib,*.c,*.h,*.txt,/home/roman/Sources/c-utils,*.c,*.h",
			"/home/roman/Dokumente/Sources/c-utils/lib,*.c,*.h,*.txt",
			"/home/roman/Dokumente/Sources/c-utils/lib,*.c,*.h",
			"/home/roman/Dokumente/Sources/c-utils,*.c,*.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"DEBUG_OUTPUT\n",
			"DEBUG_OUTPUT",
			"\"Read",
			"ATLEAST",
			"LIBS_ONLY",
			"libs_mode",
			"LIBS_ONLY",
			"LIBS_ONLY_L",
			"--libs\"",
			"_EXISTS",
			"'E'",
			"exists",
			"sorted",
			"log_rr",
			"\"rr",
			"log_logtype",
			"\"a\"",
			"\"rr",
			"rr",
			"AAAA",
			"include_dir",
			"add_lib",
			"bzip",
			"libbzip",
			"bz",
			"Checking for one",
			"Checking for",
			"Checking",
			"Checknig",
			"imposs",
			"dump of",
			"dump f",
			"check_comp",
			"ALLOCA",
			"^(\\s*)(message\\(\"[A-Z][A-Z])",
			"message\\(\"[A-Z][A-Z]",
			"message\\(\"[A-Z]",
			"message\\(\"",
			"message(",
			"message\\(",
			"Trying",
			"APPEND MUX",
			"APPEND",
			"ws2_32",
			"LINK_LIB",
			"LIBS",
			"SUPPORT_SELECT",
			"try_com",
			"SUPPORT_POLL",
			"rumpel",
			"\\nint\\nmain() {\\n ",
			"\\nint\\nmain() {\\n",
			"check_compile",
			"HAVE_UINT",
			"check_com.*INLIN",
			"INLINE",
			"sys.errno",
			"sys.erro",
			"SUPPORT_POLL",
			"check_com",
			"message\\(",
			"MUX_METHOD",
			"size",
			"set4",
			"imposs",
			"dtype",
			"DNS_T_AAA",
			"response_addname",
			"AAAA",
			"DNS_AAA",
			"opt.*USE_SEL",
			"USE_SEL",
			"pattern",
			"usage",
			"exclude_masks",
			"\".*exclude",
			"exclude",
			"New conn",
			"sockbuf_put_addr",
			"socket_accept",
			"socket_accept$",
			"socket_accept",
			"connection_new",
			"from \"",
			"sockbuf_put_addr",
			"sockbuf_fmt_addr",
			"sockbuf_put_addr",
			"\"Sent ",
			"Sent ",
			"_ERROR",
			"SERVER_SOCKET_ERROR",
			"SYNTAX_ERROR",
			"server_finalize",
			"dump",
			"^main",
			"dump",
			"connection_open_log",
			"log",
			".txt",
			"server_tar_files",
			"server_finalize",
			"\"tar",
			"want ",
			"want read",
			"put_esca",
			"buffer_put_escaped",
			"dump_strarray",
			"buffer_2",
			"debug_long",
			"debug_",
			"debug_str",
			"debug_set",
			"debug_sl",
			"debug_nl",
			"DEBUG_OUT",
			"want",
			"want rea",
			"debug",
			"^debug",
			"want ",
			"remove_port",
			"^includes_add",
			"includes",
			"'I'",
			"\"CPPFLAGS",
			"doesn't",
			"[^a-z]int3[^a-z0-9]",
			"[^a-z]int3"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\1#\\2",
			"\\nint main() {",
			"\\nint main() { ",
			"if(debugmode) {\\1}",
			"idx2ifn",
			"ifn2idx",
			"set_iterator_t",
			"end",
			"isleap",
			"&sa->s",
			"#",
			"http_ssl2errno(h,",
			" errno =",
			"ret =",
			"SSL_get_error(h->ssl, ",
			"SSL_get_error(h->ssl",
			"v.",
			"num_prereqs",
			"buffer_putsflush(buffer_2,  debug_nl);",
			";\\n#endif",
			"#endif",
			"out.",
			"sa",
			"b->",
			"C",
			"uint32",
			"C",
			"to C",
			"C++",
			"n",
			"x",
			"resp->len",
			"og_string(\"udp\");",
			"",
			"errstr()",
			"111, FATAL, \"",
			"",
			"data->",
			"diesys(111, fatal,",
			"die(111, fatal,",
			"die(111, ",
			"diesys(111, ",
			"code",
			"ustar",
			"\\1addr.ip",
			"size_t",
			"",
			"->data.elem_size",
			"dns_cache",
			"sb->",
			"sockbuf_fmt_addr",
			"data_numlines",
			"sock",
			"DEBUG_OUTPUT_",
			" \\\\",
			"iarray",
			"c->proxy.",
			"c->client.",
			"INET",
			"plog",
			"term_buf.fd",
			" ",
			"uint16",
			" ",
			"_1, \", "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 683,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"color_scheme": "Packages/Outline/outline.hidden-tmTheme",
							"current_file": "/home/roman/Dokumente/Sources/c-utils/dnscache.c",
							"function_name_status_row": 41,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									530,
									535
								],
								[
									733,
									739
								],
								[
									752,
									758
								],
								[
									838,
									847
								],
								[
									1296,
									1305
								],
								[
									1653,
									1670
								],
								[
									2105,
									2122
								],
								[
									2754,
									2765
								],
								[
									3619,
									3627
								],
								[
									3739,
									3750
								],
								[
									4081,
									4088
								],
								[
									5264,
									5272
								],
								[
									5358,
									5369
								],
								[
									5535,
									5544
								],
								[
									5719,
									5727
								],
								[
									5809,
									5820
								],
								[
									6279,
									6285
								],
								[
									7755,
									7762
								],
								[
									8592,
									8604
								],
								[
									10309,
									10313
								]
							],
							"symlist":
							[
								"\tⓂ  FATAL … — macro object",
								"\tⓂ  MAXUDP … — macro object",
								"\tⓂ  MAXTCP … — macro object",
								"—Ⓒ– tcpclient { … } ; — type",
								"—Ⓒ– udpclient { … } ; — type",
								"—Ⓕ– dnscache_okclient ( ) { … } — function",
								"—Ⓕ– dnscache_droproot ( ) { … } — function",
								"—Ⓕ– packetquery ( ) { … } — function",
								"—Ⓕ– udp_drop ( ) { … } — function",
								"—Ⓕ– udp_respond ( ) { … } — function",
								"—Ⓕ– udp_new ( ) { … } — function",
								"—Ⓕ– tcp_free ( ) { … } — function",
								"—Ⓕ– tcp_timeout ( ) { … } — function",
								"—Ⓕ– tcp_close ( ) { … } — function",
								"—Ⓕ– tcp_drop ( ) { … } — function",
								"—Ⓕ– tcp_respond ( ) { … } — function",
								"—Ⓕ– tcp_rw ( ) { … } — function",
								"—Ⓕ– tcp_new ( ) { … } — function",
								"—Ⓕ– dnscache_run ( ) { … } — function",
								"—Ⓕ– main ( ) { … } — function"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "dnscache.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12167,
						"regions":
						{
						},
						"selection":
						[
							[
								739,
								740
							]
						],
						"settings":
						{
							"function_name_status_row": -1,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 288.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7291,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										183,
										187
									],
									[
										431,
										435
									],
									[
										633,
										637
									],
									[
										922,
										926
									],
									[
										1170,
										1174
									],
									[
										1372,
										1376
									],
									[
										1674,
										1678
									],
									[
										1914,
										1918
									],
									[
										2142,
										2146
									],
									[
										2417,
										2421
									],
									[
										2672,
										2676
									],
									[
										2930,
										2934
									],
									[
										3172,
										3175
									],
									[
										3358,
										3361
									],
									[
										3547,
										3550
									],
									[
										3734,
										3737
									],
									[
										3845,
										3848
									],
									[
										3953,
										3956
									],
									[
										4155,
										4161
									],
									[
										4330,
										4336
									],
									[
										4502,
										4508
									],
									[
										4677,
										4683
									],
									[
										4850,
										4856
									],
									[
										5011,
										5017
									],
									[
										5314,
										5320
									],
									[
										5417,
										5423
									],
									[
										5493,
										5499
									],
									[
										5572,
										5578
									],
									[
										5649,
										5655
									],
									[
										5740,
										5746
									],
									[
										5999,
										6005
									],
									[
										6148,
										6154
									],
									[
										6391,
										6397
									],
									[
										6574,
										6580
									],
									[
										6756,
										6762
									],
									[
										6978,
										6984
									],
									[
										7173,
										7179
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								4034,
								4034
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"function_name_status_row": 128,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 504.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/roman/Sources/c-utils/log.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10296,
						"regions":
						{
						},
						"selection":
						[
							[
								8022,
								8022
							]
						],
						"settings":
						{
							"function_name_status_row": 417,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 570.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "cache.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6609,
						"regions":
						{
						},
						"selection":
						[
							[
								1690,
								1690
							]
						],
						"settings":
						{
							"function_name_status_row": 73,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 318.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/errmsg.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1924,
						"regions":
						{
						},
						"selection":
						[
							[
								473,
								473
							]
						],
						"settings":
						{
							"function_name_status_row": 20,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/errmsg/errmsg_warn.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 237,
						"regions":
						{
						},
						"selection":
						[
							[
								135,
								135
							]
						],
						"settings":
						{
							"function_name_status_row": 7,
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 66776,
						"regions":
						{
						},
						"selection":
						[
							[
								435,
								435
							]
						],
						"settings":
						{
							"function_name_status_row": 15,
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "pkgcfg.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30851,
						"regions":
						{
						},
						"selection":
						[
							[
								28261,
								28261
							]
						],
						"settings":
						{
							"function_name_status_row": 1197,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9439.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "tinyproxy.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33260,
						"regions":
						{
						},
						"selection":
						[
							[
								17216,
								17216
							]
						],
						"settings":
						{
							"function_name_status_row": 697,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11950.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/stralloc/stralloc_fmt.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 353,
						"regions":
						{
						},
						"selection":
						[
							[
								353,
								353
							]
						],
						"settings":
						{
							"function_name_status_row": 14,
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/fmt/fmt_escapecharshell.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1083,
						"regions":
						{
						},
						"selection":
						[
							[
								9,
								9
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/strarray/strarray_from_argv.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 214,
						"regions":
						{
						},
						"selection":
						[
							[
								30,
								30
							]
						],
						"settings":
						{
							"function_name_status_row": 3,
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "cfg.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11755,
						"regions":
						{
						},
						"selection":
						[
							[
								11309,
								11309
							]
						],
						"settings":
						{
							"function_name_status_row": 398,
							"syntax": "Packages/ShellScript/Bash.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 288.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "response.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3254,
						"regions":
						{
						},
						"selection":
						[
							[
								2652,
								2652
							]
						],
						"settings":
						{
							"function_name_status_row": 118,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "query.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28131,
						"regions":
						{
						},
						"selection":
						[
							[
								2645,
								2645
							]
						],
						"settings":
						{
							"function_name_status_row": 143,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5536.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 49.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.739693706503,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "c-utils.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"tinypr",
				"tinyproxy.c"
			],
			[
				"pkgc",
				"pkgcfg.c"
			],
			[
				"cfg.sh",
				"cfg.sh"
			],
			[
				"errmsg_",
				"lib/errmsg/errmsg_warn.c"
			],
			[
				"errmsg",
				"lib/errmsg.h"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"cache.c",
				"cache.c"
			],
			[
				"query.c",
				"query.c"
			],
			[
				"response.c",
				"response.c"
			],
			[
				"dnscache",
				"dnscache.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"list-r",
				"list-r.c"
			],
			[
				"tinypro",
				"tinyproxy.c"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"buffer.h",
				"lib/buffer.h"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"genmake",
				"genmakefile.c"
			],
			[
				"tiny",
				"tinyproxy.c"
			],
			[
				"",
				"lib/io/io_wantread.c"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"genma",
				"genmakefile.c"
			],
			[
				"response.h",
				"response.h"
			],
			[
				"response",
				"response.c"
			],
			[
				"io_dump",
				"lib/io/io_dump.c"
			],
			[
				"logser",
				"logserial.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"io_waitun",
				"lib/io/io_waituntil2.c"
			],
			[
				"io_wantread",
				"lib/io/io_wantread.c"
			],
			[
				"io_du",
				"lib/io/io_dump.c"
			],
			[
				"io_in",
				"lib/io_internal.h"
			],
			[
				"io.h",
				"lib/io.h"
			],
			[
				"io_wantwr",
				"lib/io/io_wantwrite.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"io_waituntil2",
				"lib/io/io_waituntil2.c"
			],
			[
				"io_non",
				"lib/io/io_nonblock.c"
			],
			[
				"buffer_get",
				"lib/buffer/buffer_get.c"
			],
			[
				"buffer_putc",
				"lib/buffer/buffer_putc.c"
			],
			[
				"logserial",
				"logserial.c"
			],
			[
				"coff_li",
				"lib/coff/coff_line_numbers.c"
			],
			[
				"cofflist",
				"cofflist.c"
			],
			[
				"io_inter",
				"lib/io_internal.h"
			],
			[
				"process_crea",
				"lib/process/process_create.c"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"getifname",
				"lib/socket/socket_getifname.c"
			],
			[
				"socket_getif",
				"lib/socket/socket_getifidx.c"
			],
			[
				"socket_",
				"lib/socket/socket_getifidx.c"
			],
			[
				"ifidx.",
				"lib/socket/socket_getifidx.c"
			],
			[
				"omf.h",
				"lib/omf.h"
			],
			[
				"omflist",
				"omflist.c"
			],
			[
				" io_waituntil2 ",
				"lib/io/io_waituntil2.c"
			],
			[
				"tinyproxy",
				"tinyproxy.c"
			],
			[
				"tinyp",
				"tinyproxy.c"
			],
			[
				"tinypox",
				"tinyproxy.c"
			],
			[
				"pkgcfg.c",
				"pkgcfg.c"
			],
			[
				"ar-wr",
				"ar-wrap.c"
			],
			[
				"wait.h",
				"lib/wait.h"
			],
			[
				"process.h",
				"lib/process.h"
			],
			[
				"ar-wrap",
				"ar-wrap.c"
			],
			[
				"inypro",
				"tinyproxy.c"
			],
			[
				"wait_pid",
				"lib/wait/wait_pid.c"
			],
			[
				"glob.c",
				"lib/unix/glob.c"
			],
			[
				"dir_inter",
				"lib/dir_internal.h"
			],
			[
				"dir_time.c",
				"lib/dir/dir_time.c"
			],
			[
				"dir_in",
				"lib/dir_internal.h"
			],
			[
				"dir_type",
				"lib/dir/dir_type.c"
			],
			[
				"dir_open",
				"lib/dir/dir_open.c"
			],
			[
				"config.h",
				"build/cmake/config.h.cmake"
			],
			[
				"typedef",
				"lib/typedefs.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"stralloc_repl",
				"lib/stralloc/stralloc_replace.c"
			],
			[
				"apth.h",
				"3rdparty/openssl/external/perl/Text-Template-1.46/t/02-hash.t"
			],
			[
				"str.h",
				"lib/str.h"
			],
			[
				"strarray.h",
				"lib/strarray.h"
			],
			[
				"set.h",
				"lib/set.h"
			],
			[
				"str_diff",
				"lib/str/str_diff.c"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"genmakefile.h",
				"genmakefile.h"
			],
			[
				"path_ex",
				"lib/path/path_exists.c"
			],
			[
				"sig.h",
				"lib/sig.h"
			],
			[
				"str_strat",
				"lib/str/str_start.c"
			],
			[
				"xml.h",
				"lib/xml.h"
			],
			[
				"mediathek-list",
				"mediathek-list.c"
			],
			[
				"quotedshell",
				"lib/fmt/fmt_escapecharquotedshell.c"
			],
			[
				"str_find",
				"lib/str/str_find.c"
			],
			[
				"str_dup",
				"lib/str/str_dup.c"
			],
			[
				"pipeinf",
				"pipeinfo.c"
			],
			[
				"puts_esca",
				"lib/stralloc/buffer_puts_escaped.c"
			],
			[
				"fmt.h",
				"lib/fmt.h"
			],
			[
				"utf8_latin",
				"lib/ucs/str_utf8_latin.c"
			],
			[
				"mediathek-par",
				"mediathek-parser.c"
			],
			[
				"http.h",
				"lib/http.h"
			],
			[
				"buffer_puts",
				"lib/buffer/buffer_puts.c"
			],
			[
				"io_wait",
				"lib/io/io_waituntil2.c"
			],
			[
				"errmsg_puts",
				"lib/errmsg/errmsg_puts.c"
			],
			[
				"io_internal",
				"lib/io_internal.h"
			],
			[
				"mediathek",
				"mediathek-list.c"
			],
			[
				"httptest",
				"httptest.c"
			],
			[
				"winsock2err",
				"lib/socket/winsock2errno.c"
			],
			[
				"socket_tc",
				"lib/socket/socket_tcp4.c"
			],
			[
				"errmsg_write",
				"lib/errmsg/errmsg_write.c"
			],
			[
				"errmsg_warn",
				"lib/errmsg/errmsg_warnsys.c"
			],
			[
				"taia_sub",
				"lib/taia/taia_sub.c"
			],
			[
				"taia.h",
				"lib/taia.h"
			],
			[
				"waituntil",
				"lib/io/io_waituntil.c"
			],
			[
				"waitunt",
				"lib/io/io_waituntil2.c"
			],
			[
				"mediathek-list.c",
				"mediathek-list.c"
			],
			[
				"ndelay_on",
				"lib/ndelay/ndelay_on.c"
			],
			[
				"socket.h",
				"lib/socket.h"
			],
			[
				"io_close",
				"lib/io/io_close.c"
			],
			[
				"pe.h",
				"lib/pe.h"
			],
			[
				"impgen",
				"impgen.c"
			],
			[
				"pelist",
				"pelist.c"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"pelist.c",
				"pelist.c"
			],
			[
				"parse.c",
				"parse.c"
			],
			[
				"mediathek-parser",
				"mediathek-parser.c"
			],
			[
				"plsconv",
				"plsconv.c"
			],
			[
				"ntldd",
				"ntldd.c"
			],
			[
				"ready",
				"lib/stralloc/stralloc_ready.c"
			],
			[
				"genmak",
				"genmakefile.h"
			],
			[
				"umul",
				"lib/safemult/umult16.c"
			],
			[
				"umult",
				"lib/safemult/umult64.c"
			],
			[
				"et.h",
				"lib/set.h"
			],
			[
				"get-pro",
				"scripts/get-prototypes.sh"
			],
			[
				"str_ndup",
				"lib/str/str_ndup.c"
			],
			[
				"set_find",
				"lib/set/set_find.c"
			],
			[
				"genm",
				"genmakefile.c"
			],
			[
				"path_abs",
				"lib/path/path_absolute.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 306.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
