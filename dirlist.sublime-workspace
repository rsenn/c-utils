{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"USE_",
				"USE_HD44780_LCD"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows",
				"name": "ùåÜ Outline",
				"scratch": true
			}
		},
		{
			"file": "lib/pe/pe_get_datadir.c",
			"settings":
			{
				"buffer_size": 280,
				"line_ending": "Unix"
			}
		},
		{
			"file": "genmakefile.c",
			"settings":
			{
				"buffer_size": 50932,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "{\n    // All these settings have been taken from the clang-format manual, \n    // and can be customised form within Sublime Text settings files.\n    // Please note, the defaults set below are completely random values.\n    // Take a look at http://clang.llvm.org/docs/ClangFormatStyleOptions.html\n    // For examples.\n\n    // The style used for all options not specifically set in the configuration.\n    // Possible \"values\":\n    //     LLVM \n    //     Google \n    //     Chromium \n    //     Mozilla \n    //     WebKit \n    \"BasedOnStyle\": \"LLVM\",\n    \n    // The extra indent or outdent of access modifiers, e.g. \"public\":.    \n//  \"AccessModifierOffset\": 2,\n\n    // If true, horizontally aligns arguments after an open bracket.\n    // This applies to round brackets (parentheses), angle brackets and square brackets.\n    // This will result in formattings like:\n    // Possible values:\n\n    // BAS_Align (in configuration: Align) Align parameters on the open bracket,\n    //  e.g.:\n    // someLongFunction(argument1,\n    //                  argument2);\n    //                  \n    // BAS_DontAlign (in configuration: DontAlign) Don‚Äôt align, instead use \n    // ContinuationIndentWidth, e.g.:\n    // someLongFunction(argument1,\n    //     argument2);\n    //     \n    // BAS_AlwaysBreak (in configuration: AlwaysBreak) Always break after an \n    // open bracket, if the parameters don‚Äôt fit on a single line, e.g.:\n    // someLongFunction(\n    //     argument1, argument2);\n//  \"AlignAfterOpenBracket\": true,\n\n    // If true, aligns consecutive assignments.\n    // This will align the assignment operators of consecutive lines.\n    // This will result in formattings like:\n    //     int aaaa = 12;\n    //     int b    = 23;\n    //     int ccc  = 23;\n//  \"AlignConsecutiveAssignments\": true,\n\n    // If true, aligns consecutive declarations.\n    // This will align the declaration names of consecutive lines. This will result in formattings like\n    // int         aaaa = 12;\n    // float       b = 23;\n    // std::string ccc = 23;\n// \"AlignConsecutiveDeclarations\": true,\n\n    // If true, aligns escaped newlines as far left as possible. Otherwise puts\n    // them into the right-most column.\n//  \"AlignEscapedNewlinesLeft\": true,\n\n    // If true, horizontally align operands of binary and ternary expressions.\n// \"AlignOperands\": true,   \n\n    // If true, aligns trailing comments.\n//  \"AlignTrailingComments\": true,\n\n    // Allow putting all parameters of a function declaration onto the next line\n    // even if BinPackParameters is false.\n//  \"AllowAllParametersOfDeclarationOnNextLine\": true,\n\n    // Allows contracting simple braced statements to a single line.\n    // E.g., this allows if (a) { return; } to be put on a single line.\n//  \"AllowShortBlocksOnASingleLine\": true,\n\n    // If true, short case labels will be contracted to a single line.\n//  \"AllowShortCaseLabelsOnASingleLine\": true,\n\n    // Dependent on the value, int f() { return 0; } can be put on a single\n    // line.\n    // Possible values:\n    //     SFS_None   (in \"configuration\": None) Never merge functions into a\n    //     single line.    \n    //     SFS_Empty (in configuration: Empty) Only merge empty functions.\n    //     SFS_Inline (in \"configuration\": Inline) Only merge functions defined\n    //     inside a class.\n    //     SFS_All    (in \"configuration\": All) Merge all functions fitting on a\n    //     single line.\n//  \"AllowShortFunctionsOnASingleLine\": \"None\",\n\n    // If true, if (a) return; can be put on a single line.\n//  \"AllowShortIfStatementsOnASingleLine\": false,\n\n    // If true, while (true) continue; can be put on a single line.\n//  \"AllowShortLoopsOnASingleLine\": true,\n\n    // The function definition return type breaking style to use.\n    // Possible values:\n    //     DRTBS_None     (in configuration: None) Break after return type automatically.\n    //     PenaltyReturnTypeOnItsOwnLine is taken into account.\n    //     DRTBS_All      (in configuration: All) Always break after the return type.\n    //     DRTBS_TopLevel (in configuration: TopLevel) Always break after the return types\n    //     of top level functions.\n//  \"AlwaysBreakAfterDefinitionReturnType\": \"None\",\n//  \"AlwaysBreakAfterReturnType\": \"None\",\n\n    // If true, always break before multiline string literals.\n    // This flag is mean to make cases where there are multiple multiline \n    // strings in a file look more consistent. Thus, it will only take effect \n    // if wrapping the string at that point leads to it being indented \n    // ContinuationIndentWidth spaces from the start of the line.\n//  \"AlwaysBreakBeforeMultilineStrings\": true,\n\n    // If true, always break after the template<...> of a template declaration.\n//  \"AlwaysBreakTemplateDeclarations\": true,\n\n    // If false, a function call‚Äôs arguments will either be all on the same line\n    // or will have one line each.\n//  \"BinPackArguments\": true,\n\n    // If false, a function call‚Äôs or function definition‚Äôs parameters will\n    // either all be on the same line or will have one line each.\n//  \"BinPackParameters\": true,\n\n    // Control of individual brace wrapping cases.\n    // If BreakBeforeBraces is set to custom, use this to specify how each \n    // individual brace case should be handled. Otherwise, this is ignored.\n    // Nested configuration flags:    \n    // bool AfterClass Wrap class definitions.\n    // bool AfterControlStatement Wrap control statements (if/for/while/switch/..).\n    // bool AfterEnum Wrap enum definitions.\n    // bool AfterFunction Wrap function definitions.\n    // bool AfterNamespace Wrap namespace definitions.\n    // bool AfterObjCDeclaration Wrap ObjC definitions (@autoreleasepool, interfaces, ..).\n    // bool AfterStruct Wrap struct definitions.\n    // bool AfterUnion Wrap union definitions.\n    // bool BeforeCatch Wrap before catch.\n    // bool BeforeElse Wrap before else.\n    // bool IndentBraces Indent the wrapped braces themselves.\n    // bool SplitEmptyFunction If false, empty function body can be put on a single line.\n    // bool SplitEmptyRecord If false, empty record (e.g. class, struct or union) body can be put on a single line.\n    // bool SplitEmptyNamespace If false, empty namespace body can be put on a single line.\n    \"BraceWrapping\":{\n//        \"AfterClass\":             false,\n//        \"AfterControlStatement\":  false,\n//        \"AfterEnum\":              false,\n//        \"AfterFunction\":          false,\n//        \"AfterNamespace\":         false,\n//        \"AfterObjCDeclaration\":   false,\n//        \"AfterStruct\":            false,\n//        \"AfterUnion\":             false,\n//        \"BeforeCatch\":            false,\n//        \"BeforeElse\":             false,\n//        \"IndentBraces\":           false,\n//        \"SplitEmptyFunction:\"     true,\n//        \"SplitEmptyRecord\":       true,\n//        \"SplitEmptyNamespace\":    true\n    },\n\n    // Break after each annotation on a field in Java files.\n// \"BreakAfterJavaFieldAnnotations\": true,\n\n    // The way to wrap binary operators.\n    // Possible values:\n    // BOS_None (in configuration: None) Break after operators.\n    // BOS_NonAssignment (in configuration: NonAssignment) Break before operators that aren‚Äôt assignments.\n    // BOS_All (in configuration: All) Break before operators.\n//  \"BreakBeforeBinaryOperators\": \"None\",\n\n    // The brace breaking style to use.\n    // Possible \"values\":\n    // BS_Attach (in \"configuration\": Attach) Always attach braces to\n    // surrounding context.\n    // BS_Linux (in \"configuration\": Linux) Like Attach, but break before braces\n    // on function, namespace and class definitions.\n    // BS_Mozilla (in configuration: Mozilla) Like Attach, but break before \n    // braces on enum, function, and record definitions.\n    // BS_Stroustrup (in \"configuration\": Stroustrup) Like Attach, but break\n    // before function definitions.\n    // BS_Allman (in \"configuration\": Allman) Always break before braces. \n    // BS_GNU (in \"configuration\": GNU) Always break before braces and add an extra\n    // level of indentation to braces of control statements, not to those of\n    // class, function or other definitions.\n    // BS_WebKit (in configuration: WebKit) Like Attach, but break before functions.\n    // BS_Custom (in configuration: Custom) Configure each individual brace in \n    // BraceWrapping.\n//  \"BreakBeforeBraces\": \"Attach\",\n\n    // If true, ternary operators will be placed after line breaks.\n//  \"BreakBeforeTernaryOperators\": true,\n    \n    // Always break constructor initializers before commas and align the commas\n    // with the colon.\n//  \"BreakConstructorInitializersBeforeComma\": true,\n\n    // The column limit. A column limit of 0 means that there is no column\n    // limit. In this case, clang-format will respect the input‚Äôs line breaking\n    // decisions within statements unless they contradict other rules.\n//  \"ColumnLimit\": 80,\n\n    // A regular expression that describes comments with special meaning, which\n    // should not be split into lines or otherwise changed.\n    // \"CommentPragmas\": \"\",\n\n    // If the constructor initializers don‚Äôt fit on a line, put each initializer\n    // on its own line.\n//  \"ConstructorInitializerAllOnOneLineOrOnePerLine\": true,\n\n    // The number of characters to use for indentation of constructor\n    // initializer lists.\n//  \"ConstructorInitializerIndentWidth\": 2,\n\n    // Indent width for line continuations.\n//  \"ContinuationIndentWidth\": 2,\n\n    // If true, format braced lists as best suited for C++11 braced lists.\n    // Important \"differences\": - No spaces inside the braced list. - No line\n    // break before the closing brace. - Indentation with the continuation\n    // indent, not with the block indent. Fundamentally, C++11 braced lists are\n    // formatted exactly like function calls would be formatted in their place.\n    // If the braced list follows a name (e.g. a type or variable name), clang-\n    // format formats as if the {} were the parentheses of a function call with\n    // that name. If there is no name, a zero-length name is assumed.\n//  \"Cpp11BracedListStyle\": true,\n\n    // If true, analyze the formatted file for the most common alignment of \n    // & and *. PointerAlignment is then used only as fallback.\n//  \"DerivePointerAlignment\": true,\n\n    // Disables formatting completely.\n//  \"DisableFormat\": false,\n\n    // If true, clang-format detects whether function calls and definitions are\n    // formatted with one parameter per line. Each call can be bin-packed, one-\n    // per-line or inconclusive. If it is inconclusive, e.g. completely on one\n    // line, but a decision needs to be made, clang-format analyzes whether\n    // there are other bin-packed cases in the input file and act accordingly.\n    // \"NOTE\": This is an experimental flag, that might go away or be renamed. Do\n    // not use this in config files, etc. Use at your own risk.\n//  \"ExperimentalAutoDetectBinPacking\": true,\n\n    // A vector of macros that should be interpreted as foreach loops instead of\n    // as function calls. These are expected to be macros of the \"form\":\n    // FOREACH(<variable-declaration>, ...)\n    // <loop-body>\n    // In the .clang-format configuration file, this can be configured like:\n    // ForEachMacros: ['RANGES_FOR', 'FOREACH']\n    // For example: BOOST_FOREACH.\n// \"ForEachMacros\": \"['RANGES_FOR', 'FOREACH']\" \n    \n    // Regular expressions denoting the different #include categories used for \n    // ordering #includes.\n    // These regular expressions are matched against the filename of an include\n    // (including the <> or ‚Äú‚Äù) in order. The value belonging to the first \n    // matching regular expression is assigned and #includes are sorted first \n    // according to increasing category number and then alphabetically within \n    // each category.\n    // If none of the regular expressions match, UINT_MAX is assigned as \n    // category. The main header for a source file automatically gets \n    // category 0, so that it is kept at the beginning of the \n    // #includes (http://llvm.org/docs/CodingStandards.html#include-style).\n    // To configure this in the .clang-format file, use:\n    // IncludeCategories:\n    //   - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    //     Priority:        2\n    //   - Regex:           '^(<|\"(gtest|isl|json)/)'\n    //     Priority:        3\n    //   - Regex:           '.\\*'\n    //     Priority:        1\n// \"IncludeCategories\": \"UINT_MAX\"\n\n    // Indent case labels one level from the switch statement. When false, use\n    // the same indentation level as for the switch statement. Switch statement\n    // body is always indented one level more than case labels.\n//  \"IndentCaseLabels\": true,\n\n    // If true, indent when breaking function declarations which are not also\n    // definitions after the type.\n//  \"IndentFunctionDeclarationAfterType\": true,\n\n    // The number of columns to use for indentation.\n//  \"IndentWidth\": 2,\n\n    // Indent if a function definition or declaration is wrapped after the type.\n//  \"IndentWrappedFunctionNames\": true,\n\n    // If true, empty lines at the start of blocks are kept.\n// \"KeepEmptyLinesAtTheStartOfBlocks\": true,\n\n    // Language, this format style is targeted at. Possible \"values\": LK_None\n    // (in \"configuration\": None) Do not use. LK_Cpp (in \"configuration\": Cpp)\n    // Should be used for C, C++, ObjectiveC, ObjectiveC++. LK_JavaScript (in\n    // \"configuration\": JavaScript) Should be used for JavaScript. LK_Proto (in\n    // \"configuration\": Proto) Should be used for Protocol Buffers\n    // (\"https\"://developers.google.com/protocol-buffers/). \n//  \"Language\": \"Cpp\",\n\n    // A regular expression matching macros that start a block.\n//  MacroBlockBegin: \"*_MACRO_START\"\n\n    // A regular expression matching macros that end a block.\n//  MacroBlockEnd: \"*_MACRO_END\",\n\n    // The maximum number of consecutive empty lines to keep.\n//  \"MaxEmptyLinesToKeep\": 2,\n\n    // The indentation used for namespaces.\n    // Possible \"values\":\n    // NI_None (in \"configuration\": None) Don‚Äôt indent in namespaces.\n    // NI_Inner (in \"configuration\": Inner) Indent only in inner namespaces\n    // (nested in other namespaces).    \n    // NI_All (in \"configuration\": All) Indent in all namespaces.\n//  \"NamespaceIndentation\": \"Inner\",\n\n    // The number of characters to use for indentation of ObjC blocks.\n//  \"ObjCBlockIndentWidth\": 4,\n\n    // Add a space after @property in Objective-C, i.e. use @property (readonly)\n    // instead of @property(readonly).    \n//  \"ObjCSpaceAfterProperty\": false,\n\n    // Add a space in front of an Objective-C protocol list, i.e. use Foo\n    // <Protocol> instead of Foo<Protocol>.    \n//  \"ObjCSpaceBeforeProtocolList\": false,\n\n    // The penalty for breaking a function call after ‚Äúcall(‚Äù.\n//  \"PenaltyBreakBeforeFirstCallParameter\": 0,\n\n    // The penalty for each line break introduced inside a comment.\n//  \"PenaltyBreakComment\": 0,\n\n    // The penalty for breaking before the first <<.\n//  \"PenaltyBreakFirstLessLess\": 0,\n\n    // The penalty for each line break introduced inside a string literal.\n//  \"PenaltyBreakString\": 0,\n\n    // The penalty for each character outside of the column limit.\n//  \"PenaltyExcessCharacter\": 0,\n\n    // Penalty for putting the return type of a function onto its own line.\n//  \"PenaltyReturnTypeOnItsOwnLine\": 0,\n\n    // Pointer and reference alignment style.\n    // Possible values:\n    //     PAS_Left   (in configuration: Left) Align pointer to the left.\n    //     PAS_Right  (in configuration: Right) Align pointer to the right.\n    //     PAS_Middle (in configuration: Middle) Align pointer in the middle.\n//  \"PointerAlignment\": \"Left\",\n\n    // If true, a space may be inserted after C style casts.\n// \"SpaceAfterCStyleCast\": true,\n\n    // If false, spaces will be removed before assignment operators.\n//  \"SpaceBeforeAssignmentOperators\": true,\n\n    // Defines in which cases to put a space before opening parentheses.\n    // Possible \"values\":\n    // SBPO_Never (in \"configuration\": Never) Never put a space before opening\n    // parentheses.\n    // SBPO_ControlStatements (in \"configuration\": ControlStatements) Put a\n    // space before opening parentheses only after control statement keywords\n    // (for/if/while...).\n    // SBPO_Always (in \"configuration\": Always) Always put a space before\n    // opening parentheses, except when it‚Äôs prohibited by the syntax rules (in\n    // function- like macro definitions) or when determined by other style rules\n    // (after unary operators, opening parentheses, etc.)    \n//  \"SpaceBeforeParens\": \"ControlStatements\",\n\n    // If true, spaces may be inserted into ‚Äò()‚Äô.\n//  \"SpaceInEmptyParentheses\": true,\n\n    // The number of spaces before trailing line comments (//-comments). This\n    // does not affect trailing block comments (/**/-comments) as those commonly\n    // have different usage patterns and a number of special cases.\n//  \"SpacesBeforeTrailingComments\": 2,\n\n    // If true, spaces will be inserted after ‚Äò<‚Äô and before ‚Äò>‚Äô in template\n    // argument lists\n//  \"SpacesInAngles\": true,\n\n    // If true, spaces may be inserted into C style casts.\n//  \"SpacesInCStyleCastParentheses\": true,\n\n    // If true, spaces are inserted inside container literals (e.g. ObjC and\n    // Javascript array and dict literals).    \n//  \"SpacesInContainerLiterals\": true,\n\n    // If true, spaces will be inserted after ‚Äò(‚Äò and before ‚Äò)‚Äô.\n//  \"SpacesInParentheses\": true,\n\n    // If true, spaces will be inserted after ‚Äò[‚Äò and before ‚Äò]‚Äô.\n//  \"SpacesInSquareBrackets\": true,\n\n    // Format compatible with this standard, e.g. use A<A<int> > instead of\n    // A<A<int>> for LS_Cpp03. Possible \"values\":\n    // LS_Cpp03 (in \"configuration\": Cpp03) Use C++03-compatible syntax.\n    // LS_Cpp11 (in \"configuration\": Cpp11) Use features of C++11 (e.g.\n    // A<A<int>> instead of A<A<int> >).    \n    // LS_Auto (in \"configuration\": Auto) Automatic detection based on the input.\n//  \"Standard\": \"Cpp03\",\n\n    // The number of columns used for tab stops.\n//  \"TabWidth\": 2,\n\n    // The way to use tab characters in the resulting file.\n    // Possible \"values\":\n    // UT_Never (in \"configuration\": Never) Never use tab. UT_ForIndentation (in\n    // \"configuration\": ForIndentation) Use tabs only for indentation. UT_Always\n    // (in \"configuration\": Always) Use tabs whenever we need to fill whitespace\n    // that spans at least from one tab stop to the next one.\n//  \"UseTab\": \"Never\"\n}\n",
			"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/Clang Format/clang_format_custom.sublime-settings",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 18463,
				"line_ending": "Windows",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/User/Default (Windows).sublime-keymap",
			"settings":
			{
				"buffer_size": 614,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "[\n    // TODO: figure out how to match multiple scopes.\n    { \"keys\": [\"ctrl+option+a\"], \"command\": \"clang_format\",\n        \"context\":  \n        [\n            {\"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.c++\"}\n        ],\n    },\n\n    { \"keys\": [\"ctrl+option+a\"], \"command\": \"clang_format\",\n        \"context\":  \n        [\n            {\"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.c\"}\n        ],\n    },\n    \n    { \"keys\": [\"ctrl+option+a\"], \"command\": \"clang_format\",\n        \"context\":\n        [\n            {\"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.js\"}\n        ]\n    }\n]",
			"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/Clang Format/Default (Windows).sublime-keymap",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 617,
				"line_ending": "Windows",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeAStyleFormatter\n----------------------\n\n  SublimeAStyleFormatter\n  ======================\n  \n  SublimeAStyleFormatter is a simple code formatter plugin for Sublime Text 2.\n  It provides ability to format C, C++, C#, and Java files.\n  \n  Usage\n  -----\n  ### Key Bindings\n  The default key bindings for this plugin:\n  \n  **Windows, Linux:**\n  + `ctrl+alt+f`: Format current file\n  + `ctrl+k, ctrl+f`: Format current selection\n  \n  **OSX:**\n  + `ctrl+alt+f`: Format current file\n  + `super+k,super+f`: Format current selection\n  \n  ### Command Palette\n  Open the command palette, it apperas as `SublimeAStyleFormatter: Format Current File`\n  and `SublimeAStyleFormatter Format Current Selection`.\n",
			"settings":
			{
				"buffer_size": 752,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "{\n    // This is the path to the binary for clang-format. If it is in your path,\n    // it should just work out-of-the-box. Otherwise, you can set the full path,\n    // which will look like this: \n    //    \"binary\": \"/path/to/clang/bin/clang-format\"\n    // Note that you can set this from within ST directly through the Command\n    // Palette. \n\n    \"binary\": \"clang-format\",\n\n    // We use the Google style by default. This can be selected from ST using\n    // the Command Palette. Choosing 'Custom' means that the settings will\n    // be loaded from the Sublime Text settings file (which is accessed\n    // from within ST through preferences. Choosing 'File' will look in the \n    // local directories from a clang-format settings file. See the clang-format\n    // documentation to see how this works. \n\n    \"style\": \"Google\",\n\n    // Setting this to true will run the formatter on every save. If you want to\n    // only enable this for a given project, try checking out the package\n    // \"Project-Specific\".\n    \n    \"format_on_save\": false,\n\n    // If format_on_save is set to true, ClangFormat checks if the current file\n    // has its syntax set to a language in the list below. If it is in the list,\n    // then the file will be formatted by ClangFormat.\n\n    \"languages\": [\"C\", \"C++\", \"C++11\", \"JavaScript\", \"Objective-C\", \"Objective-C++\"]\n}\n",
			"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/Clang Format/clang_format.sublime-settings",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 1352,
				"line_ending": "Windows",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/User/clang_format.sublime-settings",
			"settings":
			{
				"buffer_size": 1350,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "lib/path/path_relative.c",
			"settings":
			{
				"buffer_size": 2151,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/stralloc/mmap_filename.c",
			"settings":
			{
				"buffer_size": 1550,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 363.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: disc",
				"Package Control: Discover Packages"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"Package Control: ",
				"Package Control: Advanced Install Package"
			],
			[
				"insta",
				"Package Control: Advanced Install Package"
			],
			[
				"pac",
				"Package Control: Discover Packages"
			],
			[
				"ins",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"in",
				"Package Control: Advanced Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Advanced Install Package"
			],
			[
				"install",
				"Package Control: Advanced Install Package"
			],
			[
				"package",
				"Package Control: Discover Packages"
			],
			[
				"Remove",
				"Package Control: Remove Package"
			],
			[
				"make",
				"Makefile (dirlist): make all"
			],
			[
				"build",
				"Build: New Build System"
			],
			[
				"packa",
				"Package Control: Advanced Install Package"
			],
			[
				"",
				"About"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 219.0,
		"history":
		[
			"clang_format",
			"Theme - Spacefunk, C++ Starting Kit",
			"schemr",
			"schemr_favorite_current_scheme",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/roman/Desktop/dirlist",
		"/C/Users/roman/Desktop/dirlist/lib",
		"/C/Users/roman/Desktop/dirlist/lib/mmap",
		"/C/Users/roman/Desktop/dirlist/lib/path"
	],
	"file_history":
	[
		"/C/Users/roman/Desktop/dirlist/lib/pe.h",
		"/C/Program Files/IDM Computer Solutions/UEStudio/configs/Lcc win32 Compiler/Win32 Console Application",
		"/C/Users/roman/Desktop/dirlist/genmakefile.c",
		"/C/Users/roman/Desktop/dirlist/lib/pe/pe_thunk.c",
		"/C/Users/roman/Desktop/dirlist/dirlist.sublime-project",
		"/C/Users/roman/Desktop/dirlist/lib/strlist/strlist_push.c",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_canonicalize.c",
		"/C/Users/roman/Desktop/dirlist/lib/strlist/strlist_push_tokens.c",
		"/C/Users/roman/Desktop/dirlist/lib/buffer/buffer_putulong.c",
		"/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/User/CTags.sublime-settings",
		"/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/CTags/Default.sublime-keymap",
		"/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/CTags/Default.sublime-mousemap",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_canonical.c",
		"/C/Users/roman/Desktop/dirlist/pathtool.c",
		"/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/User/CscopeSublime.sublime-settings",
		"/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/User/Default (Windows).sublime-keymap",
		"/B/Programs/mplayer/mplayer/config",
		"/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/CTags/CTags.sublime-settings",
		"/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/Cscope/CscopeSublime.sublime-settings",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_collapse.c",
		"/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/Outline/outline.sublime-settings",
		"/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/User/outline.sublime-settings",
		"/C/Users/roman/Desktop/dirlist/genmakefile/genmakefile.c",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_skip_separator.c",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_is_separator.c",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_skip.c",
		"/C/Users/roman/Desktop/dirlist/tests/CMakeLists.txt",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_is_absolute.c",
		"/C/Users/roman/Desktop/dirlist/lib/strlist/strlist_push_unique.c",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_basename.c",
		"/C/Users/roman/Desktop/dirlist/CMakeLists.txt",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_absolute_sa.c",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_dirname.c",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_exists.c",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_fnmatch.c",
		"/C/Users/roman/Desktop/dirlist/SetMSVCStaticRuntime.cmake",
		"/C/Users/roman/Desktop/dirlist/lib/unit_test.h",
		"/C/Users/roman/Desktop/dirlist/lib/path_internal.h",
		"/C/Users/roman/Desktop/dirlist/lib/strlist/strlist_pop.c",
		"/C/Users/roman/Desktop/dirlist/lib/popen.c",
		"/C/Users/roman/Desktop/dirlist/lib/uint16.h",
		"/C/Users/roman/Desktop/dirlist/lib/strlist/strlist_to_argv.c",
		"/C/Users/roman/Desktop/dirlist/tests/test_strlist.c",
		"/C/Users/roman/Desktop/dirlist/tests/all_tests.c",
		"/C/Users/roman/Desktop/dirlist/tests/test_path.c",
		"/C/Users/roman/Desktop/dirlist/access.c",
		"/C/Users/roman/Desktop/dirlist/lib/uint64.h",
		"/C/Users/roman/Desktop/dirlist/lib/binfmt.h",
		"/C/Users/roman/Desktop/dirlist/lib/windoze.h",
		"/C/Users/roman/Desktop/unix.h",
		"/C/Users/roman/Desktop/dirlist/lib/typedefs.h",
		"/C/Users/roman/Desktop/dirlist/lib/socket.h",
		"/C/Users/roman/Desktop/dirlist/lib/socket_internal.h",
		"/B/PortableApps/SublimeText3Portable/App/SublimeText64/Data/Packages/User/CPrettify/user.cfg",
		"/B/PortableApps/SublimeText3Portable/App/SublimeText64/Data/Packages/User/CPrettify.sublime-settings",
		"/B/PortableApps/SublimeText3Portable/App/SublimeText64/Data/Packages/User/Package Control.sublime-settings",
		"/B/PortableApps/SublimeText3Portable/App/SublimeText64/Data/Packages/Package Control/Package Control.sublime-settings",
		"/C/Users/roman/Desktop/dirlist/lib/path/path_num_sa.c",
		"/B/PortableApps/SublimeText3Portable/App/SublimeText64/Data/Packages/CTags/CTags.sublime-settings",
		"/B/PortableApps/SublimeText3Portable/App/SublimeText64/Data/Packages/User/CTags.sublime-settings",
		"/B/PortableApps/SublimeText3Portable/App/SublimeText64/Data/Packages/CPrettify/CPrettify.sublime-settings",
		"/D/Qt/qt-5.10.1-static-ltcg-msvc2017-x86_64/mkspecs/win32-msvc/qmake.conf",
		"/B/PortableApps/SublimeText3Portable/App/SublimeText64/Data/Packages/User/Default (Windows).sublime-keymap",
		"/B/PortableApps/SublimeText3Portable/App/SublimeText64/Data/Packages/Schemr/Default (Windows).sublime-keymap",
		"/D/Sources/rsenn/dirlist/scripts/gen-a-deps.sh",
		"/D/Sources/rsenn/dirlist/rdir-test.c",
		"/D/Sources/rsenn/dirlist/lib/rdir.h",
		"/D/Sources/rsenn/dirlist/lib/rdir/rdir_close.c",
		"/D/Sources/rsenn/dirlist/lib/rdir/rdir_open.c",
		"/D/Sources/rsenn/dirlist/lib/rdir/rdir_read.c",
		"/D/Sources/rsenn/dirlist/lib/dir/dir_name.c",
		"/D/Sources/rsenn/dirlist/lib/dir/dir_type.c",
		"/D/Sources/rsenn/dirlist/dirlist.sublime-project",
		"/D/Sources/rsenn/dirlist/lib/utf8.c",
		"/D/Sources/rsenn/dirlist/lib/pe.h",
		"/D/Sources/rsenn/dirlist/elflist.c",
		"/D/Sources/rsenn/dirlist/elf64list.c",
		"/D/Sources/rsenn/dirlist/pelist.c",
		"/D/Sources/rsenn/dirlist/pathtool.c",
		"/B/Programs/polipo/config",
		"/D/Sources/rsenn/dirlist/mediathek-list.c",
		"/D/Sources/rsenn/dirlist/count-depth.c",
		"/D/Sources/rsenn/dirlist/decode-ls-lR.c",
		"/home/roman/.config/sublime-text-3/Packages/Schemr/Default (Linux).sublime-keymap",
		"/home/roman/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/roman/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
		"/home/roman/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
		"/home/roman/Sources/dirlist/lib/utf8.h",
		"/home/roman/Sources/dirlist/lib/dir/dir_name.c",
		"/home/roman/Sources/dirlist/lib/dir/dir_read.c",
		"/home/roman/Sources/dirlist/lib/dir_internal.h",
		"/home/roman/Sources/dirlist/lib/dir/dir_close.c",
		"/home/roman/Sources/dirlist/lib/dir.h",
		"/home/roman/Sources/dirlist/lib/dir/dir_open.c",
		"/C/Users/roman/Documents/dirlist/list-r.c",
		"/C/Users/roman/Documents/dirlist/lib/utf8.c",
		"/C/Users/roman/Documents/dirlist/lib/utf8.h",
		"/C/Users/roman/Documents/dirlist/lib/dir.h",
		"/C/Users/roman/Documents/dirlist/lib/dir_internal.h",
		"/C/Users/roman/Documents/dirlist/lib/dir/dir_read.c",
		"/C/Users/roman/Documents/dirlist/lib/array/array_allocate.c",
		"/C/Users/roman/Documents/dirlist/lib/array.h",
		"/C/Users/roman/Documents/dirlist/lib/array/array_bytes.c",
		"/C/Users/roman/Documents/dirlist/lib/array/array_length.c",
		"/C/Users/roman/Documents/dirlist/lib/array/array_start.c",
		"/C/Users/roman/Documents/dirlist/lib/fnmatch.c",
		"/C/Users/roman/Documents/dirlist/lib/fnmatch.h",
		"/C/Users/roman/Documents/dirlist/lib/strlist/strlist_pushm_internal.c",
		"/C/Users/roman/Documents/dirlist/compiler-wrapper.c",
		"/C/Users/roman/Documents/dirlist/lib/buffer/buffer_putc.c",
		"/C/Users/roman/Documents/dirlist/lib/array/array_catb.c",
		"/C/Users/roman/Documents/dirlist/lib/strlist/strlist_cat.c",
		"/C/Users/roman/Documents/dirlist/lib/strlist/strlist_push_sa.c",
		"/C/Users/roman/Documents/dirlist/mediathek-parser.c",
		"/C/Users/roman/Documents/dirlist/dirlist.sublime-project",
		"/C/Users/roman/Documents/dirlist/lib/strlist/strlist_push.c",
		"/C/Users/roman/Documents/dirlist/lib/strlist_copy.c",
		"/I/PortableApps/SublimeTextPortable/App/64-bit/Data/Packages/CodeFormatter/Default (Windows).sublime-keymap",
		"/I/PortableApps/SublimeTextPortable/App/64-bit/Data/Packages/User/Default (Windows).sublime-keymap",
		"/I/PortableApps/SublimeTextPortable/App/64-bit/Data/Packages/Clang Format/Default (Windows).sublime-keymap",
		"/I/PortableApps/SublimeTextPortable/App/64-bit/Data/Packages/User/SchemrFavorites.sublime-settings",
		"/C/Users/roman/Documents/dirlist/Makefile",
		"/C/Users/roman/Documents/dirlist/lib/stralloc.h",
		"/C/Users/roman/Documents/dirlist/lib/stralloc/stralloc_cats.c",
		"/C/Users/roman/Documents/dirlist/lib/stralloc/stralloc_append_sa.c",
		"/C/Users/roman/Documents/dirlist/mediathek-parser.cpp",
		"/C/Users/roman/Documents/dirlist/lib/array/array_cat0.c",
		"/C/Users/roman/Documents/dirlist/lib/array/array_cats.c"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"srcdir",
			"path_rela",
			"debug_sa(",
			"dmc",
			"LIBS\"",
			"$(LIBS)",
			"print_target_deps",
			"_IMPORT",
			"pe_export_directory",
			"strlist_ini",
			"-F",
			"-Fo",
			"-o\\\\",
			"e\\$",
			"e$",
			"o$",
			"-o",
			"AMD64",
			"X64",
			"86",
			"X86",
			"x86",
			"for_li",
			"gen_link",
			"delete_command",
			"set_compiler",
			"path_prefix_s",
			"libext",
			"get_inc",
			"extract_inc",
			"clean_rule",
			"wildcard",
			"realpath",
			"absolute",
			"\\",
			"equal",
			"-w",
			"link_rules",
			"data_dir",
			"shift+ctrl",
			"alt",
			"dir_INTERNAL(d)->tmpname",
			"size",
			"double",
			"float",
			"includedir",
			"\"as\"",
			"-P",
			"dump_str",
			"DUMP_LIST",
			"print_strl",
			"print_str",
			"warn",
			"err",
			"err_format",
			"debugger",
			"warn",
			"err",
			"process_option(",
			"Outdir",
			"pass1",
			"print_str",
			"++argi",
			"dump_stralloc",
			"strlist_push(",
			"debug",
			"-g",
			"\"ctrl+option+a\"",
			", ",
			"WARNINGS",
			"-W",
			"byte_",
			"thema",
			"\\",
			"pushsa",
			"md ",
			"mkdir",
			"cannot",
			"free",
			"zero",
			"mediat",
			"media",
			"mediathe",
			"get_until",
			"mediathe",
			"string_predicate",
			"mediathe",
			"std::string",
			"seconds",
			"64",
			"SOFTPWM",
			"number",
			"USE_HD44780_LCD",
			"TRISA",
			"RA",
			"def",
			"chipl",
			":65",
			"BUILDDIR",
			"-I",
			"CPPFLAGS",
			"-I",
			"to_amount",
			"led_enabled",
			"LED_PIN",
			"LED_",
			"UART_",
			"uart_",
			"#warning",
			"uart_",
			"uart_ini",
			"OF_BIT",
			"PRESC",
			"TMR1",
			"TMR0",
			"IVAL",
			" PRESCALE",
			"uint8 ",
			"__delay_ms",
			"echo_mode"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\\\\",
			"ctrl+shift",
			"ctrl",
			"d->tmpname",
			"space",
			"msg",
			"warn",
			"err_format",
			"msg",
			"warn",
			"argi++",
			"\"ctrl+alt+f\"",
			",\\n                ",
			",\\n     ",
			"t",
			"/",
			"init",
			"string",
			"dsecs",
			"SoftPWM",
			"USE_LCD",
			"TRISGP",
			"GP",
			"OBJDIR",
			"SER_",
			"ser_",
			"#advisory",
			"POSTSC",
			"TMR2",
			"TMR1",
			"INTERVAL",
			" SCALE",
			"volatile uint8 ",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"current_file": null,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		},
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/pe/pe_get_datadir.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 280,
						"regions":
						{
						},
						"selection":
						[
							[
								204,
								204
							]
						],
						"settings":
						{
							"syntax": "Packages/C99/C99.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "genmakefile.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 50932,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								50259
							]
						],
						"settings":
						{
							"syntax": "Packages/C99/C99.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26926.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/Clang Format/clang_format_custom.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18463,
						"regions":
						{
						},
						"selection":
						[
							[
								18463,
								18463
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/User/Default (Windows).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 614,
						"regions":
						{
						},
						"selection":
						[
							[
								243,
								243
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/Clang Format/Default (Windows).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 617,
						"regions":
						{
						},
						"selection":
						[
							[
								400,
								406
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 752,
						"regions":
						{
						},
						"selection":
						[
							[
								752,
								752
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/Clang Format/clang_format.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1352,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								1352
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/B/PortableApps/SublimeTextPortable/App/SublimeText64/Data/Packages/User/clang_format.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1350,
						"regions":
						{
						},
						"selection":
						[
							[
								1082,
								1082
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 141.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/path/path_relative.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2151,
						"regions":
						{
						},
						"selection":
						[
							[
								185,
								185
							]
						],
						"settings":
						{
							"syntax": "Packages/C99/C99.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/stralloc/mmap_filename.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1550,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C99/C99.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 82.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 35.968031968
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.CppBuilder":
	{
		"height": 209.0
	},
	"output.exec":
	{
		"height": 283.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"pinned_build_system": "Make",
	"project": "dirlist.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 260.0,
	"status_bar_visible": false,
	"template_settings":
	{
	}
}
