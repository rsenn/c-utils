include(${CMAKE_CURRENT_SOURCE_DIR}/../cmake/Functions.cmake)

#[[message("CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
message("CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
message("CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
message("CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")]]

if(CMAKE_COMPILER_IS_GNUCC OR "${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
  set(iarray_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/cas.S)
endif(CMAKE_COMPILER_IS_GNUCC OR "${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")

set(MODSUBDIRS alloc array binfmt bmap buffer byte case cb cbmap charbuf coff dir dlist dns elf env errmsg fmt gpio hashmap hmap http iarray ihex io json mmap ndelay omf open path pe playlist cpp process range rdir safemult scan seek set sig slist socket str stralloc strarray strlist tai taia textbuf textcode tls tokenizer ucs uint16 uint32 uint64 unix utf8 wait xml)
file(GLOB MODHEADERS ${CMAKE_CURRENT_SOURCE_DIR}/*.h)

set(LIB_SOURCES)

foreach(LIBNAME ${MODSUBDIRS})
  file(GLOB MODHEADERS ${CMAKE_CURRENT_SOURCE_DIR}/${LIBNAME}.h ${CMAKE_CURRENT_SOURCE_DIR}/${LIBNAME}_*.h)
  file(GLOB MODSOURCES ${CMAKE_CURRENT_SOURCE_DIR}/${LIBNAME}/*.c)
  if(NOT MODSOURCES)
    file(GLOB MODSOURCES ${CMAKE_CURRENT_SOURCE_DIR}/${LIBNAME}_*.c)
  endif()
  set(EXTRA_SOURCES ${${LIBNAME}_SOURCES})
  set(EXTRA_DEFS "${${LIBNAME}_DEFS}")
  set(EXTRA_LIBS "${${LIBNAME}_LIBS}")

  set(ALL_SOURCES ${LIB_SOURCES})
  list(APPEND ALL_SOURCES ${LIB_SOURCES} ${MODSOURCES} ${MODHEADERS} ${EXTRA_SOURCES})
  set(LIB_SOURCES "${ALL_SOURCES}" PARENT_SCOPE)

  # message("Library ${LIBNAME} EXTRA_DEFS = ${EXTRA_DEFS}")
  if(EXTRA_SOURCES)
    message(STATUS "${LIBNAME} extra sources: ${EXTRA_SOURCES}")
  endif(EXTRA_SOURCES)
  add_library("${LIBNAME}" STATIC ${MODSOURCES} ${MODHEADERS} ${EXTRA_SOURCES})
  if(BUILD_SHARED_LIBS)
    add_library("${LIBNAME}-shared" SHARED ${MODSOURCES} ${MODHEADERS} ${EXTRA_SOURCES})
    set_target_properties("${LIBNAME}-shared" PROPERTIES PREFIX "lib" COMPILE_FLAGS "${WARN_C_COMPILER_FLAGS} -fPIC" COMPILE_DEFINITIONS "${EXTRA_DEFS}")
  endif(BUILD_SHARED_LIBS)
  set_target_properties("${LIBNAME}" PROPERTIES PREFIX "" COMPILE_FLAGS "${WARN_C_COMPILER_FLAGS} ${${LIBNAME}_COMPILE_FLAGS}")
  if(EXTRA_LIBS)
    message("Library ${LIBNAME} EXTRA_LIBS = ${EXTRA_LIBS}")
    target_link_libraries("${LIBNAME}" ${EXTRA_LIBS})
  endif(EXTRA_LIBS)
endforeach(LIBNAME)

set_target_properties(io PROPERTIES COMPILE_FLAGS "${MUX_DEFS}")

foreach(NETLIB dns http io ndelay socket)
  target_link_libraries(${NETLIB} ${LIBMSWSOCK})
endforeach()

if(WINDOWS)
  if(NOT LIBMSWSOCK)
    set(LIBMSWSOCK wsock32)
  endif(NOT LIBMSWSOCK)
endif(WINDOWS)
message(STATUS "Microsoft WinSock library: ${LIBMSWSOCK}")

target_link_libraries(alloc byte)
target_link_libraries(unix stralloc buffer ndelay utf8)
target_link_libraries(array safemult byte str)
target_link_libraries(binfmt mmap byte)
target_link_libraries(buffer alloc byte fmt mmap open str ${ZLIB_LIBRARIES})
target_link_libraries(cb str)
target_link_libraries(cbmap str)
target_link_libraries(dns stralloc byte case fmt io open socket str taia uint16 ${LIBIPHLPAPI})
target_link_libraries(dir stralloc)
target_link_libraries(errmsg str)
target_link_libraries(elf byte str range mmap uint64 uint32 uint16)
target_link_libraries(fmt byte str uint64 uint32)
target_link_libraries(gpio mmap)
target_link_libraries(hmap str)
target_link_libraries(http fmt dns errmsg byte io scan socket stralloc str ${TLS_LIBRARIES})
target_link_libraries(io buffer iarray array byte fmt open taia ${LIBMSWSOCK})
target_link_libraries(json hashmap fmt scan)
target_link_libraries(bmap str)
target_link_libraries(mmap seek open scan ${LIBPSAPI})
target_link_libraries(open str uint32)
target_link_libraries(path unix dir strlist)
target_link_libraries(pe uint64 uint32 uint16)
target_link_libraries(playlist byte fmt scan str xml)
target_link_libraries(rdir dir)
target_link_libraries(scan byte str)
target_link_libraries(socket io iarray byte fmt ndelay scan uint16 ${LIBMSWSOCK})
target_link_libraries(str byte)
target_link_libraries(stralloc buffer alloc open byte fmt str)
target_link_libraries(strarray array unix)
target_link_libraries(strlist stralloc buffer)
target_link_libraries(taia tai)
target_link_libraries(textbuf byte playlist)
target_link_libraries(uint64 uint32)
target_link_libraries(xml buffer array strlist hmap alloc)
target_link_libraries(json slist hmap stralloc buffer alloc)
target_link_libraries(ndelay socket)
target_link_libraries(process wait errmsg)
target_link_libraries(ihex scan byte)
target_link_libraries(uint32 taia tai)
target_link_libraries(tls io iarray buffer byte str ${TLS_LIBRARIES})
target_link_libraries(http dns errmsg byte io scan tls socket stralloc str)
target_link_libraries(tokenizer buffer byte str)
target_link_libraries(cpp errmsg tokenizer strlist hashmap hmap)

if(BUILD_SHARED)
  file(GLOB LIB_SOURCES */*.c)

  add_library(c-utils SHARED ${LIB_SOURCES})
  if(MSYS)
    set(LIBPREFIX "msys-")
  else(MSYS)
    if(CYGWIN)
      set(LIBPREFIX "cyg")
    else(CYGWIN)
      if(MINGW)
        set(LIBPREFIX "lib")
      else(MINGW)
        if(WIN32)
          set(LIBPREFIX "")
        else(WIN32)

        endif(WIN32)
      endif(MINGW)
    endif(CYGWIN)
  endif(MSYS)
  set_target_properties(c-utils PROPERTIES SOVERSION 1.0 PREFIX "${LIBPREFIX}")

  target_link_libraries(c-utils ${TLS_LIBRARIES} ${COMPRESSION_LIBRARIES} ${ZLIB_LIBRARY} ${LIBMSWSOCK})

  install(TARGETS c-utils DESTINATION lib)
endif(BUILD_SHARED)
